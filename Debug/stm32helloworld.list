
stm32helloworld.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009604  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000068  08009794  08009794  00019794  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080097fc  080097fc  00020090  2**0
                  CONTENTS
  4 .ARM          00000008  080097fc  080097fc  000197fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009804  08009804  00020090  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009804  08009804  00019804  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009808  08009808  00019808  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000090  20000000  0800980c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020090  2**0
                  CONTENTS
 10 .bss          00000888  20000090  20000090  00020090  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000918  20000918  00020090  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001a2d1  00000000  00000000  000200c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003cff  00000000  00000000  0003a391  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000013d0  00000000  00000000  0003e090  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001270  00000000  00000000  0003f460  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00024a9d  00000000  00000000  000406d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001b080  00000000  00000000  0006516d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000cde83  00000000  00000000  000801ed  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0014e070  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000570c  00000000  00000000  0014e0c0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000090 	.word	0x20000090
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800977c 	.word	0x0800977c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000094 	.word	0x20000094
 80001cc:	0800977c 	.word	0x0800977c

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b974 	b.w	8000570 <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9d08      	ldr	r5, [sp, #32]
 80002a6:	4604      	mov	r4, r0
 80002a8:	468e      	mov	lr, r1
 80002aa:	2b00      	cmp	r3, #0
 80002ac:	d14d      	bne.n	800034a <__udivmoddi4+0xaa>
 80002ae:	428a      	cmp	r2, r1
 80002b0:	4694      	mov	ip, r2
 80002b2:	d969      	bls.n	8000388 <__udivmoddi4+0xe8>
 80002b4:	fab2 f282 	clz	r2, r2
 80002b8:	b152      	cbz	r2, 80002d0 <__udivmoddi4+0x30>
 80002ba:	fa01 f302 	lsl.w	r3, r1, r2
 80002be:	f1c2 0120 	rsb	r1, r2, #32
 80002c2:	fa20 f101 	lsr.w	r1, r0, r1
 80002c6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002ca:	ea41 0e03 	orr.w	lr, r1, r3
 80002ce:	4094      	lsls	r4, r2
 80002d0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002d4:	0c21      	lsrs	r1, r4, #16
 80002d6:	fbbe f6f8 	udiv	r6, lr, r8
 80002da:	fa1f f78c 	uxth.w	r7, ip
 80002de:	fb08 e316 	mls	r3, r8, r6, lr
 80002e2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002e6:	fb06 f107 	mul.w	r1, r6, r7
 80002ea:	4299      	cmp	r1, r3
 80002ec:	d90a      	bls.n	8000304 <__udivmoddi4+0x64>
 80002ee:	eb1c 0303 	adds.w	r3, ip, r3
 80002f2:	f106 30ff 	add.w	r0, r6, #4294967295
 80002f6:	f080 811f 	bcs.w	8000538 <__udivmoddi4+0x298>
 80002fa:	4299      	cmp	r1, r3
 80002fc:	f240 811c 	bls.w	8000538 <__udivmoddi4+0x298>
 8000300:	3e02      	subs	r6, #2
 8000302:	4463      	add	r3, ip
 8000304:	1a5b      	subs	r3, r3, r1
 8000306:	b2a4      	uxth	r4, r4
 8000308:	fbb3 f0f8 	udiv	r0, r3, r8
 800030c:	fb08 3310 	mls	r3, r8, r0, r3
 8000310:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000314:	fb00 f707 	mul.w	r7, r0, r7
 8000318:	42a7      	cmp	r7, r4
 800031a:	d90a      	bls.n	8000332 <__udivmoddi4+0x92>
 800031c:	eb1c 0404 	adds.w	r4, ip, r4
 8000320:	f100 33ff 	add.w	r3, r0, #4294967295
 8000324:	f080 810a 	bcs.w	800053c <__udivmoddi4+0x29c>
 8000328:	42a7      	cmp	r7, r4
 800032a:	f240 8107 	bls.w	800053c <__udivmoddi4+0x29c>
 800032e:	4464      	add	r4, ip
 8000330:	3802      	subs	r0, #2
 8000332:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000336:	1be4      	subs	r4, r4, r7
 8000338:	2600      	movs	r6, #0
 800033a:	b11d      	cbz	r5, 8000344 <__udivmoddi4+0xa4>
 800033c:	40d4      	lsrs	r4, r2
 800033e:	2300      	movs	r3, #0
 8000340:	e9c5 4300 	strd	r4, r3, [r5]
 8000344:	4631      	mov	r1, r6
 8000346:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800034a:	428b      	cmp	r3, r1
 800034c:	d909      	bls.n	8000362 <__udivmoddi4+0xc2>
 800034e:	2d00      	cmp	r5, #0
 8000350:	f000 80ef 	beq.w	8000532 <__udivmoddi4+0x292>
 8000354:	2600      	movs	r6, #0
 8000356:	e9c5 0100 	strd	r0, r1, [r5]
 800035a:	4630      	mov	r0, r6
 800035c:	4631      	mov	r1, r6
 800035e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000362:	fab3 f683 	clz	r6, r3
 8000366:	2e00      	cmp	r6, #0
 8000368:	d14a      	bne.n	8000400 <__udivmoddi4+0x160>
 800036a:	428b      	cmp	r3, r1
 800036c:	d302      	bcc.n	8000374 <__udivmoddi4+0xd4>
 800036e:	4282      	cmp	r2, r0
 8000370:	f200 80f9 	bhi.w	8000566 <__udivmoddi4+0x2c6>
 8000374:	1a84      	subs	r4, r0, r2
 8000376:	eb61 0303 	sbc.w	r3, r1, r3
 800037a:	2001      	movs	r0, #1
 800037c:	469e      	mov	lr, r3
 800037e:	2d00      	cmp	r5, #0
 8000380:	d0e0      	beq.n	8000344 <__udivmoddi4+0xa4>
 8000382:	e9c5 4e00 	strd	r4, lr, [r5]
 8000386:	e7dd      	b.n	8000344 <__udivmoddi4+0xa4>
 8000388:	b902      	cbnz	r2, 800038c <__udivmoddi4+0xec>
 800038a:	deff      	udf	#255	; 0xff
 800038c:	fab2 f282 	clz	r2, r2
 8000390:	2a00      	cmp	r2, #0
 8000392:	f040 8092 	bne.w	80004ba <__udivmoddi4+0x21a>
 8000396:	eba1 010c 	sub.w	r1, r1, ip
 800039a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800039e:	fa1f fe8c 	uxth.w	lr, ip
 80003a2:	2601      	movs	r6, #1
 80003a4:	0c20      	lsrs	r0, r4, #16
 80003a6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003aa:	fb07 1113 	mls	r1, r7, r3, r1
 80003ae:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003b2:	fb0e f003 	mul.w	r0, lr, r3
 80003b6:	4288      	cmp	r0, r1
 80003b8:	d908      	bls.n	80003cc <__udivmoddi4+0x12c>
 80003ba:	eb1c 0101 	adds.w	r1, ip, r1
 80003be:	f103 38ff 	add.w	r8, r3, #4294967295
 80003c2:	d202      	bcs.n	80003ca <__udivmoddi4+0x12a>
 80003c4:	4288      	cmp	r0, r1
 80003c6:	f200 80cb 	bhi.w	8000560 <__udivmoddi4+0x2c0>
 80003ca:	4643      	mov	r3, r8
 80003cc:	1a09      	subs	r1, r1, r0
 80003ce:	b2a4      	uxth	r4, r4
 80003d0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003d4:	fb07 1110 	mls	r1, r7, r0, r1
 80003d8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003dc:	fb0e fe00 	mul.w	lr, lr, r0
 80003e0:	45a6      	cmp	lr, r4
 80003e2:	d908      	bls.n	80003f6 <__udivmoddi4+0x156>
 80003e4:	eb1c 0404 	adds.w	r4, ip, r4
 80003e8:	f100 31ff 	add.w	r1, r0, #4294967295
 80003ec:	d202      	bcs.n	80003f4 <__udivmoddi4+0x154>
 80003ee:	45a6      	cmp	lr, r4
 80003f0:	f200 80bb 	bhi.w	800056a <__udivmoddi4+0x2ca>
 80003f4:	4608      	mov	r0, r1
 80003f6:	eba4 040e 	sub.w	r4, r4, lr
 80003fa:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80003fe:	e79c      	b.n	800033a <__udivmoddi4+0x9a>
 8000400:	f1c6 0720 	rsb	r7, r6, #32
 8000404:	40b3      	lsls	r3, r6
 8000406:	fa22 fc07 	lsr.w	ip, r2, r7
 800040a:	ea4c 0c03 	orr.w	ip, ip, r3
 800040e:	fa20 f407 	lsr.w	r4, r0, r7
 8000412:	fa01 f306 	lsl.w	r3, r1, r6
 8000416:	431c      	orrs	r4, r3
 8000418:	40f9      	lsrs	r1, r7
 800041a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800041e:	fa00 f306 	lsl.w	r3, r0, r6
 8000422:	fbb1 f8f9 	udiv	r8, r1, r9
 8000426:	0c20      	lsrs	r0, r4, #16
 8000428:	fa1f fe8c 	uxth.w	lr, ip
 800042c:	fb09 1118 	mls	r1, r9, r8, r1
 8000430:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000434:	fb08 f00e 	mul.w	r0, r8, lr
 8000438:	4288      	cmp	r0, r1
 800043a:	fa02 f206 	lsl.w	r2, r2, r6
 800043e:	d90b      	bls.n	8000458 <__udivmoddi4+0x1b8>
 8000440:	eb1c 0101 	adds.w	r1, ip, r1
 8000444:	f108 3aff 	add.w	sl, r8, #4294967295
 8000448:	f080 8088 	bcs.w	800055c <__udivmoddi4+0x2bc>
 800044c:	4288      	cmp	r0, r1
 800044e:	f240 8085 	bls.w	800055c <__udivmoddi4+0x2bc>
 8000452:	f1a8 0802 	sub.w	r8, r8, #2
 8000456:	4461      	add	r1, ip
 8000458:	1a09      	subs	r1, r1, r0
 800045a:	b2a4      	uxth	r4, r4
 800045c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000460:	fb09 1110 	mls	r1, r9, r0, r1
 8000464:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000468:	fb00 fe0e 	mul.w	lr, r0, lr
 800046c:	458e      	cmp	lr, r1
 800046e:	d908      	bls.n	8000482 <__udivmoddi4+0x1e2>
 8000470:	eb1c 0101 	adds.w	r1, ip, r1
 8000474:	f100 34ff 	add.w	r4, r0, #4294967295
 8000478:	d26c      	bcs.n	8000554 <__udivmoddi4+0x2b4>
 800047a:	458e      	cmp	lr, r1
 800047c:	d96a      	bls.n	8000554 <__udivmoddi4+0x2b4>
 800047e:	3802      	subs	r0, #2
 8000480:	4461      	add	r1, ip
 8000482:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000486:	fba0 9402 	umull	r9, r4, r0, r2
 800048a:	eba1 010e 	sub.w	r1, r1, lr
 800048e:	42a1      	cmp	r1, r4
 8000490:	46c8      	mov	r8, r9
 8000492:	46a6      	mov	lr, r4
 8000494:	d356      	bcc.n	8000544 <__udivmoddi4+0x2a4>
 8000496:	d053      	beq.n	8000540 <__udivmoddi4+0x2a0>
 8000498:	b15d      	cbz	r5, 80004b2 <__udivmoddi4+0x212>
 800049a:	ebb3 0208 	subs.w	r2, r3, r8
 800049e:	eb61 010e 	sbc.w	r1, r1, lr
 80004a2:	fa01 f707 	lsl.w	r7, r1, r7
 80004a6:	fa22 f306 	lsr.w	r3, r2, r6
 80004aa:	40f1      	lsrs	r1, r6
 80004ac:	431f      	orrs	r7, r3
 80004ae:	e9c5 7100 	strd	r7, r1, [r5]
 80004b2:	2600      	movs	r6, #0
 80004b4:	4631      	mov	r1, r6
 80004b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	40d8      	lsrs	r0, r3
 80004c0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004c4:	fa21 f303 	lsr.w	r3, r1, r3
 80004c8:	4091      	lsls	r1, r2
 80004ca:	4301      	orrs	r1, r0
 80004cc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004d0:	fa1f fe8c 	uxth.w	lr, ip
 80004d4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004d8:	fb07 3610 	mls	r6, r7, r0, r3
 80004dc:	0c0b      	lsrs	r3, r1, #16
 80004de:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004e2:	fb00 f60e 	mul.w	r6, r0, lr
 80004e6:	429e      	cmp	r6, r3
 80004e8:	fa04 f402 	lsl.w	r4, r4, r2
 80004ec:	d908      	bls.n	8000500 <__udivmoddi4+0x260>
 80004ee:	eb1c 0303 	adds.w	r3, ip, r3
 80004f2:	f100 38ff 	add.w	r8, r0, #4294967295
 80004f6:	d22f      	bcs.n	8000558 <__udivmoddi4+0x2b8>
 80004f8:	429e      	cmp	r6, r3
 80004fa:	d92d      	bls.n	8000558 <__udivmoddi4+0x2b8>
 80004fc:	3802      	subs	r0, #2
 80004fe:	4463      	add	r3, ip
 8000500:	1b9b      	subs	r3, r3, r6
 8000502:	b289      	uxth	r1, r1
 8000504:	fbb3 f6f7 	udiv	r6, r3, r7
 8000508:	fb07 3316 	mls	r3, r7, r6, r3
 800050c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000510:	fb06 f30e 	mul.w	r3, r6, lr
 8000514:	428b      	cmp	r3, r1
 8000516:	d908      	bls.n	800052a <__udivmoddi4+0x28a>
 8000518:	eb1c 0101 	adds.w	r1, ip, r1
 800051c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000520:	d216      	bcs.n	8000550 <__udivmoddi4+0x2b0>
 8000522:	428b      	cmp	r3, r1
 8000524:	d914      	bls.n	8000550 <__udivmoddi4+0x2b0>
 8000526:	3e02      	subs	r6, #2
 8000528:	4461      	add	r1, ip
 800052a:	1ac9      	subs	r1, r1, r3
 800052c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000530:	e738      	b.n	80003a4 <__udivmoddi4+0x104>
 8000532:	462e      	mov	r6, r5
 8000534:	4628      	mov	r0, r5
 8000536:	e705      	b.n	8000344 <__udivmoddi4+0xa4>
 8000538:	4606      	mov	r6, r0
 800053a:	e6e3      	b.n	8000304 <__udivmoddi4+0x64>
 800053c:	4618      	mov	r0, r3
 800053e:	e6f8      	b.n	8000332 <__udivmoddi4+0x92>
 8000540:	454b      	cmp	r3, r9
 8000542:	d2a9      	bcs.n	8000498 <__udivmoddi4+0x1f8>
 8000544:	ebb9 0802 	subs.w	r8, r9, r2
 8000548:	eb64 0e0c 	sbc.w	lr, r4, ip
 800054c:	3801      	subs	r0, #1
 800054e:	e7a3      	b.n	8000498 <__udivmoddi4+0x1f8>
 8000550:	4646      	mov	r6, r8
 8000552:	e7ea      	b.n	800052a <__udivmoddi4+0x28a>
 8000554:	4620      	mov	r0, r4
 8000556:	e794      	b.n	8000482 <__udivmoddi4+0x1e2>
 8000558:	4640      	mov	r0, r8
 800055a:	e7d1      	b.n	8000500 <__udivmoddi4+0x260>
 800055c:	46d0      	mov	r8, sl
 800055e:	e77b      	b.n	8000458 <__udivmoddi4+0x1b8>
 8000560:	3b02      	subs	r3, #2
 8000562:	4461      	add	r1, ip
 8000564:	e732      	b.n	80003cc <__udivmoddi4+0x12c>
 8000566:	4630      	mov	r0, r6
 8000568:	e709      	b.n	800037e <__udivmoddi4+0xde>
 800056a:	4464      	add	r4, ip
 800056c:	3802      	subs	r0, #2
 800056e:	e742      	b.n	80003f6 <__udivmoddi4+0x156>

08000570 <__aeabi_idiv0>:
 8000570:	4770      	bx	lr
 8000572:	bf00      	nop

08000574 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 8000574:	b580      	push	{r7, lr}
 8000576:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8000578:	f000 fcf2 	bl	8000f60 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 800057c:	f000 f810 	bl	80005a0 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8000580:	f000 f936 	bl	80007f0 <MX_GPIO_Init>
	MX_I2C1_Init();
 8000584:	f000 f876 	bl	8000674 <MX_I2C1_Init>
	MX_I2S3_Init();
 8000588:	f000 f8a2 	bl	80006d0 <MX_I2S3_Init>
	MX_SPI1_Init();
 800058c:	f000 f8d0 	bl	8000730 <MX_SPI1_Init>
	MX_USB_HOST_Init();
 8000590:	f008 f93c 	bl	800880c <MX_USB_HOST_Init>
	MX_USART2_UART_Init();
 8000594:	f000 f902 	bl	800079c <MX_USART2_UART_Init>
	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1)
	{
		/* USER CODE END WHILE */
		MX_USB_HOST_Process();
 8000598:	f008 f95e 	bl	8008858 <MX_USB_HOST_Process>
 800059c:	e7fc      	b.n	8000598 <main+0x24>
	...

080005a0 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 80005a0:	b580      	push	{r7, lr}
 80005a2:	b094      	sub	sp, #80	; 0x50
 80005a4:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005a6:	f107 0320 	add.w	r3, r7, #32
 80005aa:	2230      	movs	r2, #48	; 0x30
 80005ac:	2100      	movs	r1, #0
 80005ae:	4618      	mov	r0, r3
 80005b0:	f008 fc6e 	bl	8008e90 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005b4:	f107 030c 	add.w	r3, r7, #12
 80005b8:	2200      	movs	r2, #0
 80005ba:	601a      	str	r2, [r3, #0]
 80005bc:	605a      	str	r2, [r3, #4]
 80005be:	609a      	str	r2, [r3, #8]
 80005c0:	60da      	str	r2, [r3, #12]
 80005c2:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 80005c4:	2300      	movs	r3, #0
 80005c6:	60bb      	str	r3, [r7, #8]
 80005c8:	4b28      	ldr	r3, [pc, #160]	; (800066c <SystemClock_Config+0xcc>)
 80005ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005cc:	4a27      	ldr	r2, [pc, #156]	; (800066c <SystemClock_Config+0xcc>)
 80005ce:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80005d2:	6413      	str	r3, [r2, #64]	; 0x40
 80005d4:	4b25      	ldr	r3, [pc, #148]	; (800066c <SystemClock_Config+0xcc>)
 80005d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005d8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80005dc:	60bb      	str	r3, [r7, #8]
 80005de:	68bb      	ldr	r3, [r7, #8]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80005e0:	2300      	movs	r3, #0
 80005e2:	607b      	str	r3, [r7, #4]
 80005e4:	4b22      	ldr	r3, [pc, #136]	; (8000670 <SystemClock_Config+0xd0>)
 80005e6:	681b      	ldr	r3, [r3, #0]
 80005e8:	4a21      	ldr	r2, [pc, #132]	; (8000670 <SystemClock_Config+0xd0>)
 80005ea:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80005ee:	6013      	str	r3, [r2, #0]
 80005f0:	4b1f      	ldr	r3, [pc, #124]	; (8000670 <SystemClock_Config+0xd0>)
 80005f2:	681b      	ldr	r3, [r3, #0]
 80005f4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80005f8:	607b      	str	r3, [r7, #4]
 80005fa:	687b      	ldr	r3, [r7, #4]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80005fc:	2301      	movs	r3, #1
 80005fe:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000600:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000604:	627b      	str	r3, [r7, #36]	; 0x24
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000606:	2302      	movs	r3, #2
 8000608:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800060a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800060e:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLM = 8;
 8000610:	2308      	movs	r3, #8
 8000612:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLN = 336;
 8000614:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000618:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800061a:	2302      	movs	r3, #2
 800061c:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLQ = 7;
 800061e:	2307      	movs	r3, #7
 8000620:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000622:	f107 0320 	add.w	r3, r7, #32
 8000626:	4618      	mov	r0, r3
 8000628:	f003 faa8 	bl	8003b7c <HAL_RCC_OscConfig>
 800062c:	4603      	mov	r3, r0
 800062e:	2b00      	cmp	r3, #0
 8000630:	d001      	beq.n	8000636 <SystemClock_Config+0x96>
	{
		Error_Handler();
 8000632:	f000 fa4f 	bl	8000ad4 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000636:	230f      	movs	r3, #15
 8000638:	60fb      	str	r3, [r7, #12]
			|RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800063a:	2302      	movs	r3, #2
 800063c:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800063e:	2300      	movs	r3, #0
 8000640:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000642:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000646:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000648:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800064c:	61fb      	str	r3, [r7, #28]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800064e:	f107 030c 	add.w	r3, r7, #12
 8000652:	2105      	movs	r1, #5
 8000654:	4618      	mov	r0, r3
 8000656:	f003 fd09 	bl	800406c <HAL_RCC_ClockConfig>
 800065a:	4603      	mov	r3, r0
 800065c:	2b00      	cmp	r3, #0
 800065e:	d001      	beq.n	8000664 <SystemClock_Config+0xc4>
	{
		Error_Handler();
 8000660:	f000 fa38 	bl	8000ad4 <Error_Handler>
	}
}
 8000664:	bf00      	nop
 8000666:	3750      	adds	r7, #80	; 0x50
 8000668:	46bd      	mov	sp, r7
 800066a:	bd80      	pop	{r7, pc}
 800066c:	40023800 	.word	0x40023800
 8000670:	40007000 	.word	0x40007000

08000674 <MX_I2C1_Init>:
 * @brief I2C1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C1_Init(void)
{
 8000674:	b580      	push	{r7, lr}
 8000676:	af00      	add	r7, sp, #0
	/* USER CODE END I2C1_Init 0 */

	/* USER CODE BEGIN I2C1_Init 1 */

	/* USER CODE END I2C1_Init 1 */
	hi2c1.Instance = I2C1;
 8000678:	4b12      	ldr	r3, [pc, #72]	; (80006c4 <MX_I2C1_Init+0x50>)
 800067a:	4a13      	ldr	r2, [pc, #76]	; (80006c8 <MX_I2C1_Init+0x54>)
 800067c:	601a      	str	r2, [r3, #0]
	hi2c1.Init.ClockSpeed = 100000;
 800067e:	4b11      	ldr	r3, [pc, #68]	; (80006c4 <MX_I2C1_Init+0x50>)
 8000680:	4a12      	ldr	r2, [pc, #72]	; (80006cc <MX_I2C1_Init+0x58>)
 8000682:	605a      	str	r2, [r3, #4]
	hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000684:	4b0f      	ldr	r3, [pc, #60]	; (80006c4 <MX_I2C1_Init+0x50>)
 8000686:	2200      	movs	r2, #0
 8000688:	609a      	str	r2, [r3, #8]
	hi2c1.Init.OwnAddress1 = 0;
 800068a:	4b0e      	ldr	r3, [pc, #56]	; (80006c4 <MX_I2C1_Init+0x50>)
 800068c:	2200      	movs	r2, #0
 800068e:	60da      	str	r2, [r3, #12]
	hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000690:	4b0c      	ldr	r3, [pc, #48]	; (80006c4 <MX_I2C1_Init+0x50>)
 8000692:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000696:	611a      	str	r2, [r3, #16]
	hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000698:	4b0a      	ldr	r3, [pc, #40]	; (80006c4 <MX_I2C1_Init+0x50>)
 800069a:	2200      	movs	r2, #0
 800069c:	615a      	str	r2, [r3, #20]
	hi2c1.Init.OwnAddress2 = 0;
 800069e:	4b09      	ldr	r3, [pc, #36]	; (80006c4 <MX_I2C1_Init+0x50>)
 80006a0:	2200      	movs	r2, #0
 80006a2:	619a      	str	r2, [r3, #24]
	hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80006a4:	4b07      	ldr	r3, [pc, #28]	; (80006c4 <MX_I2C1_Init+0x50>)
 80006a6:	2200      	movs	r2, #0
 80006a8:	61da      	str	r2, [r3, #28]
	hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80006aa:	4b06      	ldr	r3, [pc, #24]	; (80006c4 <MX_I2C1_Init+0x50>)
 80006ac:	2200      	movs	r2, #0
 80006ae:	621a      	str	r2, [r3, #32]
	if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80006b0:	4804      	ldr	r0, [pc, #16]	; (80006c4 <MX_I2C1_Init+0x50>)
 80006b2:	f002 fc7f 	bl	8002fb4 <HAL_I2C_Init>
 80006b6:	4603      	mov	r3, r0
 80006b8:	2b00      	cmp	r3, #0
 80006ba:	d001      	beq.n	80006c0 <MX_I2C1_Init+0x4c>
	{
		Error_Handler();
 80006bc:	f000 fa0a 	bl	8000ad4 <Error_Handler>
	}
	/* USER CODE BEGIN I2C1_Init 2 */

	/* USER CODE END I2C1_Init 2 */

}
 80006c0:	bf00      	nop
 80006c2:	bd80      	pop	{r7, pc}
 80006c4:	200000ac 	.word	0x200000ac
 80006c8:	40005400 	.word	0x40005400
 80006cc:	000186a0 	.word	0x000186a0

080006d0 <MX_I2S3_Init>:
 * @brief I2S3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2S3_Init(void)
{
 80006d0:	b580      	push	{r7, lr}
 80006d2:	af00      	add	r7, sp, #0
	/* USER CODE END I2S3_Init 0 */

	/* USER CODE BEGIN I2S3_Init 1 */

	/* USER CODE END I2S3_Init 1 */
	hi2s3.Instance = SPI3;
 80006d4:	4b13      	ldr	r3, [pc, #76]	; (8000724 <MX_I2S3_Init+0x54>)
 80006d6:	4a14      	ldr	r2, [pc, #80]	; (8000728 <MX_I2S3_Init+0x58>)
 80006d8:	601a      	str	r2, [r3, #0]
	hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 80006da:	4b12      	ldr	r3, [pc, #72]	; (8000724 <MX_I2S3_Init+0x54>)
 80006dc:	f44f 7200 	mov.w	r2, #512	; 0x200
 80006e0:	605a      	str	r2, [r3, #4]
	hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 80006e2:	4b10      	ldr	r3, [pc, #64]	; (8000724 <MX_I2S3_Init+0x54>)
 80006e4:	2200      	movs	r2, #0
 80006e6:	609a      	str	r2, [r3, #8]
	hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 80006e8:	4b0e      	ldr	r3, [pc, #56]	; (8000724 <MX_I2S3_Init+0x54>)
 80006ea:	2200      	movs	r2, #0
 80006ec:	60da      	str	r2, [r3, #12]
	hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 80006ee:	4b0d      	ldr	r3, [pc, #52]	; (8000724 <MX_I2S3_Init+0x54>)
 80006f0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80006f4:	611a      	str	r2, [r3, #16]
	hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 80006f6:	4b0b      	ldr	r3, [pc, #44]	; (8000724 <MX_I2S3_Init+0x54>)
 80006f8:	4a0c      	ldr	r2, [pc, #48]	; (800072c <MX_I2S3_Init+0x5c>)
 80006fa:	615a      	str	r2, [r3, #20]
	hi2s3.Init.CPOL = I2S_CPOL_LOW;
 80006fc:	4b09      	ldr	r3, [pc, #36]	; (8000724 <MX_I2S3_Init+0x54>)
 80006fe:	2200      	movs	r2, #0
 8000700:	619a      	str	r2, [r3, #24]
	hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 8000702:	4b08      	ldr	r3, [pc, #32]	; (8000724 <MX_I2S3_Init+0x54>)
 8000704:	2200      	movs	r2, #0
 8000706:	61da      	str	r2, [r3, #28]
	hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 8000708:	4b06      	ldr	r3, [pc, #24]	; (8000724 <MX_I2S3_Init+0x54>)
 800070a:	2200      	movs	r2, #0
 800070c:	621a      	str	r2, [r3, #32]
	if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 800070e:	4805      	ldr	r0, [pc, #20]	; (8000724 <MX_I2S3_Init+0x54>)
 8000710:	f002 fd94 	bl	800323c <HAL_I2S_Init>
 8000714:	4603      	mov	r3, r0
 8000716:	2b00      	cmp	r3, #0
 8000718:	d001      	beq.n	800071e <MX_I2S3_Init+0x4e>
	{
		Error_Handler();
 800071a:	f000 f9db 	bl	8000ad4 <Error_Handler>
	}
	/* USER CODE BEGIN I2S3_Init 2 */

	/* USER CODE END I2S3_Init 2 */

}
 800071e:	bf00      	nop
 8000720:	bd80      	pop	{r7, pc}
 8000722:	bf00      	nop
 8000724:	20000100 	.word	0x20000100
 8000728:	40003c00 	.word	0x40003c00
 800072c:	00017700 	.word	0x00017700

08000730 <MX_SPI1_Init>:
 * @brief SPI1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_SPI1_Init(void)
{
 8000730:	b580      	push	{r7, lr}
 8000732:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN SPI1_Init 1 */

	/* USER CODE END SPI1_Init 1 */
	/* SPI1 parameter configuration*/
	hspi1.Instance = SPI1;
 8000734:	4b17      	ldr	r3, [pc, #92]	; (8000794 <MX_SPI1_Init+0x64>)
 8000736:	4a18      	ldr	r2, [pc, #96]	; (8000798 <MX_SPI1_Init+0x68>)
 8000738:	601a      	str	r2, [r3, #0]
	hspi1.Init.Mode = SPI_MODE_MASTER;
 800073a:	4b16      	ldr	r3, [pc, #88]	; (8000794 <MX_SPI1_Init+0x64>)
 800073c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000740:	605a      	str	r2, [r3, #4]
	hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000742:	4b14      	ldr	r3, [pc, #80]	; (8000794 <MX_SPI1_Init+0x64>)
 8000744:	2200      	movs	r2, #0
 8000746:	609a      	str	r2, [r3, #8]
	hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000748:	4b12      	ldr	r3, [pc, #72]	; (8000794 <MX_SPI1_Init+0x64>)
 800074a:	2200      	movs	r2, #0
 800074c:	60da      	str	r2, [r3, #12]
	hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800074e:	4b11      	ldr	r3, [pc, #68]	; (8000794 <MX_SPI1_Init+0x64>)
 8000750:	2200      	movs	r2, #0
 8000752:	611a      	str	r2, [r3, #16]
	hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000754:	4b0f      	ldr	r3, [pc, #60]	; (8000794 <MX_SPI1_Init+0x64>)
 8000756:	2200      	movs	r2, #0
 8000758:	615a      	str	r2, [r3, #20]
	hspi1.Init.NSS = SPI_NSS_SOFT;
 800075a:	4b0e      	ldr	r3, [pc, #56]	; (8000794 <MX_SPI1_Init+0x64>)
 800075c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000760:	619a      	str	r2, [r3, #24]
	hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000762:	4b0c      	ldr	r3, [pc, #48]	; (8000794 <MX_SPI1_Init+0x64>)
 8000764:	2200      	movs	r2, #0
 8000766:	61da      	str	r2, [r3, #28]
	hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000768:	4b0a      	ldr	r3, [pc, #40]	; (8000794 <MX_SPI1_Init+0x64>)
 800076a:	2200      	movs	r2, #0
 800076c:	621a      	str	r2, [r3, #32]
	hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800076e:	4b09      	ldr	r3, [pc, #36]	; (8000794 <MX_SPI1_Init+0x64>)
 8000770:	2200      	movs	r2, #0
 8000772:	625a      	str	r2, [r3, #36]	; 0x24
	hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000774:	4b07      	ldr	r3, [pc, #28]	; (8000794 <MX_SPI1_Init+0x64>)
 8000776:	2200      	movs	r2, #0
 8000778:	629a      	str	r2, [r3, #40]	; 0x28
	hspi1.Init.CRCPolynomial = 10;
 800077a:	4b06      	ldr	r3, [pc, #24]	; (8000794 <MX_SPI1_Init+0x64>)
 800077c:	220a      	movs	r2, #10
 800077e:	62da      	str	r2, [r3, #44]	; 0x2c
	if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000780:	4804      	ldr	r0, [pc, #16]	; (8000794 <MX_SPI1_Init+0x64>)
 8000782:	f003 ffd3 	bl	800472c <HAL_SPI_Init>
 8000786:	4603      	mov	r3, r0
 8000788:	2b00      	cmp	r3, #0
 800078a:	d001      	beq.n	8000790 <MX_SPI1_Init+0x60>
	{
		Error_Handler();
 800078c:	f000 f9a2 	bl	8000ad4 <Error_Handler>
	}
	/* USER CODE BEGIN SPI1_Init 2 */

	/* USER CODE END SPI1_Init 2 */

}
 8000790:	bf00      	nop
 8000792:	bd80      	pop	{r7, pc}
 8000794:	20000148 	.word	0x20000148
 8000798:	40013000 	.word	0x40013000

0800079c <MX_USART2_UART_Init>:
 * @brief USART2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART2_UART_Init(void)
{
 800079c:	b580      	push	{r7, lr}
 800079e:	af00      	add	r7, sp, #0
	/* USER CODE END USART2_Init 0 */

	/* USER CODE BEGIN USART2_Init 1 */

	/* USER CODE END USART2_Init 1 */
	huart2.Instance = USART2;
 80007a0:	4b11      	ldr	r3, [pc, #68]	; (80007e8 <MX_USART2_UART_Init+0x4c>)
 80007a2:	4a12      	ldr	r2, [pc, #72]	; (80007ec <MX_USART2_UART_Init+0x50>)
 80007a4:	601a      	str	r2, [r3, #0]
	huart2.Init.BaudRate = 115200;
 80007a6:	4b10      	ldr	r3, [pc, #64]	; (80007e8 <MX_USART2_UART_Init+0x4c>)
 80007a8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80007ac:	605a      	str	r2, [r3, #4]
	huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80007ae:	4b0e      	ldr	r3, [pc, #56]	; (80007e8 <MX_USART2_UART_Init+0x4c>)
 80007b0:	2200      	movs	r2, #0
 80007b2:	609a      	str	r2, [r3, #8]
	huart2.Init.StopBits = UART_STOPBITS_1;
 80007b4:	4b0c      	ldr	r3, [pc, #48]	; (80007e8 <MX_USART2_UART_Init+0x4c>)
 80007b6:	2200      	movs	r2, #0
 80007b8:	60da      	str	r2, [r3, #12]
	huart2.Init.Parity = UART_PARITY_NONE;
 80007ba:	4b0b      	ldr	r3, [pc, #44]	; (80007e8 <MX_USART2_UART_Init+0x4c>)
 80007bc:	2200      	movs	r2, #0
 80007be:	611a      	str	r2, [r3, #16]
	huart2.Init.Mode = UART_MODE_TX_RX;
 80007c0:	4b09      	ldr	r3, [pc, #36]	; (80007e8 <MX_USART2_UART_Init+0x4c>)
 80007c2:	220c      	movs	r2, #12
 80007c4:	615a      	str	r2, [r3, #20]
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80007c6:	4b08      	ldr	r3, [pc, #32]	; (80007e8 <MX_USART2_UART_Init+0x4c>)
 80007c8:	2200      	movs	r2, #0
 80007ca:	619a      	str	r2, [r3, #24]
	huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80007cc:	4b06      	ldr	r3, [pc, #24]	; (80007e8 <MX_USART2_UART_Init+0x4c>)
 80007ce:	2200      	movs	r2, #0
 80007d0:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart2) != HAL_OK)
 80007d2:	4805      	ldr	r0, [pc, #20]	; (80007e8 <MX_USART2_UART_Init+0x4c>)
 80007d4:	f004 f833 	bl	800483e <HAL_UART_Init>
 80007d8:	4603      	mov	r3, r0
 80007da:	2b00      	cmp	r3, #0
 80007dc:	d001      	beq.n	80007e2 <MX_USART2_UART_Init+0x46>
	{
		Error_Handler();
 80007de:	f000 f979 	bl	8000ad4 <Error_Handler>
	}
	/* USER CODE BEGIN USART2_Init 2 */

	/* USER CODE END USART2_Init 2 */

}
 80007e2:	bf00      	nop
 80007e4:	bd80      	pop	{r7, pc}
 80007e6:	bf00      	nop
 80007e8:	200001a0 	.word	0x200001a0
 80007ec:	40004400 	.word	0x40004400

080007f0 <MX_GPIO_Init>:
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void)
{
 80007f0:	b580      	push	{r7, lr}
 80007f2:	b08c      	sub	sp, #48	; 0x30
 80007f4:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007f6:	f107 031c 	add.w	r3, r7, #28
 80007fa:	2200      	movs	r2, #0
 80007fc:	601a      	str	r2, [r3, #0]
 80007fe:	605a      	str	r2, [r3, #4]
 8000800:	609a      	str	r2, [r3, #8]
 8000802:	60da      	str	r2, [r3, #12]
 8000804:	611a      	str	r2, [r3, #16]

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOE_CLK_ENABLE();
 8000806:	2300      	movs	r3, #0
 8000808:	61bb      	str	r3, [r7, #24]
 800080a:	4b7e      	ldr	r3, [pc, #504]	; (8000a04 <MX_GPIO_Init+0x214>)
 800080c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800080e:	4a7d      	ldr	r2, [pc, #500]	; (8000a04 <MX_GPIO_Init+0x214>)
 8000810:	f043 0310 	orr.w	r3, r3, #16
 8000814:	6313      	str	r3, [r2, #48]	; 0x30
 8000816:	4b7b      	ldr	r3, [pc, #492]	; (8000a04 <MX_GPIO_Init+0x214>)
 8000818:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800081a:	f003 0310 	and.w	r3, r3, #16
 800081e:	61bb      	str	r3, [r7, #24]
 8000820:	69bb      	ldr	r3, [r7, #24]
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8000822:	2300      	movs	r3, #0
 8000824:	617b      	str	r3, [r7, #20]
 8000826:	4b77      	ldr	r3, [pc, #476]	; (8000a04 <MX_GPIO_Init+0x214>)
 8000828:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800082a:	4a76      	ldr	r2, [pc, #472]	; (8000a04 <MX_GPIO_Init+0x214>)
 800082c:	f043 0304 	orr.w	r3, r3, #4
 8000830:	6313      	str	r3, [r2, #48]	; 0x30
 8000832:	4b74      	ldr	r3, [pc, #464]	; (8000a04 <MX_GPIO_Init+0x214>)
 8000834:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000836:	f003 0304 	and.w	r3, r3, #4
 800083a:	617b      	str	r3, [r7, #20]
 800083c:	697b      	ldr	r3, [r7, #20]
	__HAL_RCC_GPIOH_CLK_ENABLE();
 800083e:	2300      	movs	r3, #0
 8000840:	613b      	str	r3, [r7, #16]
 8000842:	4b70      	ldr	r3, [pc, #448]	; (8000a04 <MX_GPIO_Init+0x214>)
 8000844:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000846:	4a6f      	ldr	r2, [pc, #444]	; (8000a04 <MX_GPIO_Init+0x214>)
 8000848:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800084c:	6313      	str	r3, [r2, #48]	; 0x30
 800084e:	4b6d      	ldr	r3, [pc, #436]	; (8000a04 <MX_GPIO_Init+0x214>)
 8000850:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000852:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000856:	613b      	str	r3, [r7, #16]
 8000858:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 800085a:	2300      	movs	r3, #0
 800085c:	60fb      	str	r3, [r7, #12]
 800085e:	4b69      	ldr	r3, [pc, #420]	; (8000a04 <MX_GPIO_Init+0x214>)
 8000860:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000862:	4a68      	ldr	r2, [pc, #416]	; (8000a04 <MX_GPIO_Init+0x214>)
 8000864:	f043 0301 	orr.w	r3, r3, #1
 8000868:	6313      	str	r3, [r2, #48]	; 0x30
 800086a:	4b66      	ldr	r3, [pc, #408]	; (8000a04 <MX_GPIO_Init+0x214>)
 800086c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800086e:	f003 0301 	and.w	r3, r3, #1
 8000872:	60fb      	str	r3, [r7, #12]
 8000874:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8000876:	2300      	movs	r3, #0
 8000878:	60bb      	str	r3, [r7, #8]
 800087a:	4b62      	ldr	r3, [pc, #392]	; (8000a04 <MX_GPIO_Init+0x214>)
 800087c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800087e:	4a61      	ldr	r2, [pc, #388]	; (8000a04 <MX_GPIO_Init+0x214>)
 8000880:	f043 0302 	orr.w	r3, r3, #2
 8000884:	6313      	str	r3, [r2, #48]	; 0x30
 8000886:	4b5f      	ldr	r3, [pc, #380]	; (8000a04 <MX_GPIO_Init+0x214>)
 8000888:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800088a:	f003 0302 	and.w	r3, r3, #2
 800088e:	60bb      	str	r3, [r7, #8]
 8000890:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOD_CLK_ENABLE();
 8000892:	2300      	movs	r3, #0
 8000894:	607b      	str	r3, [r7, #4]
 8000896:	4b5b      	ldr	r3, [pc, #364]	; (8000a04 <MX_GPIO_Init+0x214>)
 8000898:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800089a:	4a5a      	ldr	r2, [pc, #360]	; (8000a04 <MX_GPIO_Init+0x214>)
 800089c:	f043 0308 	orr.w	r3, r3, #8
 80008a0:	6313      	str	r3, [r2, #48]	; 0x30
 80008a2:	4b58      	ldr	r3, [pc, #352]	; (8000a04 <MX_GPIO_Init+0x214>)
 80008a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008a6:	f003 0308 	and.w	r3, r3, #8
 80008aa:	607b      	str	r3, [r7, #4]
 80008ac:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOE, CS_I2C_SPI_Pin|KR1_Pin|KR2_Pin|KR3_Pin
 80008ae:	2200      	movs	r2, #0
 80008b0:	f641 7188 	movw	r1, #8072	; 0x1f88
 80008b4:	4854      	ldr	r0, [pc, #336]	; (8000a08 <MX_GPIO_Init+0x218>)
 80008b6:	f000 ff41 	bl	800173c <HAL_GPIO_WritePin>
			|KR4_Pin|KR5_Pin|KR6_Pin, GPIO_PIN_RESET);

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 80008ba:	2201      	movs	r2, #1
 80008bc:	2101      	movs	r1, #1
 80008be:	4853      	ldr	r0, [pc, #332]	; (8000a0c <MX_GPIO_Init+0x21c>)
 80008c0:	f000 ff3c 	bl	800173c <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 80008c4:	2200      	movs	r2, #0
 80008c6:	f24f 0110 	movw	r1, #61456	; 0xf010
 80008ca:	4851      	ldr	r0, [pc, #324]	; (8000a10 <MX_GPIO_Init+0x220>)
 80008cc:	f000 ff36 	bl	800173c <HAL_GPIO_WritePin>
			|KR4D4_Pin, GPIO_PIN_RESET);

	/*Configure GPIO pins : CS_I2C_SPI_Pin KR1_Pin KR2_Pin KR3_Pin
                           KR4_Pin KR5_Pin KR6_Pin */
	GPIO_InitStruct.Pin = CS_I2C_SPI_Pin|KR1_Pin|KR2_Pin|KR3_Pin
 80008d0:	f641 7388 	movw	r3, #8072	; 0x1f88
 80008d4:	61fb      	str	r3, [r7, #28]
			|KR4_Pin|KR5_Pin|KR6_Pin;
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008d6:	2301      	movs	r3, #1
 80008d8:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008da:	2300      	movs	r3, #0
 80008dc:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008de:	2300      	movs	r3, #0
 80008e0:	62bb      	str	r3, [r7, #40]	; 0x28
	HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80008e2:	f107 031c 	add.w	r3, r7, #28
 80008e6:	4619      	mov	r1, r3
 80008e8:	4847      	ldr	r0, [pc, #284]	; (8000a08 <MX_GPIO_Init+0x218>)
 80008ea:	f000 fd73 	bl	80013d4 <HAL_GPIO_Init>

	/*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
	GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 80008ee:	2301      	movs	r3, #1
 80008f0:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008f2:	2301      	movs	r3, #1
 80008f4:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008f6:	2300      	movs	r3, #0
 80008f8:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008fa:	2300      	movs	r3, #0
 80008fc:	62bb      	str	r3, [r7, #40]	; 0x28
	HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80008fe:	f107 031c 	add.w	r3, r7, #28
 8000902:	4619      	mov	r1, r3
 8000904:	4841      	ldr	r0, [pc, #260]	; (8000a0c <MX_GPIO_Init+0x21c>)
 8000906:	f000 fd65 	bl	80013d4 <HAL_GPIO_Init>

	/*Configure GPIO pin : PDM_OUT_Pin */
	GPIO_InitStruct.Pin = PDM_OUT_Pin;
 800090a:	2308      	movs	r3, #8
 800090c:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800090e:	2302      	movs	r3, #2
 8000910:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000912:	2300      	movs	r3, #0
 8000914:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000916:	2300      	movs	r3, #0
 8000918:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800091a:	2305      	movs	r3, #5
 800091c:	62fb      	str	r3, [r7, #44]	; 0x2c
	HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 800091e:	f107 031c 	add.w	r3, r7, #28
 8000922:	4619      	mov	r1, r3
 8000924:	4839      	ldr	r0, [pc, #228]	; (8000a0c <MX_GPIO_Init+0x21c>)
 8000926:	f000 fd55 	bl	80013d4 <HAL_GPIO_Init>

	/*Configure GPIO pin : B1_Pin */
	GPIO_InitStruct.Pin = B1_Pin;
 800092a:	2301      	movs	r3, #1
 800092c:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800092e:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000932:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000934:	2300      	movs	r3, #0
 8000936:	627b      	str	r3, [r7, #36]	; 0x24
	HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000938:	f107 031c 	add.w	r3, r7, #28
 800093c:	4619      	mov	r1, r3
 800093e:	4835      	ldr	r0, [pc, #212]	; (8000a14 <MX_GPIO_Init+0x224>)
 8000940:	f000 fd48 	bl	80013d4 <HAL_GPIO_Init>

	/*Configure GPIO pin : BOOT1_Pin */
	GPIO_InitStruct.Pin = BOOT1_Pin;
 8000944:	2304      	movs	r3, #4
 8000946:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000948:	2300      	movs	r3, #0
 800094a:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800094c:	2300      	movs	r3, #0
 800094e:	627b      	str	r3, [r7, #36]	; 0x24
	HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8000950:	f107 031c 	add.w	r3, r7, #28
 8000954:	4619      	mov	r1, r3
 8000956:	4830      	ldr	r0, [pc, #192]	; (8000a18 <MX_GPIO_Init+0x228>)
 8000958:	f000 fd3c 	bl	80013d4 <HAL_GPIO_Init>

	/*Configure GPIO pin : CLK_IN_Pin */
	GPIO_InitStruct.Pin = CLK_IN_Pin;
 800095c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000960:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000962:	2302      	movs	r3, #2
 8000964:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000966:	2300      	movs	r3, #0
 8000968:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800096a:	2300      	movs	r3, #0
 800096c:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800096e:	2305      	movs	r3, #5
 8000970:	62fb      	str	r3, [r7, #44]	; 0x2c
	HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 8000972:	f107 031c 	add.w	r3, r7, #28
 8000976:	4619      	mov	r1, r3
 8000978:	4827      	ldr	r0, [pc, #156]	; (8000a18 <MX_GPIO_Init+0x228>)
 800097a:	f000 fd2b 	bl	80013d4 <HAL_GPIO_Init>

	/*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin */
	GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin;
 800097e:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 8000982:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000984:	2301      	movs	r3, #1
 8000986:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000988:	2300      	movs	r3, #0
 800098a:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800098c:	2300      	movs	r3, #0
 800098e:	62bb      	str	r3, [r7, #40]	; 0x28
	HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000990:	f107 031c 	add.w	r3, r7, #28
 8000994:	4619      	mov	r1, r3
 8000996:	481e      	ldr	r0, [pc, #120]	; (8000a10 <MX_GPIO_Init+0x220>)
 8000998:	f000 fd1c 	bl	80013d4 <HAL_GPIO_Init>

	/*Configure GPIO pins : PD0 PD1 PD2 PD3
                           OTG_FS_OverCurrent_Pin */
	GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 800099c:	232f      	movs	r3, #47	; 0x2f
 800099e:	61fb      	str	r3, [r7, #28]
			|OTG_FS_OverCurrent_Pin;
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80009a0:	2300      	movs	r3, #0
 80009a2:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009a4:	2300      	movs	r3, #0
 80009a6:	627b      	str	r3, [r7, #36]	; 0x24
	HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80009a8:	f107 031c 	add.w	r3, r7, #28
 80009ac:	4619      	mov	r1, r3
 80009ae:	4818      	ldr	r0, [pc, #96]	; (8000a10 <MX_GPIO_Init+0x220>)
 80009b0:	f000 fd10 	bl	80013d4 <HAL_GPIO_Init>

	/*Configure GPIO pin : KR4D4_Pin */
	GPIO_InitStruct.Pin = KR4D4_Pin;
 80009b4:	2310      	movs	r3, #16
 80009b6:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 80009b8:	2311      	movs	r3, #17
 80009ba:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009bc:	2300      	movs	r3, #0
 80009be:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009c0:	2300      	movs	r3, #0
 80009c2:	62bb      	str	r3, [r7, #40]	; 0x28
	HAL_GPIO_Init(KR4D4_GPIO_Port, &GPIO_InitStruct);
 80009c4:	f107 031c 	add.w	r3, r7, #28
 80009c8:	4619      	mov	r1, r3
 80009ca:	4811      	ldr	r0, [pc, #68]	; (8000a10 <MX_GPIO_Init+0x220>)
 80009cc:	f000 fd02 	bl	80013d4 <HAL_GPIO_Init>

	/*Configure GPIO pin : MEMS_INT2_Pin */
	GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 80009d0:	2302      	movs	r3, #2
 80009d2:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80009d4:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 80009d8:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009da:	2300      	movs	r3, #0
 80009dc:	627b      	str	r3, [r7, #36]	; 0x24
	HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 80009de:	f107 031c 	add.w	r3, r7, #28
 80009e2:	4619      	mov	r1, r3
 80009e4:	4808      	ldr	r0, [pc, #32]	; (8000a08 <MX_GPIO_Init+0x218>)
 80009e6:	f000 fcf5 	bl	80013d4 <HAL_GPIO_Init>

	/* EXTI interrupt init*/
	HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 80009ea:	2200      	movs	r2, #0
 80009ec:	2100      	movs	r1, #0
 80009ee:	2006      	movs	r0, #6
 80009f0:	f000 fc27 	bl	8001242 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 80009f4:	2006      	movs	r0, #6
 80009f6:	f000 fc40 	bl	800127a <HAL_NVIC_EnableIRQ>

}
 80009fa:	bf00      	nop
 80009fc:	3730      	adds	r7, #48	; 0x30
 80009fe:	46bd      	mov	sp, r7
 8000a00:	bd80      	pop	{r7, pc}
 8000a02:	bf00      	nop
 8000a04:	40023800 	.word	0x40023800
 8000a08:	40021000 	.word	0x40021000
 8000a0c:	40020800 	.word	0x40020800
 8000a10:	40020c00 	.word	0x40020c00
 8000a14:	40020000 	.word	0x40020000
 8000a18:	40020400 	.word	0x40020400

08000a1c <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t gpio_pin) {
 8000a1c:	b5b0      	push	{r4, r5, r7, lr}
 8000a1e:	b082      	sub	sp, #8
 8000a20:	af00      	add	r7, sp, #0
 8000a22:	4603      	mov	r3, r0
 8000a24:	80fb      	strh	r3, [r7, #6]
	dip_val = HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_0) +
 8000a26:	2101      	movs	r1, #1
 8000a28:	4823      	ldr	r0, [pc, #140]	; (8000ab8 <HAL_GPIO_EXTI_Callback+0x9c>)
 8000a2a:	f000 fe6f 	bl	800170c <HAL_GPIO_ReadPin>
 8000a2e:	4603      	mov	r3, r0
 8000a30:	461d      	mov	r5, r3
			2 * HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_1) +
			4 * HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_2) +
 8000a32:	2104      	movs	r1, #4
 8000a34:	4820      	ldr	r0, [pc, #128]	; (8000ab8 <HAL_GPIO_EXTI_Callback+0x9c>)
 8000a36:	f000 fe69 	bl	800170c <HAL_GPIO_ReadPin>
 8000a3a:	4603      	mov	r3, r0
 8000a3c:	461c      	mov	r4, r3
			8 * HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_3);
 8000a3e:	2108      	movs	r1, #8
 8000a40:	481d      	ldr	r0, [pc, #116]	; (8000ab8 <HAL_GPIO_EXTI_Callback+0x9c>)
 8000a42:	f000 fe63 	bl	800170c <HAL_GPIO_ReadPin>
 8000a46:	4603      	mov	r3, r0
			4 * HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_2) +
 8000a48:	005b      	lsls	r3, r3, #1
 8000a4a:	b2db      	uxtb	r3, r3
 8000a4c:	4423      	add	r3, r4
 8000a4e:	b2db      	uxtb	r3, r3
 8000a50:	005b      	lsls	r3, r3, #1
 8000a52:	b2dc      	uxtb	r4, r3
			2 * HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_1) +
 8000a54:	2102      	movs	r1, #2
 8000a56:	4818      	ldr	r0, [pc, #96]	; (8000ab8 <HAL_GPIO_EXTI_Callback+0x9c>)
 8000a58:	f000 fe58 	bl	800170c <HAL_GPIO_ReadPin>
 8000a5c:	4603      	mov	r3, r0
			4 * HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_2) +
 8000a5e:	4423      	add	r3, r4
 8000a60:	b2db      	uxtb	r3, r3
 8000a62:	005b      	lsls	r3, r3, #1
 8000a64:	b2db      	uxtb	r3, r3
 8000a66:	442b      	add	r3, r5
 8000a68:	b2da      	uxtb	r2, r3
	dip_val = HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_0) +
 8000a6a:	4b14      	ldr	r3, [pc, #80]	; (8000abc <HAL_GPIO_EXTI_Callback+0xa0>)
 8000a6c:	701a      	strb	r2, [r3, #0]

	// print hello world
	usart_buffer_length = sprintf(usart_buffer, "Hello world \r\n");
 8000a6e:	4914      	ldr	r1, [pc, #80]	; (8000ac0 <HAL_GPIO_EXTI_Callback+0xa4>)
 8000a70:	4814      	ldr	r0, [pc, #80]	; (8000ac4 <HAL_GPIO_EXTI_Callback+0xa8>)
 8000a72:	f008 fb05 	bl	8009080 <siprintf>
 8000a76:	4603      	mov	r3, r0
 8000a78:	4a13      	ldr	r2, [pc, #76]	; (8000ac8 <HAL_GPIO_EXTI_Callback+0xac>)
 8000a7a:	6013      	str	r3, [r2, #0]
	HAL_UART_Transmit(&huart2, (uint8_t*) usart_buffer,
 8000a7c:	4b12      	ldr	r3, [pc, #72]	; (8000ac8 <HAL_GPIO_EXTI_Callback+0xac>)
 8000a7e:	681b      	ldr	r3, [r3, #0]
 8000a80:	b29a      	uxth	r2, r3
 8000a82:	2364      	movs	r3, #100	; 0x64
 8000a84:	490f      	ldr	r1, [pc, #60]	; (8000ac4 <HAL_GPIO_EXTI_Callback+0xa8>)
 8000a86:	4811      	ldr	r0, [pc, #68]	; (8000acc <HAL_GPIO_EXTI_Callback+0xb0>)
 8000a88:	f003 ff26 	bl	80048d8 <HAL_UART_Transmit>
			usart_buffer_length, 100);

	// print the dip switch value in hex
	usart_buffer_length = sprintf(usart_buffer, "%h \r\n", dip_val);
 8000a8c:	4b0b      	ldr	r3, [pc, #44]	; (8000abc <HAL_GPIO_EXTI_Callback+0xa0>)
 8000a8e:	781b      	ldrb	r3, [r3, #0]
 8000a90:	461a      	mov	r2, r3
 8000a92:	490f      	ldr	r1, [pc, #60]	; (8000ad0 <HAL_GPIO_EXTI_Callback+0xb4>)
 8000a94:	480b      	ldr	r0, [pc, #44]	; (8000ac4 <HAL_GPIO_EXTI_Callback+0xa8>)
 8000a96:	f008 faf3 	bl	8009080 <siprintf>
 8000a9a:	4603      	mov	r3, r0
 8000a9c:	4a0a      	ldr	r2, [pc, #40]	; (8000ac8 <HAL_GPIO_EXTI_Callback+0xac>)
 8000a9e:	6013      	str	r3, [r2, #0]
		HAL_UART_Transmit(&huart2, (uint8_t*) usart_buffer,
 8000aa0:	4b09      	ldr	r3, [pc, #36]	; (8000ac8 <HAL_GPIO_EXTI_Callback+0xac>)
 8000aa2:	681b      	ldr	r3, [r3, #0]
 8000aa4:	b29a      	uxth	r2, r3
 8000aa6:	2364      	movs	r3, #100	; 0x64
 8000aa8:	4906      	ldr	r1, [pc, #24]	; (8000ac4 <HAL_GPIO_EXTI_Callback+0xa8>)
 8000aaa:	4808      	ldr	r0, [pc, #32]	; (8000acc <HAL_GPIO_EXTI_Callback+0xb0>)
 8000aac:	f003 ff14 	bl	80048d8 <HAL_UART_Transmit>
				usart_buffer_length, 100);


}
 8000ab0:	bf00      	nop
 8000ab2:	3708      	adds	r7, #8
 8000ab4:	46bd      	mov	sp, r7
 8000ab6:	bdb0      	pop	{r4, r5, r7, pc}
 8000ab8:	40020c00 	.word	0x40020c00
 8000abc:	2000021c 	.word	0x2000021c
 8000ac0:	08009794 	.word	0x08009794
 8000ac4:	200001e4 	.word	0x200001e4
 8000ac8:	20000218 	.word	0x20000218
 8000acc:	200001a0 	.word	0x200001a0
 8000ad0:	080097a4 	.word	0x080097a4

08000ad4 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 8000ad4:	b480      	push	{r7}
 8000ad6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ad8:	b672      	cpsid	i
}
 8000ada:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8000adc:	e7fe      	b.n	8000adc <Error_Handler+0x8>
	...

08000ae0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ae0:	b580      	push	{r7, lr}
 8000ae2:	b082      	sub	sp, #8
 8000ae4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ae6:	2300      	movs	r3, #0
 8000ae8:	607b      	str	r3, [r7, #4]
 8000aea:	4b10      	ldr	r3, [pc, #64]	; (8000b2c <HAL_MspInit+0x4c>)
 8000aec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000aee:	4a0f      	ldr	r2, [pc, #60]	; (8000b2c <HAL_MspInit+0x4c>)
 8000af0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000af4:	6453      	str	r3, [r2, #68]	; 0x44
 8000af6:	4b0d      	ldr	r3, [pc, #52]	; (8000b2c <HAL_MspInit+0x4c>)
 8000af8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000afa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000afe:	607b      	str	r3, [r7, #4]
 8000b00:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b02:	2300      	movs	r3, #0
 8000b04:	603b      	str	r3, [r7, #0]
 8000b06:	4b09      	ldr	r3, [pc, #36]	; (8000b2c <HAL_MspInit+0x4c>)
 8000b08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b0a:	4a08      	ldr	r2, [pc, #32]	; (8000b2c <HAL_MspInit+0x4c>)
 8000b0c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b10:	6413      	str	r3, [r2, #64]	; 0x40
 8000b12:	4b06      	ldr	r3, [pc, #24]	; (8000b2c <HAL_MspInit+0x4c>)
 8000b14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b16:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b1a:	603b      	str	r3, [r7, #0]
 8000b1c:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000b1e:	2007      	movs	r0, #7
 8000b20:	f000 fb84 	bl	800122c <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b24:	bf00      	nop
 8000b26:	3708      	adds	r7, #8
 8000b28:	46bd      	mov	sp, r7
 8000b2a:	bd80      	pop	{r7, pc}
 8000b2c:	40023800 	.word	0x40023800

08000b30 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000b30:	b580      	push	{r7, lr}
 8000b32:	b08a      	sub	sp, #40	; 0x28
 8000b34:	af00      	add	r7, sp, #0
 8000b36:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b38:	f107 0314 	add.w	r3, r7, #20
 8000b3c:	2200      	movs	r2, #0
 8000b3e:	601a      	str	r2, [r3, #0]
 8000b40:	605a      	str	r2, [r3, #4]
 8000b42:	609a      	str	r2, [r3, #8]
 8000b44:	60da      	str	r2, [r3, #12]
 8000b46:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000b48:	687b      	ldr	r3, [r7, #4]
 8000b4a:	681b      	ldr	r3, [r3, #0]
 8000b4c:	4a19      	ldr	r2, [pc, #100]	; (8000bb4 <HAL_I2C_MspInit+0x84>)
 8000b4e:	4293      	cmp	r3, r2
 8000b50:	d12c      	bne.n	8000bac <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b52:	2300      	movs	r3, #0
 8000b54:	613b      	str	r3, [r7, #16]
 8000b56:	4b18      	ldr	r3, [pc, #96]	; (8000bb8 <HAL_I2C_MspInit+0x88>)
 8000b58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b5a:	4a17      	ldr	r2, [pc, #92]	; (8000bb8 <HAL_I2C_MspInit+0x88>)
 8000b5c:	f043 0302 	orr.w	r3, r3, #2
 8000b60:	6313      	str	r3, [r2, #48]	; 0x30
 8000b62:	4b15      	ldr	r3, [pc, #84]	; (8000bb8 <HAL_I2C_MspInit+0x88>)
 8000b64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b66:	f003 0302 	and.w	r3, r3, #2
 8000b6a:	613b      	str	r3, [r7, #16]
 8000b6c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 8000b6e:	f44f 7310 	mov.w	r3, #576	; 0x240
 8000b72:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000b74:	2312      	movs	r3, #18
 8000b76:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000b78:	2301      	movs	r3, #1
 8000b7a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b7c:	2300      	movs	r3, #0
 8000b7e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000b80:	2304      	movs	r3, #4
 8000b82:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b84:	f107 0314 	add.w	r3, r7, #20
 8000b88:	4619      	mov	r1, r3
 8000b8a:	480c      	ldr	r0, [pc, #48]	; (8000bbc <HAL_I2C_MspInit+0x8c>)
 8000b8c:	f000 fc22 	bl	80013d4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000b90:	2300      	movs	r3, #0
 8000b92:	60fb      	str	r3, [r7, #12]
 8000b94:	4b08      	ldr	r3, [pc, #32]	; (8000bb8 <HAL_I2C_MspInit+0x88>)
 8000b96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b98:	4a07      	ldr	r2, [pc, #28]	; (8000bb8 <HAL_I2C_MspInit+0x88>)
 8000b9a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000b9e:	6413      	str	r3, [r2, #64]	; 0x40
 8000ba0:	4b05      	ldr	r3, [pc, #20]	; (8000bb8 <HAL_I2C_MspInit+0x88>)
 8000ba2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ba4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000ba8:	60fb      	str	r3, [r7, #12]
 8000baa:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000bac:	bf00      	nop
 8000bae:	3728      	adds	r7, #40	; 0x28
 8000bb0:	46bd      	mov	sp, r7
 8000bb2:	bd80      	pop	{r7, pc}
 8000bb4:	40005400 	.word	0x40005400
 8000bb8:	40023800 	.word	0x40023800
 8000bbc:	40020400 	.word	0x40020400

08000bc0 <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 8000bc0:	b580      	push	{r7, lr}
 8000bc2:	b08e      	sub	sp, #56	; 0x38
 8000bc4:	af00      	add	r7, sp, #0
 8000bc6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bc8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000bcc:	2200      	movs	r2, #0
 8000bce:	601a      	str	r2, [r3, #0]
 8000bd0:	605a      	str	r2, [r3, #4]
 8000bd2:	609a      	str	r2, [r3, #8]
 8000bd4:	60da      	str	r2, [r3, #12]
 8000bd6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000bd8:	f107 0314 	add.w	r3, r7, #20
 8000bdc:	2200      	movs	r2, #0
 8000bde:	601a      	str	r2, [r3, #0]
 8000be0:	605a      	str	r2, [r3, #4]
 8000be2:	609a      	str	r2, [r3, #8]
 8000be4:	60da      	str	r2, [r3, #12]
  if(hi2s->Instance==SPI3)
 8000be6:	687b      	ldr	r3, [r7, #4]
 8000be8:	681b      	ldr	r3, [r3, #0]
 8000bea:	4a31      	ldr	r2, [pc, #196]	; (8000cb0 <HAL_I2S_MspInit+0xf0>)
 8000bec:	4293      	cmp	r3, r2
 8000bee:	d15a      	bne.n	8000ca6 <HAL_I2S_MspInit+0xe6>

  /* USER CODE END SPI3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 8000bf0:	2301      	movs	r3, #1
 8000bf2:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLI2S.PLLI2SN = 192;
 8000bf4:	23c0      	movs	r3, #192	; 0xc0
 8000bf6:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 8000bf8:	2302      	movs	r3, #2
 8000bfa:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000bfc:	f107 0314 	add.w	r3, r7, #20
 8000c00:	4618      	mov	r0, r3
 8000c02:	f003 fc53 	bl	80044ac <HAL_RCCEx_PeriphCLKConfig>
 8000c06:	4603      	mov	r3, r0
 8000c08:	2b00      	cmp	r3, #0
 8000c0a:	d001      	beq.n	8000c10 <HAL_I2S_MspInit+0x50>
    {
      Error_Handler();
 8000c0c:	f7ff ff62 	bl	8000ad4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8000c10:	2300      	movs	r3, #0
 8000c12:	613b      	str	r3, [r7, #16]
 8000c14:	4b27      	ldr	r3, [pc, #156]	; (8000cb4 <HAL_I2S_MspInit+0xf4>)
 8000c16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c18:	4a26      	ldr	r2, [pc, #152]	; (8000cb4 <HAL_I2S_MspInit+0xf4>)
 8000c1a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000c1e:	6413      	str	r3, [r2, #64]	; 0x40
 8000c20:	4b24      	ldr	r3, [pc, #144]	; (8000cb4 <HAL_I2S_MspInit+0xf4>)
 8000c22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c24:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000c28:	613b      	str	r3, [r7, #16]
 8000c2a:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c2c:	2300      	movs	r3, #0
 8000c2e:	60fb      	str	r3, [r7, #12]
 8000c30:	4b20      	ldr	r3, [pc, #128]	; (8000cb4 <HAL_I2S_MspInit+0xf4>)
 8000c32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c34:	4a1f      	ldr	r2, [pc, #124]	; (8000cb4 <HAL_I2S_MspInit+0xf4>)
 8000c36:	f043 0301 	orr.w	r3, r3, #1
 8000c3a:	6313      	str	r3, [r2, #48]	; 0x30
 8000c3c:	4b1d      	ldr	r3, [pc, #116]	; (8000cb4 <HAL_I2S_MspInit+0xf4>)
 8000c3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c40:	f003 0301 	and.w	r3, r3, #1
 8000c44:	60fb      	str	r3, [r7, #12]
 8000c46:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c48:	2300      	movs	r3, #0
 8000c4a:	60bb      	str	r3, [r7, #8]
 8000c4c:	4b19      	ldr	r3, [pc, #100]	; (8000cb4 <HAL_I2S_MspInit+0xf4>)
 8000c4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c50:	4a18      	ldr	r2, [pc, #96]	; (8000cb4 <HAL_I2S_MspInit+0xf4>)
 8000c52:	f043 0304 	orr.w	r3, r3, #4
 8000c56:	6313      	str	r3, [r2, #48]	; 0x30
 8000c58:	4b16      	ldr	r3, [pc, #88]	; (8000cb4 <HAL_I2S_MspInit+0xf4>)
 8000c5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c5c:	f003 0304 	and.w	r3, r3, #4
 8000c60:	60bb      	str	r3, [r7, #8]
 8000c62:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> I2S3_WS
    PC7     ------> I2S3_MCK
    PC10     ------> I2S3_CK
    PC12     ------> I2S3_SD
    */
    GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8000c64:	2310      	movs	r3, #16
 8000c66:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c68:	2302      	movs	r3, #2
 8000c6a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c6c:	2300      	movs	r3, #0
 8000c6e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c70:	2300      	movs	r3, #0
 8000c72:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000c74:	2306      	movs	r3, #6
 8000c76:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8000c78:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c7c:	4619      	mov	r1, r3
 8000c7e:	480e      	ldr	r0, [pc, #56]	; (8000cb8 <HAL_I2S_MspInit+0xf8>)
 8000c80:	f000 fba8 	bl	80013d4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8000c84:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 8000c88:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c8a:	2302      	movs	r3, #2
 8000c8c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c8e:	2300      	movs	r3, #0
 8000c90:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c92:	2300      	movs	r3, #0
 8000c94:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000c96:	2306      	movs	r3, #6
 8000c98:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c9a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c9e:	4619      	mov	r1, r3
 8000ca0:	4806      	ldr	r0, [pc, #24]	; (8000cbc <HAL_I2S_MspInit+0xfc>)
 8000ca2:	f000 fb97 	bl	80013d4 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8000ca6:	bf00      	nop
 8000ca8:	3738      	adds	r7, #56	; 0x38
 8000caa:	46bd      	mov	sp, r7
 8000cac:	bd80      	pop	{r7, pc}
 8000cae:	bf00      	nop
 8000cb0:	40003c00 	.word	0x40003c00
 8000cb4:	40023800 	.word	0x40023800
 8000cb8:	40020000 	.word	0x40020000
 8000cbc:	40020800 	.word	0x40020800

08000cc0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000cc0:	b580      	push	{r7, lr}
 8000cc2:	b08a      	sub	sp, #40	; 0x28
 8000cc4:	af00      	add	r7, sp, #0
 8000cc6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cc8:	f107 0314 	add.w	r3, r7, #20
 8000ccc:	2200      	movs	r2, #0
 8000cce:	601a      	str	r2, [r3, #0]
 8000cd0:	605a      	str	r2, [r3, #4]
 8000cd2:	609a      	str	r2, [r3, #8]
 8000cd4:	60da      	str	r2, [r3, #12]
 8000cd6:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000cd8:	687b      	ldr	r3, [r7, #4]
 8000cda:	681b      	ldr	r3, [r3, #0]
 8000cdc:	4a19      	ldr	r2, [pc, #100]	; (8000d44 <HAL_SPI_MspInit+0x84>)
 8000cde:	4293      	cmp	r3, r2
 8000ce0:	d12b      	bne.n	8000d3a <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000ce2:	2300      	movs	r3, #0
 8000ce4:	613b      	str	r3, [r7, #16]
 8000ce6:	4b18      	ldr	r3, [pc, #96]	; (8000d48 <HAL_SPI_MspInit+0x88>)
 8000ce8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000cea:	4a17      	ldr	r2, [pc, #92]	; (8000d48 <HAL_SPI_MspInit+0x88>)
 8000cec:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000cf0:	6453      	str	r3, [r2, #68]	; 0x44
 8000cf2:	4b15      	ldr	r3, [pc, #84]	; (8000d48 <HAL_SPI_MspInit+0x88>)
 8000cf4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000cf6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000cfa:	613b      	str	r3, [r7, #16]
 8000cfc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cfe:	2300      	movs	r3, #0
 8000d00:	60fb      	str	r3, [r7, #12]
 8000d02:	4b11      	ldr	r3, [pc, #68]	; (8000d48 <HAL_SPI_MspInit+0x88>)
 8000d04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d06:	4a10      	ldr	r2, [pc, #64]	; (8000d48 <HAL_SPI_MspInit+0x88>)
 8000d08:	f043 0301 	orr.w	r3, r3, #1
 8000d0c:	6313      	str	r3, [r2, #48]	; 0x30
 8000d0e:	4b0e      	ldr	r3, [pc, #56]	; (8000d48 <HAL_SPI_MspInit+0x88>)
 8000d10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d12:	f003 0301 	and.w	r3, r3, #1
 8000d16:	60fb      	str	r3, [r7, #12]
 8000d18:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8000d1a:	23e0      	movs	r3, #224	; 0xe0
 8000d1c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d1e:	2302      	movs	r3, #2
 8000d20:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d22:	2300      	movs	r3, #0
 8000d24:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d26:	2300      	movs	r3, #0
 8000d28:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000d2a:	2305      	movs	r3, #5
 8000d2c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d2e:	f107 0314 	add.w	r3, r7, #20
 8000d32:	4619      	mov	r1, r3
 8000d34:	4805      	ldr	r0, [pc, #20]	; (8000d4c <HAL_SPI_MspInit+0x8c>)
 8000d36:	f000 fb4d 	bl	80013d4 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000d3a:	bf00      	nop
 8000d3c:	3728      	adds	r7, #40	; 0x28
 8000d3e:	46bd      	mov	sp, r7
 8000d40:	bd80      	pop	{r7, pc}
 8000d42:	bf00      	nop
 8000d44:	40013000 	.word	0x40013000
 8000d48:	40023800 	.word	0x40023800
 8000d4c:	40020000 	.word	0x40020000

08000d50 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000d50:	b580      	push	{r7, lr}
 8000d52:	b08a      	sub	sp, #40	; 0x28
 8000d54:	af00      	add	r7, sp, #0
 8000d56:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d58:	f107 0314 	add.w	r3, r7, #20
 8000d5c:	2200      	movs	r2, #0
 8000d5e:	601a      	str	r2, [r3, #0]
 8000d60:	605a      	str	r2, [r3, #4]
 8000d62:	609a      	str	r2, [r3, #8]
 8000d64:	60da      	str	r2, [r3, #12]
 8000d66:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000d68:	687b      	ldr	r3, [r7, #4]
 8000d6a:	681b      	ldr	r3, [r3, #0]
 8000d6c:	4a1d      	ldr	r2, [pc, #116]	; (8000de4 <HAL_UART_MspInit+0x94>)
 8000d6e:	4293      	cmp	r3, r2
 8000d70:	d133      	bne.n	8000dda <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000d72:	2300      	movs	r3, #0
 8000d74:	613b      	str	r3, [r7, #16]
 8000d76:	4b1c      	ldr	r3, [pc, #112]	; (8000de8 <HAL_UART_MspInit+0x98>)
 8000d78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d7a:	4a1b      	ldr	r2, [pc, #108]	; (8000de8 <HAL_UART_MspInit+0x98>)
 8000d7c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000d80:	6413      	str	r3, [r2, #64]	; 0x40
 8000d82:	4b19      	ldr	r3, [pc, #100]	; (8000de8 <HAL_UART_MspInit+0x98>)
 8000d84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d86:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000d8a:	613b      	str	r3, [r7, #16]
 8000d8c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d8e:	2300      	movs	r3, #0
 8000d90:	60fb      	str	r3, [r7, #12]
 8000d92:	4b15      	ldr	r3, [pc, #84]	; (8000de8 <HAL_UART_MspInit+0x98>)
 8000d94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d96:	4a14      	ldr	r2, [pc, #80]	; (8000de8 <HAL_UART_MspInit+0x98>)
 8000d98:	f043 0301 	orr.w	r3, r3, #1
 8000d9c:	6313      	str	r3, [r2, #48]	; 0x30
 8000d9e:	4b12      	ldr	r3, [pc, #72]	; (8000de8 <HAL_UART_MspInit+0x98>)
 8000da0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000da2:	f003 0301 	and.w	r3, r3, #1
 8000da6:	60fb      	str	r3, [r7, #12]
 8000da8:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000daa:	230c      	movs	r3, #12
 8000dac:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dae:	2302      	movs	r3, #2
 8000db0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000db2:	2300      	movs	r3, #0
 8000db4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000db6:	2303      	movs	r3, #3
 8000db8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000dba:	2307      	movs	r3, #7
 8000dbc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000dbe:	f107 0314 	add.w	r3, r7, #20
 8000dc2:	4619      	mov	r1, r3
 8000dc4:	4809      	ldr	r0, [pc, #36]	; (8000dec <HAL_UART_MspInit+0x9c>)
 8000dc6:	f000 fb05 	bl	80013d4 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000dca:	2200      	movs	r2, #0
 8000dcc:	2100      	movs	r1, #0
 8000dce:	2026      	movs	r0, #38	; 0x26
 8000dd0:	f000 fa37 	bl	8001242 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000dd4:	2026      	movs	r0, #38	; 0x26
 8000dd6:	f000 fa50 	bl	800127a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000dda:	bf00      	nop
 8000ddc:	3728      	adds	r7, #40	; 0x28
 8000dde:	46bd      	mov	sp, r7
 8000de0:	bd80      	pop	{r7, pc}
 8000de2:	bf00      	nop
 8000de4:	40004400 	.word	0x40004400
 8000de8:	40023800 	.word	0x40023800
 8000dec:	40020000 	.word	0x40020000

08000df0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000df0:	b480      	push	{r7}
 8000df2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000df4:	e7fe      	b.n	8000df4 <NMI_Handler+0x4>

08000df6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000df6:	b480      	push	{r7}
 8000df8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000dfa:	e7fe      	b.n	8000dfa <HardFault_Handler+0x4>

08000dfc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000dfc:	b480      	push	{r7}
 8000dfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000e00:	e7fe      	b.n	8000e00 <MemManage_Handler+0x4>

08000e02 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000e02:	b480      	push	{r7}
 8000e04:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000e06:	e7fe      	b.n	8000e06 <BusFault_Handler+0x4>

08000e08 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000e08:	b480      	push	{r7}
 8000e0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000e0c:	e7fe      	b.n	8000e0c <UsageFault_Handler+0x4>

08000e0e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000e0e:	b480      	push	{r7}
 8000e10:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000e12:	bf00      	nop
 8000e14:	46bd      	mov	sp, r7
 8000e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e1a:	4770      	bx	lr

08000e1c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000e1c:	b480      	push	{r7}
 8000e1e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000e20:	bf00      	nop
 8000e22:	46bd      	mov	sp, r7
 8000e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e28:	4770      	bx	lr

08000e2a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000e2a:	b480      	push	{r7}
 8000e2c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000e2e:	bf00      	nop
 8000e30:	46bd      	mov	sp, r7
 8000e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e36:	4770      	bx	lr

08000e38 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000e38:	b580      	push	{r7, lr}
 8000e3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000e3c:	f000 f8e2 	bl	8001004 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000e40:	bf00      	nop
 8000e42:	bd80      	pop	{r7, pc}

08000e44 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8000e44:	b580      	push	{r7, lr}
 8000e46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8000e48:	2001      	movs	r0, #1
 8000e4a:	f000 fc91 	bl	8001770 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8000e4e:	bf00      	nop
 8000e50:	bd80      	pop	{r7, pc}
	...

08000e54 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000e54:	b580      	push	{r7, lr}
 8000e56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000e58:	4802      	ldr	r0, [pc, #8]	; (8000e64 <USART2_IRQHandler+0x10>)
 8000e5a:	f003 fdcf 	bl	80049fc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000e5e:	bf00      	nop
 8000e60:	bd80      	pop	{r7, pc}
 8000e62:	bf00      	nop
 8000e64:	200001a0 	.word	0x200001a0

08000e68 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000e68:	b580      	push	{r7, lr}
 8000e6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8000e6c:	4802      	ldr	r0, [pc, #8]	; (8000e78 <OTG_FS_IRQHandler+0x10>)
 8000e6e:	f000 ff01 	bl	8001c74 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000e72:	bf00      	nop
 8000e74:	bd80      	pop	{r7, pc}
 8000e76:	bf00      	nop
 8000e78:	20000604 	.word	0x20000604

08000e7c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000e7c:	b580      	push	{r7, lr}
 8000e7e:	b086      	sub	sp, #24
 8000e80:	af00      	add	r7, sp, #0
 8000e82:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000e84:	4a14      	ldr	r2, [pc, #80]	; (8000ed8 <_sbrk+0x5c>)
 8000e86:	4b15      	ldr	r3, [pc, #84]	; (8000edc <_sbrk+0x60>)
 8000e88:	1ad3      	subs	r3, r2, r3
 8000e8a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000e8c:	697b      	ldr	r3, [r7, #20]
 8000e8e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000e90:	4b13      	ldr	r3, [pc, #76]	; (8000ee0 <_sbrk+0x64>)
 8000e92:	681b      	ldr	r3, [r3, #0]
 8000e94:	2b00      	cmp	r3, #0
 8000e96:	d102      	bne.n	8000e9e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000e98:	4b11      	ldr	r3, [pc, #68]	; (8000ee0 <_sbrk+0x64>)
 8000e9a:	4a12      	ldr	r2, [pc, #72]	; (8000ee4 <_sbrk+0x68>)
 8000e9c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000e9e:	4b10      	ldr	r3, [pc, #64]	; (8000ee0 <_sbrk+0x64>)
 8000ea0:	681a      	ldr	r2, [r3, #0]
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	4413      	add	r3, r2
 8000ea6:	693a      	ldr	r2, [r7, #16]
 8000ea8:	429a      	cmp	r2, r3
 8000eaa:	d207      	bcs.n	8000ebc <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000eac:	f007 ffb6 	bl	8008e1c <__errno>
 8000eb0:	4603      	mov	r3, r0
 8000eb2:	220c      	movs	r2, #12
 8000eb4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000eb6:	f04f 33ff 	mov.w	r3, #4294967295
 8000eba:	e009      	b.n	8000ed0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000ebc:	4b08      	ldr	r3, [pc, #32]	; (8000ee0 <_sbrk+0x64>)
 8000ebe:	681b      	ldr	r3, [r3, #0]
 8000ec0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000ec2:	4b07      	ldr	r3, [pc, #28]	; (8000ee0 <_sbrk+0x64>)
 8000ec4:	681a      	ldr	r2, [r3, #0]
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	4413      	add	r3, r2
 8000eca:	4a05      	ldr	r2, [pc, #20]	; (8000ee0 <_sbrk+0x64>)
 8000ecc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000ece:	68fb      	ldr	r3, [r7, #12]
}
 8000ed0:	4618      	mov	r0, r3
 8000ed2:	3718      	adds	r7, #24
 8000ed4:	46bd      	mov	sp, r7
 8000ed6:	bd80      	pop	{r7, pc}
 8000ed8:	20020000 	.word	0x20020000
 8000edc:	00000400 	.word	0x00000400
 8000ee0:	20000220 	.word	0x20000220
 8000ee4:	20000918 	.word	0x20000918

08000ee8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000ee8:	b480      	push	{r7}
 8000eea:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000eec:	4b06      	ldr	r3, [pc, #24]	; (8000f08 <SystemInit+0x20>)
 8000eee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000ef2:	4a05      	ldr	r2, [pc, #20]	; (8000f08 <SystemInit+0x20>)
 8000ef4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000ef8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000efc:	bf00      	nop
 8000efe:	46bd      	mov	sp, r7
 8000f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f04:	4770      	bx	lr
 8000f06:	bf00      	nop
 8000f08:	e000ed00 	.word	0xe000ed00

08000f0c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000f0c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000f44 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000f10:	480d      	ldr	r0, [pc, #52]	; (8000f48 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000f12:	490e      	ldr	r1, [pc, #56]	; (8000f4c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000f14:	4a0e      	ldr	r2, [pc, #56]	; (8000f50 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000f16:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000f18:	e002      	b.n	8000f20 <LoopCopyDataInit>

08000f1a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000f1a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000f1c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000f1e:	3304      	adds	r3, #4

08000f20 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000f20:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000f22:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000f24:	d3f9      	bcc.n	8000f1a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000f26:	4a0b      	ldr	r2, [pc, #44]	; (8000f54 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000f28:	4c0b      	ldr	r4, [pc, #44]	; (8000f58 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000f2a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000f2c:	e001      	b.n	8000f32 <LoopFillZerobss>

08000f2e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000f2e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000f30:	3204      	adds	r2, #4

08000f32 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000f32:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000f34:	d3fb      	bcc.n	8000f2e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000f36:	f7ff ffd7 	bl	8000ee8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000f3a:	f007 ff75 	bl	8008e28 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000f3e:	f7ff fb19 	bl	8000574 <main>
  bx  lr    
 8000f42:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000f44:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000f48:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000f4c:	20000090 	.word	0x20000090
  ldr r2, =_sidata
 8000f50:	0800980c 	.word	0x0800980c
  ldr r2, =_sbss
 8000f54:	20000090 	.word	0x20000090
  ldr r4, =_ebss
 8000f58:	20000918 	.word	0x20000918

08000f5c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000f5c:	e7fe      	b.n	8000f5c <ADC_IRQHandler>
	...

08000f60 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f60:	b580      	push	{r7, lr}
 8000f62:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000f64:	4b0e      	ldr	r3, [pc, #56]	; (8000fa0 <HAL_Init+0x40>)
 8000f66:	681b      	ldr	r3, [r3, #0]
 8000f68:	4a0d      	ldr	r2, [pc, #52]	; (8000fa0 <HAL_Init+0x40>)
 8000f6a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000f6e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000f70:	4b0b      	ldr	r3, [pc, #44]	; (8000fa0 <HAL_Init+0x40>)
 8000f72:	681b      	ldr	r3, [r3, #0]
 8000f74:	4a0a      	ldr	r2, [pc, #40]	; (8000fa0 <HAL_Init+0x40>)
 8000f76:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000f7a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000f7c:	4b08      	ldr	r3, [pc, #32]	; (8000fa0 <HAL_Init+0x40>)
 8000f7e:	681b      	ldr	r3, [r3, #0]
 8000f80:	4a07      	ldr	r2, [pc, #28]	; (8000fa0 <HAL_Init+0x40>)
 8000f82:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000f86:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f88:	2003      	movs	r0, #3
 8000f8a:	f000 f94f 	bl	800122c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000f8e:	2000      	movs	r0, #0
 8000f90:	f000 f808 	bl	8000fa4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000f94:	f7ff fda4 	bl	8000ae0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000f98:	2300      	movs	r3, #0
}
 8000f9a:	4618      	mov	r0, r3
 8000f9c:	bd80      	pop	{r7, pc}
 8000f9e:	bf00      	nop
 8000fa0:	40023c00 	.word	0x40023c00

08000fa4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000fa4:	b580      	push	{r7, lr}
 8000fa6:	b082      	sub	sp, #8
 8000fa8:	af00      	add	r7, sp, #0
 8000faa:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000fac:	4b12      	ldr	r3, [pc, #72]	; (8000ff8 <HAL_InitTick+0x54>)
 8000fae:	681a      	ldr	r2, [r3, #0]
 8000fb0:	4b12      	ldr	r3, [pc, #72]	; (8000ffc <HAL_InitTick+0x58>)
 8000fb2:	781b      	ldrb	r3, [r3, #0]
 8000fb4:	4619      	mov	r1, r3
 8000fb6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000fba:	fbb3 f3f1 	udiv	r3, r3, r1
 8000fbe:	fbb2 f3f3 	udiv	r3, r2, r3
 8000fc2:	4618      	mov	r0, r3
 8000fc4:	f000 f967 	bl	8001296 <HAL_SYSTICK_Config>
 8000fc8:	4603      	mov	r3, r0
 8000fca:	2b00      	cmp	r3, #0
 8000fcc:	d001      	beq.n	8000fd2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000fce:	2301      	movs	r3, #1
 8000fd0:	e00e      	b.n	8000ff0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	2b0f      	cmp	r3, #15
 8000fd6:	d80a      	bhi.n	8000fee <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000fd8:	2200      	movs	r2, #0
 8000fda:	6879      	ldr	r1, [r7, #4]
 8000fdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000fe0:	f000 f92f 	bl	8001242 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000fe4:	4a06      	ldr	r2, [pc, #24]	; (8001000 <HAL_InitTick+0x5c>)
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000fea:	2300      	movs	r3, #0
 8000fec:	e000      	b.n	8000ff0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000fee:	2301      	movs	r3, #1
}
 8000ff0:	4618      	mov	r0, r3
 8000ff2:	3708      	adds	r7, #8
 8000ff4:	46bd      	mov	sp, r7
 8000ff6:	bd80      	pop	{r7, pc}
 8000ff8:	20000000 	.word	0x20000000
 8000ffc:	20000008 	.word	0x20000008
 8001000:	20000004 	.word	0x20000004

08001004 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001004:	b480      	push	{r7}
 8001006:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001008:	4b06      	ldr	r3, [pc, #24]	; (8001024 <HAL_IncTick+0x20>)
 800100a:	781b      	ldrb	r3, [r3, #0]
 800100c:	461a      	mov	r2, r3
 800100e:	4b06      	ldr	r3, [pc, #24]	; (8001028 <HAL_IncTick+0x24>)
 8001010:	681b      	ldr	r3, [r3, #0]
 8001012:	4413      	add	r3, r2
 8001014:	4a04      	ldr	r2, [pc, #16]	; (8001028 <HAL_IncTick+0x24>)
 8001016:	6013      	str	r3, [r2, #0]
}
 8001018:	bf00      	nop
 800101a:	46bd      	mov	sp, r7
 800101c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001020:	4770      	bx	lr
 8001022:	bf00      	nop
 8001024:	20000008 	.word	0x20000008
 8001028:	20000224 	.word	0x20000224

0800102c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800102c:	b480      	push	{r7}
 800102e:	af00      	add	r7, sp, #0
  return uwTick;
 8001030:	4b03      	ldr	r3, [pc, #12]	; (8001040 <HAL_GetTick+0x14>)
 8001032:	681b      	ldr	r3, [r3, #0]
}
 8001034:	4618      	mov	r0, r3
 8001036:	46bd      	mov	sp, r7
 8001038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800103c:	4770      	bx	lr
 800103e:	bf00      	nop
 8001040:	20000224 	.word	0x20000224

08001044 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001044:	b580      	push	{r7, lr}
 8001046:	b084      	sub	sp, #16
 8001048:	af00      	add	r7, sp, #0
 800104a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800104c:	f7ff ffee 	bl	800102c <HAL_GetTick>
 8001050:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001056:	68fb      	ldr	r3, [r7, #12]
 8001058:	f1b3 3fff 	cmp.w	r3, #4294967295
 800105c:	d005      	beq.n	800106a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800105e:	4b0a      	ldr	r3, [pc, #40]	; (8001088 <HAL_Delay+0x44>)
 8001060:	781b      	ldrb	r3, [r3, #0]
 8001062:	461a      	mov	r2, r3
 8001064:	68fb      	ldr	r3, [r7, #12]
 8001066:	4413      	add	r3, r2
 8001068:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800106a:	bf00      	nop
 800106c:	f7ff ffde 	bl	800102c <HAL_GetTick>
 8001070:	4602      	mov	r2, r0
 8001072:	68bb      	ldr	r3, [r7, #8]
 8001074:	1ad3      	subs	r3, r2, r3
 8001076:	68fa      	ldr	r2, [r7, #12]
 8001078:	429a      	cmp	r2, r3
 800107a:	d8f7      	bhi.n	800106c <HAL_Delay+0x28>
  {
  }
}
 800107c:	bf00      	nop
 800107e:	bf00      	nop
 8001080:	3710      	adds	r7, #16
 8001082:	46bd      	mov	sp, r7
 8001084:	bd80      	pop	{r7, pc}
 8001086:	bf00      	nop
 8001088:	20000008 	.word	0x20000008

0800108c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800108c:	b480      	push	{r7}
 800108e:	b085      	sub	sp, #20
 8001090:	af00      	add	r7, sp, #0
 8001092:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	f003 0307 	and.w	r3, r3, #7
 800109a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800109c:	4b0c      	ldr	r3, [pc, #48]	; (80010d0 <__NVIC_SetPriorityGrouping+0x44>)
 800109e:	68db      	ldr	r3, [r3, #12]
 80010a0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80010a2:	68ba      	ldr	r2, [r7, #8]
 80010a4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80010a8:	4013      	ands	r3, r2
 80010aa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80010ac:	68fb      	ldr	r3, [r7, #12]
 80010ae:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80010b0:	68bb      	ldr	r3, [r7, #8]
 80010b2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80010b4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80010b8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80010bc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80010be:	4a04      	ldr	r2, [pc, #16]	; (80010d0 <__NVIC_SetPriorityGrouping+0x44>)
 80010c0:	68bb      	ldr	r3, [r7, #8]
 80010c2:	60d3      	str	r3, [r2, #12]
}
 80010c4:	bf00      	nop
 80010c6:	3714      	adds	r7, #20
 80010c8:	46bd      	mov	sp, r7
 80010ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ce:	4770      	bx	lr
 80010d0:	e000ed00 	.word	0xe000ed00

080010d4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80010d4:	b480      	push	{r7}
 80010d6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80010d8:	4b04      	ldr	r3, [pc, #16]	; (80010ec <__NVIC_GetPriorityGrouping+0x18>)
 80010da:	68db      	ldr	r3, [r3, #12]
 80010dc:	0a1b      	lsrs	r3, r3, #8
 80010de:	f003 0307 	and.w	r3, r3, #7
}
 80010e2:	4618      	mov	r0, r3
 80010e4:	46bd      	mov	sp, r7
 80010e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ea:	4770      	bx	lr
 80010ec:	e000ed00 	.word	0xe000ed00

080010f0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80010f0:	b480      	push	{r7}
 80010f2:	b083      	sub	sp, #12
 80010f4:	af00      	add	r7, sp, #0
 80010f6:	4603      	mov	r3, r0
 80010f8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80010fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010fe:	2b00      	cmp	r3, #0
 8001100:	db0b      	blt.n	800111a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001102:	79fb      	ldrb	r3, [r7, #7]
 8001104:	f003 021f 	and.w	r2, r3, #31
 8001108:	4907      	ldr	r1, [pc, #28]	; (8001128 <__NVIC_EnableIRQ+0x38>)
 800110a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800110e:	095b      	lsrs	r3, r3, #5
 8001110:	2001      	movs	r0, #1
 8001112:	fa00 f202 	lsl.w	r2, r0, r2
 8001116:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800111a:	bf00      	nop
 800111c:	370c      	adds	r7, #12
 800111e:	46bd      	mov	sp, r7
 8001120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001124:	4770      	bx	lr
 8001126:	bf00      	nop
 8001128:	e000e100 	.word	0xe000e100

0800112c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800112c:	b480      	push	{r7}
 800112e:	b083      	sub	sp, #12
 8001130:	af00      	add	r7, sp, #0
 8001132:	4603      	mov	r3, r0
 8001134:	6039      	str	r1, [r7, #0]
 8001136:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001138:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800113c:	2b00      	cmp	r3, #0
 800113e:	db0a      	blt.n	8001156 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001140:	683b      	ldr	r3, [r7, #0]
 8001142:	b2da      	uxtb	r2, r3
 8001144:	490c      	ldr	r1, [pc, #48]	; (8001178 <__NVIC_SetPriority+0x4c>)
 8001146:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800114a:	0112      	lsls	r2, r2, #4
 800114c:	b2d2      	uxtb	r2, r2
 800114e:	440b      	add	r3, r1
 8001150:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001154:	e00a      	b.n	800116c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001156:	683b      	ldr	r3, [r7, #0]
 8001158:	b2da      	uxtb	r2, r3
 800115a:	4908      	ldr	r1, [pc, #32]	; (800117c <__NVIC_SetPriority+0x50>)
 800115c:	79fb      	ldrb	r3, [r7, #7]
 800115e:	f003 030f 	and.w	r3, r3, #15
 8001162:	3b04      	subs	r3, #4
 8001164:	0112      	lsls	r2, r2, #4
 8001166:	b2d2      	uxtb	r2, r2
 8001168:	440b      	add	r3, r1
 800116a:	761a      	strb	r2, [r3, #24]
}
 800116c:	bf00      	nop
 800116e:	370c      	adds	r7, #12
 8001170:	46bd      	mov	sp, r7
 8001172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001176:	4770      	bx	lr
 8001178:	e000e100 	.word	0xe000e100
 800117c:	e000ed00 	.word	0xe000ed00

08001180 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001180:	b480      	push	{r7}
 8001182:	b089      	sub	sp, #36	; 0x24
 8001184:	af00      	add	r7, sp, #0
 8001186:	60f8      	str	r0, [r7, #12]
 8001188:	60b9      	str	r1, [r7, #8]
 800118a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800118c:	68fb      	ldr	r3, [r7, #12]
 800118e:	f003 0307 	and.w	r3, r3, #7
 8001192:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001194:	69fb      	ldr	r3, [r7, #28]
 8001196:	f1c3 0307 	rsb	r3, r3, #7
 800119a:	2b04      	cmp	r3, #4
 800119c:	bf28      	it	cs
 800119e:	2304      	movcs	r3, #4
 80011a0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80011a2:	69fb      	ldr	r3, [r7, #28]
 80011a4:	3304      	adds	r3, #4
 80011a6:	2b06      	cmp	r3, #6
 80011a8:	d902      	bls.n	80011b0 <NVIC_EncodePriority+0x30>
 80011aa:	69fb      	ldr	r3, [r7, #28]
 80011ac:	3b03      	subs	r3, #3
 80011ae:	e000      	b.n	80011b2 <NVIC_EncodePriority+0x32>
 80011b0:	2300      	movs	r3, #0
 80011b2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011b4:	f04f 32ff 	mov.w	r2, #4294967295
 80011b8:	69bb      	ldr	r3, [r7, #24]
 80011ba:	fa02 f303 	lsl.w	r3, r2, r3
 80011be:	43da      	mvns	r2, r3
 80011c0:	68bb      	ldr	r3, [r7, #8]
 80011c2:	401a      	ands	r2, r3
 80011c4:	697b      	ldr	r3, [r7, #20]
 80011c6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80011c8:	f04f 31ff 	mov.w	r1, #4294967295
 80011cc:	697b      	ldr	r3, [r7, #20]
 80011ce:	fa01 f303 	lsl.w	r3, r1, r3
 80011d2:	43d9      	mvns	r1, r3
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011d8:	4313      	orrs	r3, r2
         );
}
 80011da:	4618      	mov	r0, r3
 80011dc:	3724      	adds	r7, #36	; 0x24
 80011de:	46bd      	mov	sp, r7
 80011e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e4:	4770      	bx	lr
	...

080011e8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80011e8:	b580      	push	{r7, lr}
 80011ea:	b082      	sub	sp, #8
 80011ec:	af00      	add	r7, sp, #0
 80011ee:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	3b01      	subs	r3, #1
 80011f4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80011f8:	d301      	bcc.n	80011fe <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80011fa:	2301      	movs	r3, #1
 80011fc:	e00f      	b.n	800121e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80011fe:	4a0a      	ldr	r2, [pc, #40]	; (8001228 <SysTick_Config+0x40>)
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	3b01      	subs	r3, #1
 8001204:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001206:	210f      	movs	r1, #15
 8001208:	f04f 30ff 	mov.w	r0, #4294967295
 800120c:	f7ff ff8e 	bl	800112c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001210:	4b05      	ldr	r3, [pc, #20]	; (8001228 <SysTick_Config+0x40>)
 8001212:	2200      	movs	r2, #0
 8001214:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001216:	4b04      	ldr	r3, [pc, #16]	; (8001228 <SysTick_Config+0x40>)
 8001218:	2207      	movs	r2, #7
 800121a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800121c:	2300      	movs	r3, #0
}
 800121e:	4618      	mov	r0, r3
 8001220:	3708      	adds	r7, #8
 8001222:	46bd      	mov	sp, r7
 8001224:	bd80      	pop	{r7, pc}
 8001226:	bf00      	nop
 8001228:	e000e010 	.word	0xe000e010

0800122c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800122c:	b580      	push	{r7, lr}
 800122e:	b082      	sub	sp, #8
 8001230:	af00      	add	r7, sp, #0
 8001232:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001234:	6878      	ldr	r0, [r7, #4]
 8001236:	f7ff ff29 	bl	800108c <__NVIC_SetPriorityGrouping>
}
 800123a:	bf00      	nop
 800123c:	3708      	adds	r7, #8
 800123e:	46bd      	mov	sp, r7
 8001240:	bd80      	pop	{r7, pc}

08001242 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001242:	b580      	push	{r7, lr}
 8001244:	b086      	sub	sp, #24
 8001246:	af00      	add	r7, sp, #0
 8001248:	4603      	mov	r3, r0
 800124a:	60b9      	str	r1, [r7, #8]
 800124c:	607a      	str	r2, [r7, #4]
 800124e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001250:	2300      	movs	r3, #0
 8001252:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001254:	f7ff ff3e 	bl	80010d4 <__NVIC_GetPriorityGrouping>
 8001258:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800125a:	687a      	ldr	r2, [r7, #4]
 800125c:	68b9      	ldr	r1, [r7, #8]
 800125e:	6978      	ldr	r0, [r7, #20]
 8001260:	f7ff ff8e 	bl	8001180 <NVIC_EncodePriority>
 8001264:	4602      	mov	r2, r0
 8001266:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800126a:	4611      	mov	r1, r2
 800126c:	4618      	mov	r0, r3
 800126e:	f7ff ff5d 	bl	800112c <__NVIC_SetPriority>
}
 8001272:	bf00      	nop
 8001274:	3718      	adds	r7, #24
 8001276:	46bd      	mov	sp, r7
 8001278:	bd80      	pop	{r7, pc}

0800127a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800127a:	b580      	push	{r7, lr}
 800127c:	b082      	sub	sp, #8
 800127e:	af00      	add	r7, sp, #0
 8001280:	4603      	mov	r3, r0
 8001282:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001284:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001288:	4618      	mov	r0, r3
 800128a:	f7ff ff31 	bl	80010f0 <__NVIC_EnableIRQ>
}
 800128e:	bf00      	nop
 8001290:	3708      	adds	r7, #8
 8001292:	46bd      	mov	sp, r7
 8001294:	bd80      	pop	{r7, pc}

08001296 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001296:	b580      	push	{r7, lr}
 8001298:	b082      	sub	sp, #8
 800129a:	af00      	add	r7, sp, #0
 800129c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800129e:	6878      	ldr	r0, [r7, #4]
 80012a0:	f7ff ffa2 	bl	80011e8 <SysTick_Config>
 80012a4:	4603      	mov	r3, r0
}
 80012a6:	4618      	mov	r0, r3
 80012a8:	3708      	adds	r7, #8
 80012aa:	46bd      	mov	sp, r7
 80012ac:	bd80      	pop	{r7, pc}

080012ae <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80012ae:	b580      	push	{r7, lr}
 80012b0:	b084      	sub	sp, #16
 80012b2:	af00      	add	r7, sp, #0
 80012b4:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80012ba:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80012bc:	f7ff feb6 	bl	800102c <HAL_GetTick>
 80012c0:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80012c8:	b2db      	uxtb	r3, r3
 80012ca:	2b02      	cmp	r3, #2
 80012cc:	d008      	beq.n	80012e0 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	2280      	movs	r2, #128	; 0x80
 80012d2:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	2200      	movs	r2, #0
 80012d8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80012dc:	2301      	movs	r3, #1
 80012de:	e052      	b.n	8001386 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	681b      	ldr	r3, [r3, #0]
 80012e4:	681a      	ldr	r2, [r3, #0]
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	681b      	ldr	r3, [r3, #0]
 80012ea:	f022 0216 	bic.w	r2, r2, #22
 80012ee:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	681b      	ldr	r3, [r3, #0]
 80012f4:	695a      	ldr	r2, [r3, #20]
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	681b      	ldr	r3, [r3, #0]
 80012fa:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80012fe:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001304:	2b00      	cmp	r3, #0
 8001306:	d103      	bne.n	8001310 <HAL_DMA_Abort+0x62>
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800130c:	2b00      	cmp	r3, #0
 800130e:	d007      	beq.n	8001320 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	681b      	ldr	r3, [r3, #0]
 8001314:	681a      	ldr	r2, [r3, #0]
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	681b      	ldr	r3, [r3, #0]
 800131a:	f022 0208 	bic.w	r2, r2, #8
 800131e:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	681a      	ldr	r2, [r3, #0]
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	681b      	ldr	r3, [r3, #0]
 800132a:	f022 0201 	bic.w	r2, r2, #1
 800132e:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001330:	e013      	b.n	800135a <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001332:	f7ff fe7b 	bl	800102c <HAL_GetTick>
 8001336:	4602      	mov	r2, r0
 8001338:	68bb      	ldr	r3, [r7, #8]
 800133a:	1ad3      	subs	r3, r2, r3
 800133c:	2b05      	cmp	r3, #5
 800133e:	d90c      	bls.n	800135a <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	2220      	movs	r2, #32
 8001344:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	2203      	movs	r2, #3
 800134a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	2200      	movs	r2, #0
 8001352:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8001356:	2303      	movs	r3, #3
 8001358:	e015      	b.n	8001386 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	681b      	ldr	r3, [r3, #0]
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	f003 0301 	and.w	r3, r3, #1
 8001364:	2b00      	cmp	r3, #0
 8001366:	d1e4      	bne.n	8001332 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800136c:	223f      	movs	r2, #63	; 0x3f
 800136e:	409a      	lsls	r2, r3
 8001370:	68fb      	ldr	r3, [r7, #12]
 8001372:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	2201      	movs	r2, #1
 8001378:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	2200      	movs	r2, #0
 8001380:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8001384:	2300      	movs	r3, #0
}
 8001386:	4618      	mov	r0, r3
 8001388:	3710      	adds	r7, #16
 800138a:	46bd      	mov	sp, r7
 800138c:	bd80      	pop	{r7, pc}

0800138e <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800138e:	b480      	push	{r7}
 8001390:	b083      	sub	sp, #12
 8001392:	af00      	add	r7, sp, #0
 8001394:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800139c:	b2db      	uxtb	r3, r3
 800139e:	2b02      	cmp	r3, #2
 80013a0:	d004      	beq.n	80013ac <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	2280      	movs	r2, #128	; 0x80
 80013a6:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80013a8:	2301      	movs	r3, #1
 80013aa:	e00c      	b.n	80013c6 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	2205      	movs	r2, #5
 80013b0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	681a      	ldr	r2, [r3, #0]
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	681b      	ldr	r3, [r3, #0]
 80013be:	f022 0201 	bic.w	r2, r2, #1
 80013c2:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80013c4:	2300      	movs	r3, #0
}
 80013c6:	4618      	mov	r0, r3
 80013c8:	370c      	adds	r7, #12
 80013ca:	46bd      	mov	sp, r7
 80013cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013d0:	4770      	bx	lr
	...

080013d4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80013d4:	b480      	push	{r7}
 80013d6:	b089      	sub	sp, #36	; 0x24
 80013d8:	af00      	add	r7, sp, #0
 80013da:	6078      	str	r0, [r7, #4]
 80013dc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80013de:	2300      	movs	r3, #0
 80013e0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80013e2:	2300      	movs	r3, #0
 80013e4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80013e6:	2300      	movs	r3, #0
 80013e8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80013ea:	2300      	movs	r3, #0
 80013ec:	61fb      	str	r3, [r7, #28]
 80013ee:	e16b      	b.n	80016c8 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80013f0:	2201      	movs	r2, #1
 80013f2:	69fb      	ldr	r3, [r7, #28]
 80013f4:	fa02 f303 	lsl.w	r3, r2, r3
 80013f8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80013fa:	683b      	ldr	r3, [r7, #0]
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	697a      	ldr	r2, [r7, #20]
 8001400:	4013      	ands	r3, r2
 8001402:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001404:	693a      	ldr	r2, [r7, #16]
 8001406:	697b      	ldr	r3, [r7, #20]
 8001408:	429a      	cmp	r2, r3
 800140a:	f040 815a 	bne.w	80016c2 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800140e:	683b      	ldr	r3, [r7, #0]
 8001410:	685b      	ldr	r3, [r3, #4]
 8001412:	f003 0303 	and.w	r3, r3, #3
 8001416:	2b01      	cmp	r3, #1
 8001418:	d005      	beq.n	8001426 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800141a:	683b      	ldr	r3, [r7, #0]
 800141c:	685b      	ldr	r3, [r3, #4]
 800141e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001422:	2b02      	cmp	r3, #2
 8001424:	d130      	bne.n	8001488 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	689b      	ldr	r3, [r3, #8]
 800142a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800142c:	69fb      	ldr	r3, [r7, #28]
 800142e:	005b      	lsls	r3, r3, #1
 8001430:	2203      	movs	r2, #3
 8001432:	fa02 f303 	lsl.w	r3, r2, r3
 8001436:	43db      	mvns	r3, r3
 8001438:	69ba      	ldr	r2, [r7, #24]
 800143a:	4013      	ands	r3, r2
 800143c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800143e:	683b      	ldr	r3, [r7, #0]
 8001440:	68da      	ldr	r2, [r3, #12]
 8001442:	69fb      	ldr	r3, [r7, #28]
 8001444:	005b      	lsls	r3, r3, #1
 8001446:	fa02 f303 	lsl.w	r3, r2, r3
 800144a:	69ba      	ldr	r2, [r7, #24]
 800144c:	4313      	orrs	r3, r2
 800144e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	69ba      	ldr	r2, [r7, #24]
 8001454:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	685b      	ldr	r3, [r3, #4]
 800145a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800145c:	2201      	movs	r2, #1
 800145e:	69fb      	ldr	r3, [r7, #28]
 8001460:	fa02 f303 	lsl.w	r3, r2, r3
 8001464:	43db      	mvns	r3, r3
 8001466:	69ba      	ldr	r2, [r7, #24]
 8001468:	4013      	ands	r3, r2
 800146a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800146c:	683b      	ldr	r3, [r7, #0]
 800146e:	685b      	ldr	r3, [r3, #4]
 8001470:	091b      	lsrs	r3, r3, #4
 8001472:	f003 0201 	and.w	r2, r3, #1
 8001476:	69fb      	ldr	r3, [r7, #28]
 8001478:	fa02 f303 	lsl.w	r3, r2, r3
 800147c:	69ba      	ldr	r2, [r7, #24]
 800147e:	4313      	orrs	r3, r2
 8001480:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	69ba      	ldr	r2, [r7, #24]
 8001486:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001488:	683b      	ldr	r3, [r7, #0]
 800148a:	685b      	ldr	r3, [r3, #4]
 800148c:	f003 0303 	and.w	r3, r3, #3
 8001490:	2b03      	cmp	r3, #3
 8001492:	d017      	beq.n	80014c4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	68db      	ldr	r3, [r3, #12]
 8001498:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800149a:	69fb      	ldr	r3, [r7, #28]
 800149c:	005b      	lsls	r3, r3, #1
 800149e:	2203      	movs	r2, #3
 80014a0:	fa02 f303 	lsl.w	r3, r2, r3
 80014a4:	43db      	mvns	r3, r3
 80014a6:	69ba      	ldr	r2, [r7, #24]
 80014a8:	4013      	ands	r3, r2
 80014aa:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80014ac:	683b      	ldr	r3, [r7, #0]
 80014ae:	689a      	ldr	r2, [r3, #8]
 80014b0:	69fb      	ldr	r3, [r7, #28]
 80014b2:	005b      	lsls	r3, r3, #1
 80014b4:	fa02 f303 	lsl.w	r3, r2, r3
 80014b8:	69ba      	ldr	r2, [r7, #24]
 80014ba:	4313      	orrs	r3, r2
 80014bc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	69ba      	ldr	r2, [r7, #24]
 80014c2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80014c4:	683b      	ldr	r3, [r7, #0]
 80014c6:	685b      	ldr	r3, [r3, #4]
 80014c8:	f003 0303 	and.w	r3, r3, #3
 80014cc:	2b02      	cmp	r3, #2
 80014ce:	d123      	bne.n	8001518 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80014d0:	69fb      	ldr	r3, [r7, #28]
 80014d2:	08da      	lsrs	r2, r3, #3
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	3208      	adds	r2, #8
 80014d8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80014dc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80014de:	69fb      	ldr	r3, [r7, #28]
 80014e0:	f003 0307 	and.w	r3, r3, #7
 80014e4:	009b      	lsls	r3, r3, #2
 80014e6:	220f      	movs	r2, #15
 80014e8:	fa02 f303 	lsl.w	r3, r2, r3
 80014ec:	43db      	mvns	r3, r3
 80014ee:	69ba      	ldr	r2, [r7, #24]
 80014f0:	4013      	ands	r3, r2
 80014f2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80014f4:	683b      	ldr	r3, [r7, #0]
 80014f6:	691a      	ldr	r2, [r3, #16]
 80014f8:	69fb      	ldr	r3, [r7, #28]
 80014fa:	f003 0307 	and.w	r3, r3, #7
 80014fe:	009b      	lsls	r3, r3, #2
 8001500:	fa02 f303 	lsl.w	r3, r2, r3
 8001504:	69ba      	ldr	r2, [r7, #24]
 8001506:	4313      	orrs	r3, r2
 8001508:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800150a:	69fb      	ldr	r3, [r7, #28]
 800150c:	08da      	lsrs	r2, r3, #3
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	3208      	adds	r2, #8
 8001512:	69b9      	ldr	r1, [r7, #24]
 8001514:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800151e:	69fb      	ldr	r3, [r7, #28]
 8001520:	005b      	lsls	r3, r3, #1
 8001522:	2203      	movs	r2, #3
 8001524:	fa02 f303 	lsl.w	r3, r2, r3
 8001528:	43db      	mvns	r3, r3
 800152a:	69ba      	ldr	r2, [r7, #24]
 800152c:	4013      	ands	r3, r2
 800152e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001530:	683b      	ldr	r3, [r7, #0]
 8001532:	685b      	ldr	r3, [r3, #4]
 8001534:	f003 0203 	and.w	r2, r3, #3
 8001538:	69fb      	ldr	r3, [r7, #28]
 800153a:	005b      	lsls	r3, r3, #1
 800153c:	fa02 f303 	lsl.w	r3, r2, r3
 8001540:	69ba      	ldr	r2, [r7, #24]
 8001542:	4313      	orrs	r3, r2
 8001544:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	69ba      	ldr	r2, [r7, #24]
 800154a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800154c:	683b      	ldr	r3, [r7, #0]
 800154e:	685b      	ldr	r3, [r3, #4]
 8001550:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001554:	2b00      	cmp	r3, #0
 8001556:	f000 80b4 	beq.w	80016c2 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800155a:	2300      	movs	r3, #0
 800155c:	60fb      	str	r3, [r7, #12]
 800155e:	4b60      	ldr	r3, [pc, #384]	; (80016e0 <HAL_GPIO_Init+0x30c>)
 8001560:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001562:	4a5f      	ldr	r2, [pc, #380]	; (80016e0 <HAL_GPIO_Init+0x30c>)
 8001564:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001568:	6453      	str	r3, [r2, #68]	; 0x44
 800156a:	4b5d      	ldr	r3, [pc, #372]	; (80016e0 <HAL_GPIO_Init+0x30c>)
 800156c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800156e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001572:	60fb      	str	r3, [r7, #12]
 8001574:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001576:	4a5b      	ldr	r2, [pc, #364]	; (80016e4 <HAL_GPIO_Init+0x310>)
 8001578:	69fb      	ldr	r3, [r7, #28]
 800157a:	089b      	lsrs	r3, r3, #2
 800157c:	3302      	adds	r3, #2
 800157e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001582:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001584:	69fb      	ldr	r3, [r7, #28]
 8001586:	f003 0303 	and.w	r3, r3, #3
 800158a:	009b      	lsls	r3, r3, #2
 800158c:	220f      	movs	r2, #15
 800158e:	fa02 f303 	lsl.w	r3, r2, r3
 8001592:	43db      	mvns	r3, r3
 8001594:	69ba      	ldr	r2, [r7, #24]
 8001596:	4013      	ands	r3, r2
 8001598:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	4a52      	ldr	r2, [pc, #328]	; (80016e8 <HAL_GPIO_Init+0x314>)
 800159e:	4293      	cmp	r3, r2
 80015a0:	d02b      	beq.n	80015fa <HAL_GPIO_Init+0x226>
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	4a51      	ldr	r2, [pc, #324]	; (80016ec <HAL_GPIO_Init+0x318>)
 80015a6:	4293      	cmp	r3, r2
 80015a8:	d025      	beq.n	80015f6 <HAL_GPIO_Init+0x222>
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	4a50      	ldr	r2, [pc, #320]	; (80016f0 <HAL_GPIO_Init+0x31c>)
 80015ae:	4293      	cmp	r3, r2
 80015b0:	d01f      	beq.n	80015f2 <HAL_GPIO_Init+0x21e>
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	4a4f      	ldr	r2, [pc, #316]	; (80016f4 <HAL_GPIO_Init+0x320>)
 80015b6:	4293      	cmp	r3, r2
 80015b8:	d019      	beq.n	80015ee <HAL_GPIO_Init+0x21a>
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	4a4e      	ldr	r2, [pc, #312]	; (80016f8 <HAL_GPIO_Init+0x324>)
 80015be:	4293      	cmp	r3, r2
 80015c0:	d013      	beq.n	80015ea <HAL_GPIO_Init+0x216>
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	4a4d      	ldr	r2, [pc, #308]	; (80016fc <HAL_GPIO_Init+0x328>)
 80015c6:	4293      	cmp	r3, r2
 80015c8:	d00d      	beq.n	80015e6 <HAL_GPIO_Init+0x212>
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	4a4c      	ldr	r2, [pc, #304]	; (8001700 <HAL_GPIO_Init+0x32c>)
 80015ce:	4293      	cmp	r3, r2
 80015d0:	d007      	beq.n	80015e2 <HAL_GPIO_Init+0x20e>
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	4a4b      	ldr	r2, [pc, #300]	; (8001704 <HAL_GPIO_Init+0x330>)
 80015d6:	4293      	cmp	r3, r2
 80015d8:	d101      	bne.n	80015de <HAL_GPIO_Init+0x20a>
 80015da:	2307      	movs	r3, #7
 80015dc:	e00e      	b.n	80015fc <HAL_GPIO_Init+0x228>
 80015de:	2308      	movs	r3, #8
 80015e0:	e00c      	b.n	80015fc <HAL_GPIO_Init+0x228>
 80015e2:	2306      	movs	r3, #6
 80015e4:	e00a      	b.n	80015fc <HAL_GPIO_Init+0x228>
 80015e6:	2305      	movs	r3, #5
 80015e8:	e008      	b.n	80015fc <HAL_GPIO_Init+0x228>
 80015ea:	2304      	movs	r3, #4
 80015ec:	e006      	b.n	80015fc <HAL_GPIO_Init+0x228>
 80015ee:	2303      	movs	r3, #3
 80015f0:	e004      	b.n	80015fc <HAL_GPIO_Init+0x228>
 80015f2:	2302      	movs	r3, #2
 80015f4:	e002      	b.n	80015fc <HAL_GPIO_Init+0x228>
 80015f6:	2301      	movs	r3, #1
 80015f8:	e000      	b.n	80015fc <HAL_GPIO_Init+0x228>
 80015fa:	2300      	movs	r3, #0
 80015fc:	69fa      	ldr	r2, [r7, #28]
 80015fe:	f002 0203 	and.w	r2, r2, #3
 8001602:	0092      	lsls	r2, r2, #2
 8001604:	4093      	lsls	r3, r2
 8001606:	69ba      	ldr	r2, [r7, #24]
 8001608:	4313      	orrs	r3, r2
 800160a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800160c:	4935      	ldr	r1, [pc, #212]	; (80016e4 <HAL_GPIO_Init+0x310>)
 800160e:	69fb      	ldr	r3, [r7, #28]
 8001610:	089b      	lsrs	r3, r3, #2
 8001612:	3302      	adds	r3, #2
 8001614:	69ba      	ldr	r2, [r7, #24]
 8001616:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800161a:	4b3b      	ldr	r3, [pc, #236]	; (8001708 <HAL_GPIO_Init+0x334>)
 800161c:	689b      	ldr	r3, [r3, #8]
 800161e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001620:	693b      	ldr	r3, [r7, #16]
 8001622:	43db      	mvns	r3, r3
 8001624:	69ba      	ldr	r2, [r7, #24]
 8001626:	4013      	ands	r3, r2
 8001628:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800162a:	683b      	ldr	r3, [r7, #0]
 800162c:	685b      	ldr	r3, [r3, #4]
 800162e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001632:	2b00      	cmp	r3, #0
 8001634:	d003      	beq.n	800163e <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001636:	69ba      	ldr	r2, [r7, #24]
 8001638:	693b      	ldr	r3, [r7, #16]
 800163a:	4313      	orrs	r3, r2
 800163c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800163e:	4a32      	ldr	r2, [pc, #200]	; (8001708 <HAL_GPIO_Init+0x334>)
 8001640:	69bb      	ldr	r3, [r7, #24]
 8001642:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001644:	4b30      	ldr	r3, [pc, #192]	; (8001708 <HAL_GPIO_Init+0x334>)
 8001646:	68db      	ldr	r3, [r3, #12]
 8001648:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800164a:	693b      	ldr	r3, [r7, #16]
 800164c:	43db      	mvns	r3, r3
 800164e:	69ba      	ldr	r2, [r7, #24]
 8001650:	4013      	ands	r3, r2
 8001652:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001654:	683b      	ldr	r3, [r7, #0]
 8001656:	685b      	ldr	r3, [r3, #4]
 8001658:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800165c:	2b00      	cmp	r3, #0
 800165e:	d003      	beq.n	8001668 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001660:	69ba      	ldr	r2, [r7, #24]
 8001662:	693b      	ldr	r3, [r7, #16]
 8001664:	4313      	orrs	r3, r2
 8001666:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001668:	4a27      	ldr	r2, [pc, #156]	; (8001708 <HAL_GPIO_Init+0x334>)
 800166a:	69bb      	ldr	r3, [r7, #24]
 800166c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800166e:	4b26      	ldr	r3, [pc, #152]	; (8001708 <HAL_GPIO_Init+0x334>)
 8001670:	685b      	ldr	r3, [r3, #4]
 8001672:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001674:	693b      	ldr	r3, [r7, #16]
 8001676:	43db      	mvns	r3, r3
 8001678:	69ba      	ldr	r2, [r7, #24]
 800167a:	4013      	ands	r3, r2
 800167c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800167e:	683b      	ldr	r3, [r7, #0]
 8001680:	685b      	ldr	r3, [r3, #4]
 8001682:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001686:	2b00      	cmp	r3, #0
 8001688:	d003      	beq.n	8001692 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800168a:	69ba      	ldr	r2, [r7, #24]
 800168c:	693b      	ldr	r3, [r7, #16]
 800168e:	4313      	orrs	r3, r2
 8001690:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001692:	4a1d      	ldr	r2, [pc, #116]	; (8001708 <HAL_GPIO_Init+0x334>)
 8001694:	69bb      	ldr	r3, [r7, #24]
 8001696:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001698:	4b1b      	ldr	r3, [pc, #108]	; (8001708 <HAL_GPIO_Init+0x334>)
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800169e:	693b      	ldr	r3, [r7, #16]
 80016a0:	43db      	mvns	r3, r3
 80016a2:	69ba      	ldr	r2, [r7, #24]
 80016a4:	4013      	ands	r3, r2
 80016a6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80016a8:	683b      	ldr	r3, [r7, #0]
 80016aa:	685b      	ldr	r3, [r3, #4]
 80016ac:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80016b0:	2b00      	cmp	r3, #0
 80016b2:	d003      	beq.n	80016bc <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80016b4:	69ba      	ldr	r2, [r7, #24]
 80016b6:	693b      	ldr	r3, [r7, #16]
 80016b8:	4313      	orrs	r3, r2
 80016ba:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80016bc:	4a12      	ldr	r2, [pc, #72]	; (8001708 <HAL_GPIO_Init+0x334>)
 80016be:	69bb      	ldr	r3, [r7, #24]
 80016c0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80016c2:	69fb      	ldr	r3, [r7, #28]
 80016c4:	3301      	adds	r3, #1
 80016c6:	61fb      	str	r3, [r7, #28]
 80016c8:	69fb      	ldr	r3, [r7, #28]
 80016ca:	2b0f      	cmp	r3, #15
 80016cc:	f67f ae90 	bls.w	80013f0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80016d0:	bf00      	nop
 80016d2:	bf00      	nop
 80016d4:	3724      	adds	r7, #36	; 0x24
 80016d6:	46bd      	mov	sp, r7
 80016d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016dc:	4770      	bx	lr
 80016de:	bf00      	nop
 80016e0:	40023800 	.word	0x40023800
 80016e4:	40013800 	.word	0x40013800
 80016e8:	40020000 	.word	0x40020000
 80016ec:	40020400 	.word	0x40020400
 80016f0:	40020800 	.word	0x40020800
 80016f4:	40020c00 	.word	0x40020c00
 80016f8:	40021000 	.word	0x40021000
 80016fc:	40021400 	.word	0x40021400
 8001700:	40021800 	.word	0x40021800
 8001704:	40021c00 	.word	0x40021c00
 8001708:	40013c00 	.word	0x40013c00

0800170c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800170c:	b480      	push	{r7}
 800170e:	b085      	sub	sp, #20
 8001710:	af00      	add	r7, sp, #0
 8001712:	6078      	str	r0, [r7, #4]
 8001714:	460b      	mov	r3, r1
 8001716:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	691a      	ldr	r2, [r3, #16]
 800171c:	887b      	ldrh	r3, [r7, #2]
 800171e:	4013      	ands	r3, r2
 8001720:	2b00      	cmp	r3, #0
 8001722:	d002      	beq.n	800172a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001724:	2301      	movs	r3, #1
 8001726:	73fb      	strb	r3, [r7, #15]
 8001728:	e001      	b.n	800172e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800172a:	2300      	movs	r3, #0
 800172c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800172e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001730:	4618      	mov	r0, r3
 8001732:	3714      	adds	r7, #20
 8001734:	46bd      	mov	sp, r7
 8001736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800173a:	4770      	bx	lr

0800173c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800173c:	b480      	push	{r7}
 800173e:	b083      	sub	sp, #12
 8001740:	af00      	add	r7, sp, #0
 8001742:	6078      	str	r0, [r7, #4]
 8001744:	460b      	mov	r3, r1
 8001746:	807b      	strh	r3, [r7, #2]
 8001748:	4613      	mov	r3, r2
 800174a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800174c:	787b      	ldrb	r3, [r7, #1]
 800174e:	2b00      	cmp	r3, #0
 8001750:	d003      	beq.n	800175a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001752:	887a      	ldrh	r2, [r7, #2]
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001758:	e003      	b.n	8001762 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800175a:	887b      	ldrh	r3, [r7, #2]
 800175c:	041a      	lsls	r2, r3, #16
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	619a      	str	r2, [r3, #24]
}
 8001762:	bf00      	nop
 8001764:	370c      	adds	r7, #12
 8001766:	46bd      	mov	sp, r7
 8001768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800176c:	4770      	bx	lr
	...

08001770 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001770:	b580      	push	{r7, lr}
 8001772:	b082      	sub	sp, #8
 8001774:	af00      	add	r7, sp, #0
 8001776:	4603      	mov	r3, r0
 8001778:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800177a:	4b08      	ldr	r3, [pc, #32]	; (800179c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800177c:	695a      	ldr	r2, [r3, #20]
 800177e:	88fb      	ldrh	r3, [r7, #6]
 8001780:	4013      	ands	r3, r2
 8001782:	2b00      	cmp	r3, #0
 8001784:	d006      	beq.n	8001794 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001786:	4a05      	ldr	r2, [pc, #20]	; (800179c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001788:	88fb      	ldrh	r3, [r7, #6]
 800178a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800178c:	88fb      	ldrh	r3, [r7, #6]
 800178e:	4618      	mov	r0, r3
 8001790:	f7ff f944 	bl	8000a1c <HAL_GPIO_EXTI_Callback>
  }
}
 8001794:	bf00      	nop
 8001796:	3708      	adds	r7, #8
 8001798:	46bd      	mov	sp, r7
 800179a:	bd80      	pop	{r7, pc}
 800179c:	40013c00 	.word	0x40013c00

080017a0 <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 80017a0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80017a2:	b08f      	sub	sp, #60	; 0x3c
 80017a4:	af0a      	add	r7, sp, #40	; 0x28
 80017a6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	2b00      	cmp	r3, #0
 80017ac:	d101      	bne.n	80017b2 <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 80017ae:	2301      	movs	r3, #1
 80017b0:	e054      	b.n	800185c <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	f893 32f9 	ldrb.w	r3, [r3, #761]	; 0x2f9
 80017be:	b2db      	uxtb	r3, r3
 80017c0:	2b00      	cmp	r3, #0
 80017c2:	d106      	bne.n	80017d2 <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	2200      	movs	r2, #0
 80017c8:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 80017cc:	6878      	ldr	r0, [r7, #4]
 80017ce:	f007 f87b 	bl	80088c8 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	2203      	movs	r2, #3
 80017d6:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80017da:	68fb      	ldr	r3, [r7, #12]
 80017dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80017de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80017e2:	2b00      	cmp	r3, #0
 80017e4:	d102      	bne.n	80017ec <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	2200      	movs	r2, #0
 80017ea:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	4618      	mov	r0, r3
 80017f2:	f004 f8a9 	bl	8005948 <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	603b      	str	r3, [r7, #0]
 80017fc:	687e      	ldr	r6, [r7, #4]
 80017fe:	466d      	mov	r5, sp
 8001800:	f106 0410 	add.w	r4, r6, #16
 8001804:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001806:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001808:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800180a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800180c:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001810:	e885 0003 	stmia.w	r5, {r0, r1}
 8001814:	1d33      	adds	r3, r6, #4
 8001816:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001818:	6838      	ldr	r0, [r7, #0]
 800181a:	f004 f823 	bl	8005864 <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	2101      	movs	r1, #1
 8001824:	4618      	mov	r0, r3
 8001826:	f004 f8a0 	bl	800596a <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	603b      	str	r3, [r7, #0]
 8001830:	687e      	ldr	r6, [r7, #4]
 8001832:	466d      	mov	r5, sp
 8001834:	f106 0410 	add.w	r4, r6, #16
 8001838:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800183a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800183c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800183e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001840:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001844:	e885 0003 	stmia.w	r5, {r0, r1}
 8001848:	1d33      	adds	r3, r6, #4
 800184a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800184c:	6838      	ldr	r0, [r7, #0]
 800184e:	f004 fa29 	bl	8005ca4 <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	2201      	movs	r2, #1
 8001856:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  return HAL_OK;
 800185a:	2300      	movs	r3, #0
}
 800185c:	4618      	mov	r0, r3
 800185e:	3714      	adds	r7, #20
 8001860:	46bd      	mov	sp, r7
 8001862:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001864 <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 8001864:	b590      	push	{r4, r7, lr}
 8001866:	b089      	sub	sp, #36	; 0x24
 8001868:	af04      	add	r7, sp, #16
 800186a:	6078      	str	r0, [r7, #4]
 800186c:	4608      	mov	r0, r1
 800186e:	4611      	mov	r1, r2
 8001870:	461a      	mov	r2, r3
 8001872:	4603      	mov	r3, r0
 8001874:	70fb      	strb	r3, [r7, #3]
 8001876:	460b      	mov	r3, r1
 8001878:	70bb      	strb	r3, [r7, #2]
 800187a:	4613      	mov	r3, r2
 800187c:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8001884:	2b01      	cmp	r3, #1
 8001886:	d101      	bne.n	800188c <HAL_HCD_HC_Init+0x28>
 8001888:	2302      	movs	r3, #2
 800188a:	e076      	b.n	800197a <HAL_HCD_HC_Init+0x116>
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	2201      	movs	r2, #1
 8001890:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  hhcd->hc[ch_num].do_ping = 0U;
 8001894:	78fb      	ldrb	r3, [r7, #3]
 8001896:	687a      	ldr	r2, [r7, #4]
 8001898:	212c      	movs	r1, #44	; 0x2c
 800189a:	fb01 f303 	mul.w	r3, r1, r3
 800189e:	4413      	add	r3, r2
 80018a0:	333d      	adds	r3, #61	; 0x3d
 80018a2:	2200      	movs	r2, #0
 80018a4:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 80018a6:	78fb      	ldrb	r3, [r7, #3]
 80018a8:	687a      	ldr	r2, [r7, #4]
 80018aa:	212c      	movs	r1, #44	; 0x2c
 80018ac:	fb01 f303 	mul.w	r3, r1, r3
 80018b0:	4413      	add	r3, r2
 80018b2:	3338      	adds	r3, #56	; 0x38
 80018b4:	787a      	ldrb	r2, [r7, #1]
 80018b6:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 80018b8:	78fb      	ldrb	r3, [r7, #3]
 80018ba:	687a      	ldr	r2, [r7, #4]
 80018bc:	212c      	movs	r1, #44	; 0x2c
 80018be:	fb01 f303 	mul.w	r3, r1, r3
 80018c2:	4413      	add	r3, r2
 80018c4:	3340      	adds	r3, #64	; 0x40
 80018c6:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 80018c8:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 80018ca:	78fb      	ldrb	r3, [r7, #3]
 80018cc:	687a      	ldr	r2, [r7, #4]
 80018ce:	212c      	movs	r1, #44	; 0x2c
 80018d0:	fb01 f303 	mul.w	r3, r1, r3
 80018d4:	4413      	add	r3, r2
 80018d6:	3339      	adds	r3, #57	; 0x39
 80018d8:	78fa      	ldrb	r2, [r7, #3]
 80018da:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 80018dc:	78fb      	ldrb	r3, [r7, #3]
 80018de:	687a      	ldr	r2, [r7, #4]
 80018e0:	212c      	movs	r1, #44	; 0x2c
 80018e2:	fb01 f303 	mul.w	r3, r1, r3
 80018e6:	4413      	add	r3, r2
 80018e8:	333f      	adds	r3, #63	; 0x3f
 80018ea:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 80018ee:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 80018f0:	78fb      	ldrb	r3, [r7, #3]
 80018f2:	78ba      	ldrb	r2, [r7, #2]
 80018f4:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80018f8:	b2d0      	uxtb	r0, r2
 80018fa:	687a      	ldr	r2, [r7, #4]
 80018fc:	212c      	movs	r1, #44	; 0x2c
 80018fe:	fb01 f303 	mul.w	r3, r1, r3
 8001902:	4413      	add	r3, r2
 8001904:	333a      	adds	r3, #58	; 0x3a
 8001906:	4602      	mov	r2, r0
 8001908:	701a      	strb	r2, [r3, #0]

  if ((epnum & 0x80U) == 0x80U)
 800190a:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800190e:	2b00      	cmp	r3, #0
 8001910:	da09      	bge.n	8001926 <HAL_HCD_HC_Init+0xc2>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 8001912:	78fb      	ldrb	r3, [r7, #3]
 8001914:	687a      	ldr	r2, [r7, #4]
 8001916:	212c      	movs	r1, #44	; 0x2c
 8001918:	fb01 f303 	mul.w	r3, r1, r3
 800191c:	4413      	add	r3, r2
 800191e:	333b      	adds	r3, #59	; 0x3b
 8001920:	2201      	movs	r2, #1
 8001922:	701a      	strb	r2, [r3, #0]
 8001924:	e008      	b.n	8001938 <HAL_HCD_HC_Init+0xd4>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 8001926:	78fb      	ldrb	r3, [r7, #3]
 8001928:	687a      	ldr	r2, [r7, #4]
 800192a:	212c      	movs	r1, #44	; 0x2c
 800192c:	fb01 f303 	mul.w	r3, r1, r3
 8001930:	4413      	add	r3, r2
 8001932:	333b      	adds	r3, #59	; 0x3b
 8001934:	2200      	movs	r2, #0
 8001936:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num].speed = speed;
 8001938:	78fb      	ldrb	r3, [r7, #3]
 800193a:	687a      	ldr	r2, [r7, #4]
 800193c:	212c      	movs	r1, #44	; 0x2c
 800193e:	fb01 f303 	mul.w	r3, r1, r3
 8001942:	4413      	add	r3, r2
 8001944:	333c      	adds	r3, #60	; 0x3c
 8001946:	f897 2020 	ldrb.w	r2, [r7, #32]
 800194a:	701a      	strb	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance,
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	6818      	ldr	r0, [r3, #0]
 8001950:	787c      	ldrb	r4, [r7, #1]
 8001952:	78ba      	ldrb	r2, [r7, #2]
 8001954:	78f9      	ldrb	r1, [r7, #3]
 8001956:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8001958:	9302      	str	r3, [sp, #8]
 800195a:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800195e:	9301      	str	r3, [sp, #4]
 8001960:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001964:	9300      	str	r3, [sp, #0]
 8001966:	4623      	mov	r3, r4
 8001968:	f004 fb22 	bl	8005fb0 <USB_HC_Init>
 800196c:	4603      	mov	r3, r0
 800196e:	73fb      	strb	r3, [r7, #15]
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	2200      	movs	r2, #0
 8001974:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 8001978:	7bfb      	ldrb	r3, [r7, #15]
}
 800197a:	4618      	mov	r0, r3
 800197c:	3714      	adds	r7, #20
 800197e:	46bd      	mov	sp, r7
 8001980:	bd90      	pop	{r4, r7, pc}

08001982 <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8001982:	b580      	push	{r7, lr}
 8001984:	b084      	sub	sp, #16
 8001986:	af00      	add	r7, sp, #0
 8001988:	6078      	str	r0, [r7, #4]
 800198a:	460b      	mov	r3, r1
 800198c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 800198e:	2300      	movs	r3, #0
 8001990:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8001998:	2b01      	cmp	r3, #1
 800199a:	d101      	bne.n	80019a0 <HAL_HCD_HC_Halt+0x1e>
 800199c:	2302      	movs	r3, #2
 800199e:	e00f      	b.n	80019c0 <HAL_HCD_HC_Halt+0x3e>
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	2201      	movs	r2, #1
 80019a4:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	78fa      	ldrb	r2, [r7, #3]
 80019ae:	4611      	mov	r1, r2
 80019b0:	4618      	mov	r0, r3
 80019b2:	f004 fd72 	bl	800649a <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	2200      	movs	r2, #0
 80019ba:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 80019be:	7bfb      	ldrb	r3, [r7, #15]
}
 80019c0:	4618      	mov	r0, r3
 80019c2:	3710      	adds	r7, #16
 80019c4:	46bd      	mov	sp, r7
 80019c6:	bd80      	pop	{r7, pc}

080019c8 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 80019c8:	b580      	push	{r7, lr}
 80019ca:	b082      	sub	sp, #8
 80019cc:	af00      	add	r7, sp, #0
 80019ce:	6078      	str	r0, [r7, #4]
 80019d0:	4608      	mov	r0, r1
 80019d2:	4611      	mov	r1, r2
 80019d4:	461a      	mov	r2, r3
 80019d6:	4603      	mov	r3, r0
 80019d8:	70fb      	strb	r3, [r7, #3]
 80019da:	460b      	mov	r3, r1
 80019dc:	70bb      	strb	r3, [r7, #2]
 80019de:	4613      	mov	r3, r2
 80019e0:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 80019e2:	78fb      	ldrb	r3, [r7, #3]
 80019e4:	687a      	ldr	r2, [r7, #4]
 80019e6:	212c      	movs	r1, #44	; 0x2c
 80019e8:	fb01 f303 	mul.w	r3, r1, r3
 80019ec:	4413      	add	r3, r2
 80019ee:	333b      	adds	r3, #59	; 0x3b
 80019f0:	78ba      	ldrb	r2, [r7, #2]
 80019f2:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 80019f4:	78fb      	ldrb	r3, [r7, #3]
 80019f6:	687a      	ldr	r2, [r7, #4]
 80019f8:	212c      	movs	r1, #44	; 0x2c
 80019fa:	fb01 f303 	mul.w	r3, r1, r3
 80019fe:	4413      	add	r3, r2
 8001a00:	333f      	adds	r3, #63	; 0x3f
 8001a02:	787a      	ldrb	r2, [r7, #1]
 8001a04:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 8001a06:	7c3b      	ldrb	r3, [r7, #16]
 8001a08:	2b00      	cmp	r3, #0
 8001a0a:	d112      	bne.n	8001a32 <HAL_HCD_HC_SubmitRequest+0x6a>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 8001a0c:	78fb      	ldrb	r3, [r7, #3]
 8001a0e:	687a      	ldr	r2, [r7, #4]
 8001a10:	212c      	movs	r1, #44	; 0x2c
 8001a12:	fb01 f303 	mul.w	r3, r1, r3
 8001a16:	4413      	add	r3, r2
 8001a18:	3342      	adds	r3, #66	; 0x42
 8001a1a:	2203      	movs	r2, #3
 8001a1c:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 8001a1e:	78fb      	ldrb	r3, [r7, #3]
 8001a20:	687a      	ldr	r2, [r7, #4]
 8001a22:	212c      	movs	r1, #44	; 0x2c
 8001a24:	fb01 f303 	mul.w	r3, r1, r3
 8001a28:	4413      	add	r3, r2
 8001a2a:	333d      	adds	r3, #61	; 0x3d
 8001a2c:	7f3a      	ldrb	r2, [r7, #28]
 8001a2e:	701a      	strb	r2, [r3, #0]
 8001a30:	e008      	b.n	8001a44 <HAL_HCD_HC_SubmitRequest+0x7c>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001a32:	78fb      	ldrb	r3, [r7, #3]
 8001a34:	687a      	ldr	r2, [r7, #4]
 8001a36:	212c      	movs	r1, #44	; 0x2c
 8001a38:	fb01 f303 	mul.w	r3, r1, r3
 8001a3c:	4413      	add	r3, r2
 8001a3e:	3342      	adds	r3, #66	; 0x42
 8001a40:	2202      	movs	r2, #2
 8001a42:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 8001a44:	787b      	ldrb	r3, [r7, #1]
 8001a46:	2b03      	cmp	r3, #3
 8001a48:	f200 80c6 	bhi.w	8001bd8 <HAL_HCD_HC_SubmitRequest+0x210>
 8001a4c:	a201      	add	r2, pc, #4	; (adr r2, 8001a54 <HAL_HCD_HC_SubmitRequest+0x8c>)
 8001a4e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001a52:	bf00      	nop
 8001a54:	08001a65 	.word	0x08001a65
 8001a58:	08001bc5 	.word	0x08001bc5
 8001a5c:	08001ac9 	.word	0x08001ac9
 8001a60:	08001b47 	.word	0x08001b47
  {
    case EP_TYPE_CTRL:
      if ((token == 1U) && (direction == 0U)) /*send data */
 8001a64:	7c3b      	ldrb	r3, [r7, #16]
 8001a66:	2b01      	cmp	r3, #1
 8001a68:	f040 80b8 	bne.w	8001bdc <HAL_HCD_HC_SubmitRequest+0x214>
 8001a6c:	78bb      	ldrb	r3, [r7, #2]
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	f040 80b4 	bne.w	8001bdc <HAL_HCD_HC_SubmitRequest+0x214>
      {
        if (length == 0U)
 8001a74:	8b3b      	ldrh	r3, [r7, #24]
 8001a76:	2b00      	cmp	r3, #0
 8001a78:	d108      	bne.n	8001a8c <HAL_HCD_HC_SubmitRequest+0xc4>
        {
          /* For Status OUT stage, Length==0, Status Out PID = 1 */
          hhcd->hc[ch_num].toggle_out = 1U;
 8001a7a:	78fb      	ldrb	r3, [r7, #3]
 8001a7c:	687a      	ldr	r2, [r7, #4]
 8001a7e:	212c      	movs	r1, #44	; 0x2c
 8001a80:	fb01 f303 	mul.w	r3, r1, r3
 8001a84:	4413      	add	r3, r2
 8001a86:	3355      	adds	r3, #85	; 0x55
 8001a88:	2201      	movs	r2, #1
 8001a8a:	701a      	strb	r2, [r3, #0]
        }

        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8001a8c:	78fb      	ldrb	r3, [r7, #3]
 8001a8e:	687a      	ldr	r2, [r7, #4]
 8001a90:	212c      	movs	r1, #44	; 0x2c
 8001a92:	fb01 f303 	mul.w	r3, r1, r3
 8001a96:	4413      	add	r3, r2
 8001a98:	3355      	adds	r3, #85	; 0x55
 8001a9a:	781b      	ldrb	r3, [r3, #0]
 8001a9c:	2b00      	cmp	r3, #0
 8001a9e:	d109      	bne.n	8001ab4 <HAL_HCD_HC_SubmitRequest+0xec>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001aa0:	78fb      	ldrb	r3, [r7, #3]
 8001aa2:	687a      	ldr	r2, [r7, #4]
 8001aa4:	212c      	movs	r1, #44	; 0x2c
 8001aa6:	fb01 f303 	mul.w	r3, r1, r3
 8001aaa:	4413      	add	r3, r2
 8001aac:	3342      	adds	r3, #66	; 0x42
 8001aae:	2200      	movs	r2, #0
 8001ab0:	701a      	strb	r2, [r3, #0]
        {
          /* Put the PID 1 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8001ab2:	e093      	b.n	8001bdc <HAL_HCD_HC_SubmitRequest+0x214>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001ab4:	78fb      	ldrb	r3, [r7, #3]
 8001ab6:	687a      	ldr	r2, [r7, #4]
 8001ab8:	212c      	movs	r1, #44	; 0x2c
 8001aba:	fb01 f303 	mul.w	r3, r1, r3
 8001abe:	4413      	add	r3, r2
 8001ac0:	3342      	adds	r3, #66	; 0x42
 8001ac2:	2202      	movs	r2, #2
 8001ac4:	701a      	strb	r2, [r3, #0]
      break;
 8001ac6:	e089      	b.n	8001bdc <HAL_HCD_HC_SubmitRequest+0x214>

    case EP_TYPE_BULK:
      if (direction == 0U)
 8001ac8:	78bb      	ldrb	r3, [r7, #2]
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	d11d      	bne.n	8001b0a <HAL_HCD_HC_SubmitRequest+0x142>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8001ace:	78fb      	ldrb	r3, [r7, #3]
 8001ad0:	687a      	ldr	r2, [r7, #4]
 8001ad2:	212c      	movs	r1, #44	; 0x2c
 8001ad4:	fb01 f303 	mul.w	r3, r1, r3
 8001ad8:	4413      	add	r3, r2
 8001ada:	3355      	adds	r3, #85	; 0x55
 8001adc:	781b      	ldrb	r3, [r3, #0]
 8001ade:	2b00      	cmp	r3, #0
 8001ae0:	d109      	bne.n	8001af6 <HAL_HCD_HC_SubmitRequest+0x12e>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001ae2:	78fb      	ldrb	r3, [r7, #3]
 8001ae4:	687a      	ldr	r2, [r7, #4]
 8001ae6:	212c      	movs	r1, #44	; 0x2c
 8001ae8:	fb01 f303 	mul.w	r3, r1, r3
 8001aec:	4413      	add	r3, r2
 8001aee:	3342      	adds	r3, #66	; 0x42
 8001af0:	2200      	movs	r2, #0
 8001af2:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 8001af4:	e073      	b.n	8001bde <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001af6:	78fb      	ldrb	r3, [r7, #3]
 8001af8:	687a      	ldr	r2, [r7, #4]
 8001afa:	212c      	movs	r1, #44	; 0x2c
 8001afc:	fb01 f303 	mul.w	r3, r1, r3
 8001b00:	4413      	add	r3, r2
 8001b02:	3342      	adds	r3, #66	; 0x42
 8001b04:	2202      	movs	r2, #2
 8001b06:	701a      	strb	r2, [r3, #0]
      break;
 8001b08:	e069      	b.n	8001bde <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8001b0a:	78fb      	ldrb	r3, [r7, #3]
 8001b0c:	687a      	ldr	r2, [r7, #4]
 8001b0e:	212c      	movs	r1, #44	; 0x2c
 8001b10:	fb01 f303 	mul.w	r3, r1, r3
 8001b14:	4413      	add	r3, r2
 8001b16:	3354      	adds	r3, #84	; 0x54
 8001b18:	781b      	ldrb	r3, [r3, #0]
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	d109      	bne.n	8001b32 <HAL_HCD_HC_SubmitRequest+0x16a>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001b1e:	78fb      	ldrb	r3, [r7, #3]
 8001b20:	687a      	ldr	r2, [r7, #4]
 8001b22:	212c      	movs	r1, #44	; 0x2c
 8001b24:	fb01 f303 	mul.w	r3, r1, r3
 8001b28:	4413      	add	r3, r2
 8001b2a:	3342      	adds	r3, #66	; 0x42
 8001b2c:	2200      	movs	r2, #0
 8001b2e:	701a      	strb	r2, [r3, #0]
      break;
 8001b30:	e055      	b.n	8001bde <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001b32:	78fb      	ldrb	r3, [r7, #3]
 8001b34:	687a      	ldr	r2, [r7, #4]
 8001b36:	212c      	movs	r1, #44	; 0x2c
 8001b38:	fb01 f303 	mul.w	r3, r1, r3
 8001b3c:	4413      	add	r3, r2
 8001b3e:	3342      	adds	r3, #66	; 0x42
 8001b40:	2202      	movs	r2, #2
 8001b42:	701a      	strb	r2, [r3, #0]
      break;
 8001b44:	e04b      	b.n	8001bde <HAL_HCD_HC_SubmitRequest+0x216>
    case EP_TYPE_INTR:
      if (direction == 0U)
 8001b46:	78bb      	ldrb	r3, [r7, #2]
 8001b48:	2b00      	cmp	r3, #0
 8001b4a:	d11d      	bne.n	8001b88 <HAL_HCD_HC_SubmitRequest+0x1c0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8001b4c:	78fb      	ldrb	r3, [r7, #3]
 8001b4e:	687a      	ldr	r2, [r7, #4]
 8001b50:	212c      	movs	r1, #44	; 0x2c
 8001b52:	fb01 f303 	mul.w	r3, r1, r3
 8001b56:	4413      	add	r3, r2
 8001b58:	3355      	adds	r3, #85	; 0x55
 8001b5a:	781b      	ldrb	r3, [r3, #0]
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	d109      	bne.n	8001b74 <HAL_HCD_HC_SubmitRequest+0x1ac>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001b60:	78fb      	ldrb	r3, [r7, #3]
 8001b62:	687a      	ldr	r2, [r7, #4]
 8001b64:	212c      	movs	r1, #44	; 0x2c
 8001b66:	fb01 f303 	mul.w	r3, r1, r3
 8001b6a:	4413      	add	r3, r2
 8001b6c:	3342      	adds	r3, #66	; 0x42
 8001b6e:	2200      	movs	r2, #0
 8001b70:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8001b72:	e034      	b.n	8001bde <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001b74:	78fb      	ldrb	r3, [r7, #3]
 8001b76:	687a      	ldr	r2, [r7, #4]
 8001b78:	212c      	movs	r1, #44	; 0x2c
 8001b7a:	fb01 f303 	mul.w	r3, r1, r3
 8001b7e:	4413      	add	r3, r2
 8001b80:	3342      	adds	r3, #66	; 0x42
 8001b82:	2202      	movs	r2, #2
 8001b84:	701a      	strb	r2, [r3, #0]
      break;
 8001b86:	e02a      	b.n	8001bde <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8001b88:	78fb      	ldrb	r3, [r7, #3]
 8001b8a:	687a      	ldr	r2, [r7, #4]
 8001b8c:	212c      	movs	r1, #44	; 0x2c
 8001b8e:	fb01 f303 	mul.w	r3, r1, r3
 8001b92:	4413      	add	r3, r2
 8001b94:	3354      	adds	r3, #84	; 0x54
 8001b96:	781b      	ldrb	r3, [r3, #0]
 8001b98:	2b00      	cmp	r3, #0
 8001b9a:	d109      	bne.n	8001bb0 <HAL_HCD_HC_SubmitRequest+0x1e8>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001b9c:	78fb      	ldrb	r3, [r7, #3]
 8001b9e:	687a      	ldr	r2, [r7, #4]
 8001ba0:	212c      	movs	r1, #44	; 0x2c
 8001ba2:	fb01 f303 	mul.w	r3, r1, r3
 8001ba6:	4413      	add	r3, r2
 8001ba8:	3342      	adds	r3, #66	; 0x42
 8001baa:	2200      	movs	r2, #0
 8001bac:	701a      	strb	r2, [r3, #0]
      break;
 8001bae:	e016      	b.n	8001bde <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001bb0:	78fb      	ldrb	r3, [r7, #3]
 8001bb2:	687a      	ldr	r2, [r7, #4]
 8001bb4:	212c      	movs	r1, #44	; 0x2c
 8001bb6:	fb01 f303 	mul.w	r3, r1, r3
 8001bba:	4413      	add	r3, r2
 8001bbc:	3342      	adds	r3, #66	; 0x42
 8001bbe:	2202      	movs	r2, #2
 8001bc0:	701a      	strb	r2, [r3, #0]
      break;
 8001bc2:	e00c      	b.n	8001bde <HAL_HCD_HC_SubmitRequest+0x216>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001bc4:	78fb      	ldrb	r3, [r7, #3]
 8001bc6:	687a      	ldr	r2, [r7, #4]
 8001bc8:	212c      	movs	r1, #44	; 0x2c
 8001bca:	fb01 f303 	mul.w	r3, r1, r3
 8001bce:	4413      	add	r3, r2
 8001bd0:	3342      	adds	r3, #66	; 0x42
 8001bd2:	2200      	movs	r2, #0
 8001bd4:	701a      	strb	r2, [r3, #0]
      break;
 8001bd6:	e002      	b.n	8001bde <HAL_HCD_HC_SubmitRequest+0x216>

    default:
      break;
 8001bd8:	bf00      	nop
 8001bda:	e000      	b.n	8001bde <HAL_HCD_HC_SubmitRequest+0x216>
      break;
 8001bdc:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 8001bde:	78fb      	ldrb	r3, [r7, #3]
 8001be0:	687a      	ldr	r2, [r7, #4]
 8001be2:	212c      	movs	r1, #44	; 0x2c
 8001be4:	fb01 f303 	mul.w	r3, r1, r3
 8001be8:	4413      	add	r3, r2
 8001bea:	3344      	adds	r3, #68	; 0x44
 8001bec:	697a      	ldr	r2, [r7, #20]
 8001bee:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 8001bf0:	78fb      	ldrb	r3, [r7, #3]
 8001bf2:	8b3a      	ldrh	r2, [r7, #24]
 8001bf4:	6879      	ldr	r1, [r7, #4]
 8001bf6:	202c      	movs	r0, #44	; 0x2c
 8001bf8:	fb00 f303 	mul.w	r3, r0, r3
 8001bfc:	440b      	add	r3, r1
 8001bfe:	334c      	adds	r3, #76	; 0x4c
 8001c00:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 8001c02:	78fb      	ldrb	r3, [r7, #3]
 8001c04:	687a      	ldr	r2, [r7, #4]
 8001c06:	212c      	movs	r1, #44	; 0x2c
 8001c08:	fb01 f303 	mul.w	r3, r1, r3
 8001c0c:	4413      	add	r3, r2
 8001c0e:	3360      	adds	r3, #96	; 0x60
 8001c10:	2200      	movs	r2, #0
 8001c12:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 8001c14:	78fb      	ldrb	r3, [r7, #3]
 8001c16:	687a      	ldr	r2, [r7, #4]
 8001c18:	212c      	movs	r1, #44	; 0x2c
 8001c1a:	fb01 f303 	mul.w	r3, r1, r3
 8001c1e:	4413      	add	r3, r2
 8001c20:	3350      	adds	r3, #80	; 0x50
 8001c22:	2200      	movs	r2, #0
 8001c24:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8001c26:	78fb      	ldrb	r3, [r7, #3]
 8001c28:	687a      	ldr	r2, [r7, #4]
 8001c2a:	212c      	movs	r1, #44	; 0x2c
 8001c2c:	fb01 f303 	mul.w	r3, r1, r3
 8001c30:	4413      	add	r3, r2
 8001c32:	3339      	adds	r3, #57	; 0x39
 8001c34:	78fa      	ldrb	r2, [r7, #3]
 8001c36:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 8001c38:	78fb      	ldrb	r3, [r7, #3]
 8001c3a:	687a      	ldr	r2, [r7, #4]
 8001c3c:	212c      	movs	r1, #44	; 0x2c
 8001c3e:	fb01 f303 	mul.w	r3, r1, r3
 8001c42:	4413      	add	r3, r2
 8001c44:	3361      	adds	r3, #97	; 0x61
 8001c46:	2200      	movs	r2, #0
 8001c48:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	6818      	ldr	r0, [r3, #0]
 8001c4e:	78fb      	ldrb	r3, [r7, #3]
 8001c50:	222c      	movs	r2, #44	; 0x2c
 8001c52:	fb02 f303 	mul.w	r3, r2, r3
 8001c56:	3338      	adds	r3, #56	; 0x38
 8001c58:	687a      	ldr	r2, [r7, #4]
 8001c5a:	18d1      	adds	r1, r2, r3
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	691b      	ldr	r3, [r3, #16]
 8001c60:	b2db      	uxtb	r3, r3
 8001c62:	461a      	mov	r2, r3
 8001c64:	f004 fac6 	bl	80061f4 <USB_HC_StartXfer>
 8001c68:	4603      	mov	r3, r0
}
 8001c6a:	4618      	mov	r0, r3
 8001c6c:	3708      	adds	r7, #8
 8001c6e:	46bd      	mov	sp, r7
 8001c70:	bd80      	pop	{r7, pc}
 8001c72:	bf00      	nop

08001c74 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8001c74:	b580      	push	{r7, lr}
 8001c76:	b086      	sub	sp, #24
 8001c78:	af00      	add	r7, sp, #0
 8001c7a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001c82:	693b      	ldr	r3, [r7, #16]
 8001c84:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	4618      	mov	r0, r3
 8001c8c:	f003 ffc7 	bl	8005c1e <USB_GetMode>
 8001c90:	4603      	mov	r3, r0
 8001c92:	2b01      	cmp	r3, #1
 8001c94:	f040 80f6 	bne.w	8001e84 <HAL_HCD_IRQHandler+0x210>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	4618      	mov	r0, r3
 8001c9e:	f003 ffab 	bl	8005bf8 <USB_ReadInterrupts>
 8001ca2:	4603      	mov	r3, r0
 8001ca4:	2b00      	cmp	r3, #0
 8001ca6:	f000 80ec 	beq.w	8001e82 <HAL_HCD_IRQHandler+0x20e>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	4618      	mov	r0, r3
 8001cb0:	f003 ffa2 	bl	8005bf8 <USB_ReadInterrupts>
 8001cb4:	4603      	mov	r3, r0
 8001cb6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001cba:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8001cbe:	d104      	bne.n	8001cca <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8001cc8:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	4618      	mov	r0, r3
 8001cd0:	f003 ff92 	bl	8005bf8 <USB_ReadInterrupts>
 8001cd4:	4603      	mov	r3, r0
 8001cd6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001cda:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001cde:	d104      	bne.n	8001cea <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8001ce8:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	4618      	mov	r0, r3
 8001cf0:	f003 ff82 	bl	8005bf8 <USB_ReadInterrupts>
 8001cf4:	4603      	mov	r3, r0
 8001cf6:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001cfa:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8001cfe:	d104      	bne.n	8001d0a <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8001d08:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	4618      	mov	r0, r3
 8001d10:	f003 ff72 	bl	8005bf8 <USB_ReadInterrupts>
 8001d14:	4603      	mov	r3, r0
 8001d16:	f003 0302 	and.w	r3, r3, #2
 8001d1a:	2b02      	cmp	r3, #2
 8001d1c:	d103      	bne.n	8001d26 <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	2202      	movs	r2, #2
 8001d24:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	4618      	mov	r0, r3
 8001d2c:	f003 ff64 	bl	8005bf8 <USB_ReadInterrupts>
 8001d30:	4603      	mov	r3, r0
 8001d32:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001d36:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001d3a:	d11c      	bne.n	8001d76 <HAL_HCD_IRQHandler+0x102>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8001d44:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 8001d46:	68fb      	ldr	r3, [r7, #12]
 8001d48:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	f003 0301 	and.w	r3, r3, #1
 8001d52:	2b00      	cmp	r3, #0
 8001d54:	d10f      	bne.n	8001d76 <HAL_HCD_IRQHandler+0x102>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 8001d56:	2110      	movs	r1, #16
 8001d58:	6938      	ldr	r0, [r7, #16]
 8001d5a:	f003 fe53 	bl	8005a04 <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 8001d5e:	6938      	ldr	r0, [r7, #16]
 8001d60:	f003 fe84 	bl	8005a6c <USB_FlushRxFifo>

        /* Restore FS Clock */
        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	2101      	movs	r1, #1
 8001d6a:	4618      	mov	r0, r3
 8001d6c:	f004 f85a 	bl	8005e24 <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 8001d70:	6878      	ldr	r0, [r7, #4]
 8001d72:	f006 fe27 	bl	80089c4 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	4618      	mov	r0, r3
 8001d7c:	f003 ff3c 	bl	8005bf8 <USB_ReadInterrupts>
 8001d80:	4603      	mov	r3, r0
 8001d82:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001d86:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001d8a:	d102      	bne.n	8001d92 <HAL_HCD_IRQHandler+0x11e>
    {
      HCD_Port_IRQHandler(hhcd);
 8001d8c:	6878      	ldr	r0, [r7, #4]
 8001d8e:	f001 f89e 	bl	8002ece <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	4618      	mov	r0, r3
 8001d98:	f003 ff2e 	bl	8005bf8 <USB_ReadInterrupts>
 8001d9c:	4603      	mov	r3, r0
 8001d9e:	f003 0308 	and.w	r3, r3, #8
 8001da2:	2b08      	cmp	r3, #8
 8001da4:	d106      	bne.n	8001db4 <HAL_HCD_IRQHandler+0x140>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8001da6:	6878      	ldr	r0, [r7, #4]
 8001da8:	f006 fdf0 	bl	800898c <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	2208      	movs	r2, #8
 8001db2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	4618      	mov	r0, r3
 8001dba:	f003 ff1d 	bl	8005bf8 <USB_ReadInterrupts>
 8001dbe:	4603      	mov	r3, r0
 8001dc0:	f003 0310 	and.w	r3, r3, #16
 8001dc4:	2b10      	cmp	r3, #16
 8001dc6:	d101      	bne.n	8001dcc <HAL_HCD_IRQHandler+0x158>
 8001dc8:	2301      	movs	r3, #1
 8001dca:	e000      	b.n	8001dce <HAL_HCD_IRQHandler+0x15a>
 8001dcc:	2300      	movs	r3, #0
 8001dce:	2b00      	cmp	r3, #0
 8001dd0:	d012      	beq.n	8001df8 <HAL_HCD_IRQHandler+0x184>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	699a      	ldr	r2, [r3, #24]
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	f022 0210 	bic.w	r2, r2, #16
 8001de0:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8001de2:	6878      	ldr	r0, [r7, #4]
 8001de4:	f000 ffa1 	bl	8002d2a <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	699a      	ldr	r2, [r3, #24]
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	f042 0210 	orr.w	r2, r2, #16
 8001df6:	619a      	str	r2, [r3, #24]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	4618      	mov	r0, r3
 8001dfe:	f003 fefb 	bl	8005bf8 <USB_ReadInterrupts>
 8001e02:	4603      	mov	r3, r0
 8001e04:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e08:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8001e0c:	d13a      	bne.n	8001e84 <HAL_HCD_IRQHandler+0x210>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	4618      	mov	r0, r3
 8001e14:	f004 fb30 	bl	8006478 <USB_HC_ReadInterrupt>
 8001e18:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8001e1a:	2300      	movs	r3, #0
 8001e1c:	617b      	str	r3, [r7, #20]
 8001e1e:	e025      	b.n	8001e6c <HAL_HCD_IRQHandler+0x1f8>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8001e20:	697b      	ldr	r3, [r7, #20]
 8001e22:	f003 030f 	and.w	r3, r3, #15
 8001e26:	68ba      	ldr	r2, [r7, #8]
 8001e28:	fa22 f303 	lsr.w	r3, r2, r3
 8001e2c:	f003 0301 	and.w	r3, r3, #1
 8001e30:	2b00      	cmp	r3, #0
 8001e32:	d018      	beq.n	8001e66 <HAL_HCD_IRQHandler+0x1f2>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8001e34:	697b      	ldr	r3, [r7, #20]
 8001e36:	015a      	lsls	r2, r3, #5
 8001e38:	68fb      	ldr	r3, [r7, #12]
 8001e3a:	4413      	add	r3, r2
 8001e3c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001e46:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001e4a:	d106      	bne.n	8001e5a <HAL_HCD_IRQHandler+0x1e6>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8001e4c:	697b      	ldr	r3, [r7, #20]
 8001e4e:	b2db      	uxtb	r3, r3
 8001e50:	4619      	mov	r1, r3
 8001e52:	6878      	ldr	r0, [r7, #4]
 8001e54:	f000 f8ab 	bl	8001fae <HCD_HC_IN_IRQHandler>
 8001e58:	e005      	b.n	8001e66 <HAL_HCD_IRQHandler+0x1f2>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8001e5a:	697b      	ldr	r3, [r7, #20]
 8001e5c:	b2db      	uxtb	r3, r3
 8001e5e:	4619      	mov	r1, r3
 8001e60:	6878      	ldr	r0, [r7, #4]
 8001e62:	f000 fbf9 	bl	8002658 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8001e66:	697b      	ldr	r3, [r7, #20]
 8001e68:	3301      	adds	r3, #1
 8001e6a:	617b      	str	r3, [r7, #20]
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	689b      	ldr	r3, [r3, #8]
 8001e70:	697a      	ldr	r2, [r7, #20]
 8001e72:	429a      	cmp	r2, r3
 8001e74:	d3d4      	bcc.n	8001e20 <HAL_HCD_IRQHandler+0x1ac>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001e7e:	615a      	str	r2, [r3, #20]
 8001e80:	e000      	b.n	8001e84 <HAL_HCD_IRQHandler+0x210>
      return;
 8001e82:	bf00      	nop
    }
  }
}
 8001e84:	3718      	adds	r7, #24
 8001e86:	46bd      	mov	sp, r7
 8001e88:	bd80      	pop	{r7, pc}

08001e8a <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 8001e8a:	b580      	push	{r7, lr}
 8001e8c:	b082      	sub	sp, #8
 8001e8e:	af00      	add	r7, sp, #0
 8001e90:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8001e98:	2b01      	cmp	r3, #1
 8001e9a:	d101      	bne.n	8001ea0 <HAL_HCD_Start+0x16>
 8001e9c:	2302      	movs	r3, #2
 8001e9e:	e013      	b.n	8001ec8 <HAL_HCD_Start+0x3e>
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	2201      	movs	r2, #1
 8001ea4:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  /* Enable port power */
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	2101      	movs	r1, #1
 8001eae:	4618      	mov	r0, r3
 8001eb0:	f004 f81c 	bl	8005eec <USB_DriveVbus>

  /* Enable global interrupt */
  __HAL_HCD_ENABLE(hhcd);
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	4618      	mov	r0, r3
 8001eba:	f003 fd34 	bl	8005926 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hhcd);
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	2200      	movs	r2, #0
 8001ec2:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 8001ec6:	2300      	movs	r3, #0
}
 8001ec8:	4618      	mov	r0, r3
 8001eca:	3708      	adds	r7, #8
 8001ecc:	46bd      	mov	sp, r7
 8001ece:	bd80      	pop	{r7, pc}

08001ed0 <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 8001ed0:	b580      	push	{r7, lr}
 8001ed2:	b082      	sub	sp, #8
 8001ed4:	af00      	add	r7, sp, #0
 8001ed6:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8001ede:	2b01      	cmp	r3, #1
 8001ee0:	d101      	bne.n	8001ee6 <HAL_HCD_Stop+0x16>
 8001ee2:	2302      	movs	r3, #2
 8001ee4:	e00d      	b.n	8001f02 <HAL_HCD_Stop+0x32>
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	2201      	movs	r2, #1
 8001eea:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_StopHost(hhcd->Instance);
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	4618      	mov	r0, r3
 8001ef4:	f004 fc0a 	bl	800670c <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	2200      	movs	r2, #0
 8001efc:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 8001f00:	2300      	movs	r3, #0
}
 8001f02:	4618      	mov	r0, r3
 8001f04:	3708      	adds	r7, #8
 8001f06:	46bd      	mov	sp, r7
 8001f08:	bd80      	pop	{r7, pc}

08001f0a <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 8001f0a:	b580      	push	{r7, lr}
 8001f0c:	b082      	sub	sp, #8
 8001f0e:	af00      	add	r7, sp, #0
 8001f10:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	4618      	mov	r0, r3
 8001f18:	f003 ffbe 	bl	8005e98 <USB_ResetPort>
 8001f1c:	4603      	mov	r3, r0
}
 8001f1e:	4618      	mov	r0, r3
 8001f20:	3708      	adds	r7, #8
 8001f22:	46bd      	mov	sp, r7
 8001f24:	bd80      	pop	{r7, pc}

08001f26 <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8001f26:	b480      	push	{r7}
 8001f28:	b083      	sub	sp, #12
 8001f2a:	af00      	add	r7, sp, #0
 8001f2c:	6078      	str	r0, [r7, #4]
 8001f2e:	460b      	mov	r3, r1
 8001f30:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 8001f32:	78fb      	ldrb	r3, [r7, #3]
 8001f34:	687a      	ldr	r2, [r7, #4]
 8001f36:	212c      	movs	r1, #44	; 0x2c
 8001f38:	fb01 f303 	mul.w	r3, r1, r3
 8001f3c:	4413      	add	r3, r2
 8001f3e:	3360      	adds	r3, #96	; 0x60
 8001f40:	781b      	ldrb	r3, [r3, #0]
}
 8001f42:	4618      	mov	r0, r3
 8001f44:	370c      	adds	r7, #12
 8001f46:	46bd      	mov	sp, r7
 8001f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f4c:	4770      	bx	lr

08001f4e <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8001f4e:	b480      	push	{r7}
 8001f50:	b083      	sub	sp, #12
 8001f52:	af00      	add	r7, sp, #0
 8001f54:	6078      	str	r0, [r7, #4]
 8001f56:	460b      	mov	r3, r1
 8001f58:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 8001f5a:	78fb      	ldrb	r3, [r7, #3]
 8001f5c:	687a      	ldr	r2, [r7, #4]
 8001f5e:	212c      	movs	r1, #44	; 0x2c
 8001f60:	fb01 f303 	mul.w	r3, r1, r3
 8001f64:	4413      	add	r3, r2
 8001f66:	3350      	adds	r3, #80	; 0x50
 8001f68:	681b      	ldr	r3, [r3, #0]
}
 8001f6a:	4618      	mov	r0, r3
 8001f6c:	370c      	adds	r7, #12
 8001f6e:	46bd      	mov	sp, r7
 8001f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f74:	4770      	bx	lr

08001f76 <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 8001f76:	b580      	push	{r7, lr}
 8001f78:	b082      	sub	sp, #8
 8001f7a:	af00      	add	r7, sp, #0
 8001f7c:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	4618      	mov	r0, r3
 8001f84:	f004 f802 	bl	8005f8c <USB_GetCurrentFrame>
 8001f88:	4603      	mov	r3, r0
}
 8001f8a:	4618      	mov	r0, r3
 8001f8c:	3708      	adds	r7, #8
 8001f8e:	46bd      	mov	sp, r7
 8001f90:	bd80      	pop	{r7, pc}

08001f92 <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 8001f92:	b580      	push	{r7, lr}
 8001f94:	b082      	sub	sp, #8
 8001f96:	af00      	add	r7, sp, #0
 8001f98:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	4618      	mov	r0, r3
 8001fa0:	f003 ffdd 	bl	8005f5e <USB_GetHostSpeed>
 8001fa4:	4603      	mov	r3, r0
}
 8001fa6:	4618      	mov	r0, r3
 8001fa8:	3708      	adds	r7, #8
 8001faa:	46bd      	mov	sp, r7
 8001fac:	bd80      	pop	{r7, pc}

08001fae <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8001fae:	b580      	push	{r7, lr}
 8001fb0:	b086      	sub	sp, #24
 8001fb2:	af00      	add	r7, sp, #0
 8001fb4:	6078      	str	r0, [r7, #4]
 8001fb6:	460b      	mov	r3, r1
 8001fb8:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001fc0:	697b      	ldr	r3, [r7, #20]
 8001fc2:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 8001fc4:	78fb      	ldrb	r3, [r7, #3]
 8001fc6:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8001fc8:	68fb      	ldr	r3, [r7, #12]
 8001fca:	015a      	lsls	r2, r3, #5
 8001fcc:	693b      	ldr	r3, [r7, #16]
 8001fce:	4413      	add	r3, r2
 8001fd0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001fd4:	689b      	ldr	r3, [r3, #8]
 8001fd6:	f003 0304 	and.w	r3, r3, #4
 8001fda:	2b04      	cmp	r3, #4
 8001fdc:	d11a      	bne.n	8002014 <HCD_HC_IN_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8001fde:	68fb      	ldr	r3, [r7, #12]
 8001fe0:	015a      	lsls	r2, r3, #5
 8001fe2:	693b      	ldr	r3, [r7, #16]
 8001fe4:	4413      	add	r3, r2
 8001fe6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001fea:	461a      	mov	r2, r3
 8001fec:	2304      	movs	r3, #4
 8001fee:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8001ff0:	687a      	ldr	r2, [r7, #4]
 8001ff2:	68fb      	ldr	r3, [r7, #12]
 8001ff4:	212c      	movs	r1, #44	; 0x2c
 8001ff6:	fb01 f303 	mul.w	r3, r1, r3
 8001ffa:	4413      	add	r3, r2
 8001ffc:	3361      	adds	r3, #97	; 0x61
 8001ffe:	2206      	movs	r2, #6
 8002000:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	68fa      	ldr	r2, [r7, #12]
 8002008:	b2d2      	uxtb	r2, r2
 800200a:	4611      	mov	r1, r2
 800200c:	4618      	mov	r0, r3
 800200e:	f004 fa44 	bl	800649a <USB_HC_Halt>
 8002012:	e0af      	b.n	8002174 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 8002014:	68fb      	ldr	r3, [r7, #12]
 8002016:	015a      	lsls	r2, r3, #5
 8002018:	693b      	ldr	r3, [r7, #16]
 800201a:	4413      	add	r3, r2
 800201c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002020:	689b      	ldr	r3, [r3, #8]
 8002022:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002026:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800202a:	d11b      	bne.n	8002064 <HCD_HC_IN_IRQHandler+0xb6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 800202c:	68fb      	ldr	r3, [r7, #12]
 800202e:	015a      	lsls	r2, r3, #5
 8002030:	693b      	ldr	r3, [r7, #16]
 8002032:	4413      	add	r3, r2
 8002034:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002038:	461a      	mov	r2, r3
 800203a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800203e:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 8002040:	687a      	ldr	r2, [r7, #4]
 8002042:	68fb      	ldr	r3, [r7, #12]
 8002044:	212c      	movs	r1, #44	; 0x2c
 8002046:	fb01 f303 	mul.w	r3, r1, r3
 800204a:	4413      	add	r3, r2
 800204c:	3361      	adds	r3, #97	; 0x61
 800204e:	2207      	movs	r2, #7
 8002050:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	68fa      	ldr	r2, [r7, #12]
 8002058:	b2d2      	uxtb	r2, r2
 800205a:	4611      	mov	r1, r2
 800205c:	4618      	mov	r0, r3
 800205e:	f004 fa1c 	bl	800649a <USB_HC_Halt>
 8002062:	e087      	b.n	8002174 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8002064:	68fb      	ldr	r3, [r7, #12]
 8002066:	015a      	lsls	r2, r3, #5
 8002068:	693b      	ldr	r3, [r7, #16]
 800206a:	4413      	add	r3, r2
 800206c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002070:	689b      	ldr	r3, [r3, #8]
 8002072:	f003 0320 	and.w	r3, r3, #32
 8002076:	2b20      	cmp	r3, #32
 8002078:	d109      	bne.n	800208e <HCD_HC_IN_IRQHandler+0xe0>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 800207a:	68fb      	ldr	r3, [r7, #12]
 800207c:	015a      	lsls	r2, r3, #5
 800207e:	693b      	ldr	r3, [r7, #16]
 8002080:	4413      	add	r3, r2
 8002082:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002086:	461a      	mov	r2, r3
 8002088:	2320      	movs	r3, #32
 800208a:	6093      	str	r3, [r2, #8]
 800208c:	e072      	b.n	8002174 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 800208e:	68fb      	ldr	r3, [r7, #12]
 8002090:	015a      	lsls	r2, r3, #5
 8002092:	693b      	ldr	r3, [r7, #16]
 8002094:	4413      	add	r3, r2
 8002096:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800209a:	689b      	ldr	r3, [r3, #8]
 800209c:	f003 0308 	and.w	r3, r3, #8
 80020a0:	2b08      	cmp	r3, #8
 80020a2:	d11a      	bne.n	80020da <HCD_HC_IN_IRQHandler+0x12c>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 80020a4:	68fb      	ldr	r3, [r7, #12]
 80020a6:	015a      	lsls	r2, r3, #5
 80020a8:	693b      	ldr	r3, [r7, #16]
 80020aa:	4413      	add	r3, r2
 80020ac:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80020b0:	461a      	mov	r2, r3
 80020b2:	2308      	movs	r3, #8
 80020b4:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 80020b6:	687a      	ldr	r2, [r7, #4]
 80020b8:	68fb      	ldr	r3, [r7, #12]
 80020ba:	212c      	movs	r1, #44	; 0x2c
 80020bc:	fb01 f303 	mul.w	r3, r1, r3
 80020c0:	4413      	add	r3, r2
 80020c2:	3361      	adds	r3, #97	; 0x61
 80020c4:	2205      	movs	r2, #5
 80020c6:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	68fa      	ldr	r2, [r7, #12]
 80020ce:	b2d2      	uxtb	r2, r2
 80020d0:	4611      	mov	r1, r2
 80020d2:	4618      	mov	r0, r3
 80020d4:	f004 f9e1 	bl	800649a <USB_HC_Halt>
 80020d8:	e04c      	b.n	8002174 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 80020da:	68fb      	ldr	r3, [r7, #12]
 80020dc:	015a      	lsls	r2, r3, #5
 80020de:	693b      	ldr	r3, [r7, #16]
 80020e0:	4413      	add	r3, r2
 80020e2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80020e6:	689b      	ldr	r3, [r3, #8]
 80020e8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80020ec:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80020f0:	d11b      	bne.n	800212a <HCD_HC_IN_IRQHandler+0x17c>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 80020f2:	68fb      	ldr	r3, [r7, #12]
 80020f4:	015a      	lsls	r2, r3, #5
 80020f6:	693b      	ldr	r3, [r7, #16]
 80020f8:	4413      	add	r3, r2
 80020fa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80020fe:	461a      	mov	r2, r3
 8002100:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002104:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8002106:	687a      	ldr	r2, [r7, #4]
 8002108:	68fb      	ldr	r3, [r7, #12]
 800210a:	212c      	movs	r1, #44	; 0x2c
 800210c:	fb01 f303 	mul.w	r3, r1, r3
 8002110:	4413      	add	r3, r2
 8002112:	3361      	adds	r3, #97	; 0x61
 8002114:	2208      	movs	r2, #8
 8002116:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	68fa      	ldr	r2, [r7, #12]
 800211e:	b2d2      	uxtb	r2, r2
 8002120:	4611      	mov	r1, r2
 8002122:	4618      	mov	r0, r3
 8002124:	f004 f9b9 	bl	800649a <USB_HC_Halt>
 8002128:	e024      	b.n	8002174 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 800212a:	68fb      	ldr	r3, [r7, #12]
 800212c:	015a      	lsls	r2, r3, #5
 800212e:	693b      	ldr	r3, [r7, #16]
 8002130:	4413      	add	r3, r2
 8002132:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002136:	689b      	ldr	r3, [r3, #8]
 8002138:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800213c:	2b80      	cmp	r3, #128	; 0x80
 800213e:	d119      	bne.n	8002174 <HCD_HC_IN_IRQHandler+0x1c6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8002140:	68fb      	ldr	r3, [r7, #12]
 8002142:	015a      	lsls	r2, r3, #5
 8002144:	693b      	ldr	r3, [r7, #16]
 8002146:	4413      	add	r3, r2
 8002148:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800214c:	461a      	mov	r2, r3
 800214e:	2380      	movs	r3, #128	; 0x80
 8002150:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8002152:	687a      	ldr	r2, [r7, #4]
 8002154:	68fb      	ldr	r3, [r7, #12]
 8002156:	212c      	movs	r1, #44	; 0x2c
 8002158:	fb01 f303 	mul.w	r3, r1, r3
 800215c:	4413      	add	r3, r2
 800215e:	3361      	adds	r3, #97	; 0x61
 8002160:	2206      	movs	r2, #6
 8002162:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	68fa      	ldr	r2, [r7, #12]
 800216a:	b2d2      	uxtb	r2, r2
 800216c:	4611      	mov	r1, r2
 800216e:	4618      	mov	r0, r3
 8002170:	f004 f993 	bl	800649a <USB_HC_Halt>
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8002174:	68fb      	ldr	r3, [r7, #12]
 8002176:	015a      	lsls	r2, r3, #5
 8002178:	693b      	ldr	r3, [r7, #16]
 800217a:	4413      	add	r3, r2
 800217c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002180:	689b      	ldr	r3, [r3, #8]
 8002182:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002186:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800218a:	d112      	bne.n	80021b2 <HCD_HC_IN_IRQHandler+0x204>
  {
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	68fa      	ldr	r2, [r7, #12]
 8002192:	b2d2      	uxtb	r2, r2
 8002194:	4611      	mov	r1, r2
 8002196:	4618      	mov	r0, r3
 8002198:	f004 f97f 	bl	800649a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 800219c:	68fb      	ldr	r3, [r7, #12]
 800219e:	015a      	lsls	r2, r3, #5
 80021a0:	693b      	ldr	r3, [r7, #16]
 80021a2:	4413      	add	r3, r2
 80021a4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80021a8:	461a      	mov	r2, r3
 80021aa:	f44f 7300 	mov.w	r3, #512	; 0x200
 80021ae:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 80021b0:	e24e      	b.n	8002650 <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 80021b2:	68fb      	ldr	r3, [r7, #12]
 80021b4:	015a      	lsls	r2, r3, #5
 80021b6:	693b      	ldr	r3, [r7, #16]
 80021b8:	4413      	add	r3, r2
 80021ba:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80021be:	689b      	ldr	r3, [r3, #8]
 80021c0:	f003 0301 	and.w	r3, r3, #1
 80021c4:	2b01      	cmp	r3, #1
 80021c6:	f040 80df 	bne.w	8002388 <HCD_HC_IN_IRQHandler+0x3da>
    if (hhcd->Init.dma_enable != 0U)
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	691b      	ldr	r3, [r3, #16]
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	d019      	beq.n	8002206 <HCD_HC_IN_IRQHandler+0x258>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 80021d2:	687a      	ldr	r2, [r7, #4]
 80021d4:	68fb      	ldr	r3, [r7, #12]
 80021d6:	212c      	movs	r1, #44	; 0x2c
 80021d8:	fb01 f303 	mul.w	r3, r1, r3
 80021dc:	4413      	add	r3, r2
 80021de:	3348      	adds	r3, #72	; 0x48
 80021e0:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 80021e2:	68fb      	ldr	r3, [r7, #12]
 80021e4:	0159      	lsls	r1, r3, #5
 80021e6:	693b      	ldr	r3, [r7, #16]
 80021e8:	440b      	add	r3, r1
 80021ea:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80021ee:	691b      	ldr	r3, [r3, #16]
 80021f0:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 80021f4:	1ad2      	subs	r2, r2, r3
 80021f6:	6879      	ldr	r1, [r7, #4]
 80021f8:	68fb      	ldr	r3, [r7, #12]
 80021fa:	202c      	movs	r0, #44	; 0x2c
 80021fc:	fb00 f303 	mul.w	r3, r0, r3
 8002200:	440b      	add	r3, r1
 8002202:	3350      	adds	r3, #80	; 0x50
 8002204:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 8002206:	687a      	ldr	r2, [r7, #4]
 8002208:	68fb      	ldr	r3, [r7, #12]
 800220a:	212c      	movs	r1, #44	; 0x2c
 800220c:	fb01 f303 	mul.w	r3, r1, r3
 8002210:	4413      	add	r3, r2
 8002212:	3361      	adds	r3, #97	; 0x61
 8002214:	2201      	movs	r2, #1
 8002216:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8002218:	687a      	ldr	r2, [r7, #4]
 800221a:	68fb      	ldr	r3, [r7, #12]
 800221c:	212c      	movs	r1, #44	; 0x2c
 800221e:	fb01 f303 	mul.w	r3, r1, r3
 8002222:	4413      	add	r3, r2
 8002224:	335c      	adds	r3, #92	; 0x5c
 8002226:	2200      	movs	r2, #0
 8002228:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 800222a:	68fb      	ldr	r3, [r7, #12]
 800222c:	015a      	lsls	r2, r3, #5
 800222e:	693b      	ldr	r3, [r7, #16]
 8002230:	4413      	add	r3, r2
 8002232:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002236:	461a      	mov	r2, r3
 8002238:	2301      	movs	r3, #1
 800223a:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 800223c:	687a      	ldr	r2, [r7, #4]
 800223e:	68fb      	ldr	r3, [r7, #12]
 8002240:	212c      	movs	r1, #44	; 0x2c
 8002242:	fb01 f303 	mul.w	r3, r1, r3
 8002246:	4413      	add	r3, r2
 8002248:	333f      	adds	r3, #63	; 0x3f
 800224a:	781b      	ldrb	r3, [r3, #0]
 800224c:	2b00      	cmp	r3, #0
 800224e:	d009      	beq.n	8002264 <HCD_HC_IN_IRQHandler+0x2b6>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8002250:	687a      	ldr	r2, [r7, #4]
 8002252:	68fb      	ldr	r3, [r7, #12]
 8002254:	212c      	movs	r1, #44	; 0x2c
 8002256:	fb01 f303 	mul.w	r3, r1, r3
 800225a:	4413      	add	r3, r2
 800225c:	333f      	adds	r3, #63	; 0x3f
 800225e:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002260:	2b02      	cmp	r3, #2
 8002262:	d111      	bne.n	8002288 <HCD_HC_IN_IRQHandler+0x2da>
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	68fa      	ldr	r2, [r7, #12]
 800226a:	b2d2      	uxtb	r2, r2
 800226c:	4611      	mov	r1, r2
 800226e:	4618      	mov	r0, r3
 8002270:	f004 f913 	bl	800649a <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002274:	68fb      	ldr	r3, [r7, #12]
 8002276:	015a      	lsls	r2, r3, #5
 8002278:	693b      	ldr	r3, [r7, #16]
 800227a:	4413      	add	r3, r2
 800227c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002280:	461a      	mov	r2, r3
 8002282:	2310      	movs	r3, #16
 8002284:	6093      	str	r3, [r2, #8]
 8002286:	e03a      	b.n	80022fe <HCD_HC_IN_IRQHandler+0x350>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_INTR) ||
 8002288:	687a      	ldr	r2, [r7, #4]
 800228a:	68fb      	ldr	r3, [r7, #12]
 800228c:	212c      	movs	r1, #44	; 0x2c
 800228e:	fb01 f303 	mul.w	r3, r1, r3
 8002292:	4413      	add	r3, r2
 8002294:	333f      	adds	r3, #63	; 0x3f
 8002296:	781b      	ldrb	r3, [r3, #0]
 8002298:	2b03      	cmp	r3, #3
 800229a:	d009      	beq.n	80022b0 <HCD_HC_IN_IRQHandler+0x302>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC))
 800229c:	687a      	ldr	r2, [r7, #4]
 800229e:	68fb      	ldr	r3, [r7, #12]
 80022a0:	212c      	movs	r1, #44	; 0x2c
 80022a2:	fb01 f303 	mul.w	r3, r1, r3
 80022a6:	4413      	add	r3, r2
 80022a8:	333f      	adds	r3, #63	; 0x3f
 80022aa:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_INTR) ||
 80022ac:	2b01      	cmp	r3, #1
 80022ae:	d126      	bne.n	80022fe <HCD_HC_IN_IRQHandler+0x350>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 80022b0:	68fb      	ldr	r3, [r7, #12]
 80022b2:	015a      	lsls	r2, r3, #5
 80022b4:	693b      	ldr	r3, [r7, #16]
 80022b6:	4413      	add	r3, r2
 80022b8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	68fa      	ldr	r2, [r7, #12]
 80022c0:	0151      	lsls	r1, r2, #5
 80022c2:	693a      	ldr	r2, [r7, #16]
 80022c4:	440a      	add	r2, r1
 80022c6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80022ca:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80022ce:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 80022d0:	687a      	ldr	r2, [r7, #4]
 80022d2:	68fb      	ldr	r3, [r7, #12]
 80022d4:	212c      	movs	r1, #44	; 0x2c
 80022d6:	fb01 f303 	mul.w	r3, r1, r3
 80022da:	4413      	add	r3, r2
 80022dc:	3360      	adds	r3, #96	; 0x60
 80022de:	2201      	movs	r2, #1
 80022e0:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80022e2:	68fb      	ldr	r3, [r7, #12]
 80022e4:	b2d9      	uxtb	r1, r3
 80022e6:	687a      	ldr	r2, [r7, #4]
 80022e8:	68fb      	ldr	r3, [r7, #12]
 80022ea:	202c      	movs	r0, #44	; 0x2c
 80022ec:	fb00 f303 	mul.w	r3, r0, r3
 80022f0:	4413      	add	r3, r2
 80022f2:	3360      	adds	r3, #96	; 0x60
 80022f4:	781b      	ldrb	r3, [r3, #0]
 80022f6:	461a      	mov	r2, r3
 80022f8:	6878      	ldr	r0, [r7, #4]
 80022fa:	f006 fb71 	bl	80089e0 <HAL_HCD_HC_NotifyURBChange_Callback>
    if (hhcd->Init.dma_enable == 1U)
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	691b      	ldr	r3, [r3, #16]
 8002302:	2b01      	cmp	r3, #1
 8002304:	d12b      	bne.n	800235e <HCD_HC_IN_IRQHandler+0x3b0>
      if (((hhcd->hc[ch_num].XferSize / hhcd->hc[ch_num].max_packet) & 1U) != 0U)
 8002306:	687a      	ldr	r2, [r7, #4]
 8002308:	68fb      	ldr	r3, [r7, #12]
 800230a:	212c      	movs	r1, #44	; 0x2c
 800230c:	fb01 f303 	mul.w	r3, r1, r3
 8002310:	4413      	add	r3, r2
 8002312:	3348      	adds	r3, #72	; 0x48
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	6879      	ldr	r1, [r7, #4]
 8002318:	68fa      	ldr	r2, [r7, #12]
 800231a:	202c      	movs	r0, #44	; 0x2c
 800231c:	fb00 f202 	mul.w	r2, r0, r2
 8002320:	440a      	add	r2, r1
 8002322:	3240      	adds	r2, #64	; 0x40
 8002324:	8812      	ldrh	r2, [r2, #0]
 8002326:	fbb3 f3f2 	udiv	r3, r3, r2
 800232a:	f003 0301 	and.w	r3, r3, #1
 800232e:	2b00      	cmp	r3, #0
 8002330:	f000 818e 	beq.w	8002650 <HCD_HC_IN_IRQHandler+0x6a2>
        hhcd->hc[ch_num].toggle_in ^= 1U;
 8002334:	687a      	ldr	r2, [r7, #4]
 8002336:	68fb      	ldr	r3, [r7, #12]
 8002338:	212c      	movs	r1, #44	; 0x2c
 800233a:	fb01 f303 	mul.w	r3, r1, r3
 800233e:	4413      	add	r3, r2
 8002340:	3354      	adds	r3, #84	; 0x54
 8002342:	781b      	ldrb	r3, [r3, #0]
 8002344:	f083 0301 	eor.w	r3, r3, #1
 8002348:	b2d8      	uxtb	r0, r3
 800234a:	687a      	ldr	r2, [r7, #4]
 800234c:	68fb      	ldr	r3, [r7, #12]
 800234e:	212c      	movs	r1, #44	; 0x2c
 8002350:	fb01 f303 	mul.w	r3, r1, r3
 8002354:	4413      	add	r3, r2
 8002356:	3354      	adds	r3, #84	; 0x54
 8002358:	4602      	mov	r2, r0
 800235a:	701a      	strb	r2, [r3, #0]
}
 800235c:	e178      	b.n	8002650 <HCD_HC_IN_IRQHandler+0x6a2>
      hhcd->hc[ch_num].toggle_in ^= 1U;
 800235e:	687a      	ldr	r2, [r7, #4]
 8002360:	68fb      	ldr	r3, [r7, #12]
 8002362:	212c      	movs	r1, #44	; 0x2c
 8002364:	fb01 f303 	mul.w	r3, r1, r3
 8002368:	4413      	add	r3, r2
 800236a:	3354      	adds	r3, #84	; 0x54
 800236c:	781b      	ldrb	r3, [r3, #0]
 800236e:	f083 0301 	eor.w	r3, r3, #1
 8002372:	b2d8      	uxtb	r0, r3
 8002374:	687a      	ldr	r2, [r7, #4]
 8002376:	68fb      	ldr	r3, [r7, #12]
 8002378:	212c      	movs	r1, #44	; 0x2c
 800237a:	fb01 f303 	mul.w	r3, r1, r3
 800237e:	4413      	add	r3, r2
 8002380:	3354      	adds	r3, #84	; 0x54
 8002382:	4602      	mov	r2, r0
 8002384:	701a      	strb	r2, [r3, #0]
}
 8002386:	e163      	b.n	8002650 <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8002388:	68fb      	ldr	r3, [r7, #12]
 800238a:	015a      	lsls	r2, r3, #5
 800238c:	693b      	ldr	r3, [r7, #16]
 800238e:	4413      	add	r3, r2
 8002390:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002394:	689b      	ldr	r3, [r3, #8]
 8002396:	f003 0302 	and.w	r3, r3, #2
 800239a:	2b02      	cmp	r3, #2
 800239c:	f040 80f6 	bne.w	800258c <HCD_HC_IN_IRQHandler+0x5de>
    if (hhcd->hc[ch_num].state == HC_XFRC)
 80023a0:	687a      	ldr	r2, [r7, #4]
 80023a2:	68fb      	ldr	r3, [r7, #12]
 80023a4:	212c      	movs	r1, #44	; 0x2c
 80023a6:	fb01 f303 	mul.w	r3, r1, r3
 80023aa:	4413      	add	r3, r2
 80023ac:	3361      	adds	r3, #97	; 0x61
 80023ae:	781b      	ldrb	r3, [r3, #0]
 80023b0:	2b01      	cmp	r3, #1
 80023b2:	d109      	bne.n	80023c8 <HCD_HC_IN_IRQHandler+0x41a>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 80023b4:	687a      	ldr	r2, [r7, #4]
 80023b6:	68fb      	ldr	r3, [r7, #12]
 80023b8:	212c      	movs	r1, #44	; 0x2c
 80023ba:	fb01 f303 	mul.w	r3, r1, r3
 80023be:	4413      	add	r3, r2
 80023c0:	3360      	adds	r3, #96	; 0x60
 80023c2:	2201      	movs	r2, #1
 80023c4:	701a      	strb	r2, [r3, #0]
 80023c6:	e0c9      	b.n	800255c <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 80023c8:	687a      	ldr	r2, [r7, #4]
 80023ca:	68fb      	ldr	r3, [r7, #12]
 80023cc:	212c      	movs	r1, #44	; 0x2c
 80023ce:	fb01 f303 	mul.w	r3, r1, r3
 80023d2:	4413      	add	r3, r2
 80023d4:	3361      	adds	r3, #97	; 0x61
 80023d6:	781b      	ldrb	r3, [r3, #0]
 80023d8:	2b05      	cmp	r3, #5
 80023da:	d109      	bne.n	80023f0 <HCD_HC_IN_IRQHandler+0x442>
      hhcd->hc[ch_num].urb_state = URB_STALL;
 80023dc:	687a      	ldr	r2, [r7, #4]
 80023de:	68fb      	ldr	r3, [r7, #12]
 80023e0:	212c      	movs	r1, #44	; 0x2c
 80023e2:	fb01 f303 	mul.w	r3, r1, r3
 80023e6:	4413      	add	r3, r2
 80023e8:	3360      	adds	r3, #96	; 0x60
 80023ea:	2205      	movs	r2, #5
 80023ec:	701a      	strb	r2, [r3, #0]
 80023ee:	e0b5      	b.n	800255c <HCD_HC_IN_IRQHandler+0x5ae>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80023f0:	687a      	ldr	r2, [r7, #4]
 80023f2:	68fb      	ldr	r3, [r7, #12]
 80023f4:	212c      	movs	r1, #44	; 0x2c
 80023f6:	fb01 f303 	mul.w	r3, r1, r3
 80023fa:	4413      	add	r3, r2
 80023fc:	3361      	adds	r3, #97	; 0x61
 80023fe:	781b      	ldrb	r3, [r3, #0]
 8002400:	2b06      	cmp	r3, #6
 8002402:	d009      	beq.n	8002418 <HCD_HC_IN_IRQHandler+0x46a>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8002404:	687a      	ldr	r2, [r7, #4]
 8002406:	68fb      	ldr	r3, [r7, #12]
 8002408:	212c      	movs	r1, #44	; 0x2c
 800240a:	fb01 f303 	mul.w	r3, r1, r3
 800240e:	4413      	add	r3, r2
 8002410:	3361      	adds	r3, #97	; 0x61
 8002412:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002414:	2b08      	cmp	r3, #8
 8002416:	d150      	bne.n	80024ba <HCD_HC_IN_IRQHandler+0x50c>
      hhcd->hc[ch_num].ErrCnt++;
 8002418:	687a      	ldr	r2, [r7, #4]
 800241a:	68fb      	ldr	r3, [r7, #12]
 800241c:	212c      	movs	r1, #44	; 0x2c
 800241e:	fb01 f303 	mul.w	r3, r1, r3
 8002422:	4413      	add	r3, r2
 8002424:	335c      	adds	r3, #92	; 0x5c
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	1c5a      	adds	r2, r3, #1
 800242a:	6879      	ldr	r1, [r7, #4]
 800242c:	68fb      	ldr	r3, [r7, #12]
 800242e:	202c      	movs	r0, #44	; 0x2c
 8002430:	fb00 f303 	mul.w	r3, r0, r3
 8002434:	440b      	add	r3, r1
 8002436:	335c      	adds	r3, #92	; 0x5c
 8002438:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 800243a:	687a      	ldr	r2, [r7, #4]
 800243c:	68fb      	ldr	r3, [r7, #12]
 800243e:	212c      	movs	r1, #44	; 0x2c
 8002440:	fb01 f303 	mul.w	r3, r1, r3
 8002444:	4413      	add	r3, r2
 8002446:	335c      	adds	r3, #92	; 0x5c
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	2b02      	cmp	r3, #2
 800244c:	d912      	bls.n	8002474 <HCD_HC_IN_IRQHandler+0x4c6>
        hhcd->hc[ch_num].ErrCnt = 0U;
 800244e:	687a      	ldr	r2, [r7, #4]
 8002450:	68fb      	ldr	r3, [r7, #12]
 8002452:	212c      	movs	r1, #44	; 0x2c
 8002454:	fb01 f303 	mul.w	r3, r1, r3
 8002458:	4413      	add	r3, r2
 800245a:	335c      	adds	r3, #92	; 0x5c
 800245c:	2200      	movs	r2, #0
 800245e:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002460:	687a      	ldr	r2, [r7, #4]
 8002462:	68fb      	ldr	r3, [r7, #12]
 8002464:	212c      	movs	r1, #44	; 0x2c
 8002466:	fb01 f303 	mul.w	r3, r1, r3
 800246a:	4413      	add	r3, r2
 800246c:	3360      	adds	r3, #96	; 0x60
 800246e:	2204      	movs	r2, #4
 8002470:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8002472:	e073      	b.n	800255c <HCD_HC_IN_IRQHandler+0x5ae>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002474:	687a      	ldr	r2, [r7, #4]
 8002476:	68fb      	ldr	r3, [r7, #12]
 8002478:	212c      	movs	r1, #44	; 0x2c
 800247a:	fb01 f303 	mul.w	r3, r1, r3
 800247e:	4413      	add	r3, r2
 8002480:	3360      	adds	r3, #96	; 0x60
 8002482:	2202      	movs	r2, #2
 8002484:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002486:	68fb      	ldr	r3, [r7, #12]
 8002488:	015a      	lsls	r2, r3, #5
 800248a:	693b      	ldr	r3, [r7, #16]
 800248c:	4413      	add	r3, r2
 800248e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002496:	68bb      	ldr	r3, [r7, #8]
 8002498:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800249c:	60bb      	str	r3, [r7, #8]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 800249e:	68bb      	ldr	r3, [r7, #8]
 80024a0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80024a4:	60bb      	str	r3, [r7, #8]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 80024a6:	68fb      	ldr	r3, [r7, #12]
 80024a8:	015a      	lsls	r2, r3, #5
 80024aa:	693b      	ldr	r3, [r7, #16]
 80024ac:	4413      	add	r3, r2
 80024ae:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80024b2:	461a      	mov	r2, r3
 80024b4:	68bb      	ldr	r3, [r7, #8]
 80024b6:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 80024b8:	e050      	b.n	800255c <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 80024ba:	687a      	ldr	r2, [r7, #4]
 80024bc:	68fb      	ldr	r3, [r7, #12]
 80024be:	212c      	movs	r1, #44	; 0x2c
 80024c0:	fb01 f303 	mul.w	r3, r1, r3
 80024c4:	4413      	add	r3, r2
 80024c6:	3361      	adds	r3, #97	; 0x61
 80024c8:	781b      	ldrb	r3, [r3, #0]
 80024ca:	2b03      	cmp	r3, #3
 80024cc:	d122      	bne.n	8002514 <HCD_HC_IN_IRQHandler+0x566>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 80024ce:	687a      	ldr	r2, [r7, #4]
 80024d0:	68fb      	ldr	r3, [r7, #12]
 80024d2:	212c      	movs	r1, #44	; 0x2c
 80024d4:	fb01 f303 	mul.w	r3, r1, r3
 80024d8:	4413      	add	r3, r2
 80024da:	3360      	adds	r3, #96	; 0x60
 80024dc:	2202      	movs	r2, #2
 80024de:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 80024e0:	68fb      	ldr	r3, [r7, #12]
 80024e2:	015a      	lsls	r2, r3, #5
 80024e4:	693b      	ldr	r3, [r7, #16]
 80024e6:	4413      	add	r3, r2
 80024e8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80024f0:	68bb      	ldr	r3, [r7, #8]
 80024f2:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80024f6:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 80024f8:	68bb      	ldr	r3, [r7, #8]
 80024fa:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80024fe:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002500:	68fb      	ldr	r3, [r7, #12]
 8002502:	015a      	lsls	r2, r3, #5
 8002504:	693b      	ldr	r3, [r7, #16]
 8002506:	4413      	add	r3, r2
 8002508:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800250c:	461a      	mov	r2, r3
 800250e:	68bb      	ldr	r3, [r7, #8]
 8002510:	6013      	str	r3, [r2, #0]
 8002512:	e023      	b.n	800255c <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 8002514:	687a      	ldr	r2, [r7, #4]
 8002516:	68fb      	ldr	r3, [r7, #12]
 8002518:	212c      	movs	r1, #44	; 0x2c
 800251a:	fb01 f303 	mul.w	r3, r1, r3
 800251e:	4413      	add	r3, r2
 8002520:	3361      	adds	r3, #97	; 0x61
 8002522:	781b      	ldrb	r3, [r3, #0]
 8002524:	2b07      	cmp	r3, #7
 8002526:	d119      	bne.n	800255c <HCD_HC_IN_IRQHandler+0x5ae>
      hhcd->hc[ch_num].ErrCnt++;
 8002528:	687a      	ldr	r2, [r7, #4]
 800252a:	68fb      	ldr	r3, [r7, #12]
 800252c:	212c      	movs	r1, #44	; 0x2c
 800252e:	fb01 f303 	mul.w	r3, r1, r3
 8002532:	4413      	add	r3, r2
 8002534:	335c      	adds	r3, #92	; 0x5c
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	1c5a      	adds	r2, r3, #1
 800253a:	6879      	ldr	r1, [r7, #4]
 800253c:	68fb      	ldr	r3, [r7, #12]
 800253e:	202c      	movs	r0, #44	; 0x2c
 8002540:	fb00 f303 	mul.w	r3, r0, r3
 8002544:	440b      	add	r3, r1
 8002546:	335c      	adds	r3, #92	; 0x5c
 8002548:	601a      	str	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 800254a:	687a      	ldr	r2, [r7, #4]
 800254c:	68fb      	ldr	r3, [r7, #12]
 800254e:	212c      	movs	r1, #44	; 0x2c
 8002550:	fb01 f303 	mul.w	r3, r1, r3
 8002554:	4413      	add	r3, r2
 8002556:	3360      	adds	r3, #96	; 0x60
 8002558:	2204      	movs	r2, #4
 800255a:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 800255c:	68fb      	ldr	r3, [r7, #12]
 800255e:	015a      	lsls	r2, r3, #5
 8002560:	693b      	ldr	r3, [r7, #16]
 8002562:	4413      	add	r3, r2
 8002564:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002568:	461a      	mov	r2, r3
 800256a:	2302      	movs	r3, #2
 800256c:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 800256e:	68fb      	ldr	r3, [r7, #12]
 8002570:	b2d9      	uxtb	r1, r3
 8002572:	687a      	ldr	r2, [r7, #4]
 8002574:	68fb      	ldr	r3, [r7, #12]
 8002576:	202c      	movs	r0, #44	; 0x2c
 8002578:	fb00 f303 	mul.w	r3, r0, r3
 800257c:	4413      	add	r3, r2
 800257e:	3360      	adds	r3, #96	; 0x60
 8002580:	781b      	ldrb	r3, [r3, #0]
 8002582:	461a      	mov	r2, r3
 8002584:	6878      	ldr	r0, [r7, #4]
 8002586:	f006 fa2b 	bl	80089e0 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 800258a:	e061      	b.n	8002650 <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 800258c:	68fb      	ldr	r3, [r7, #12]
 800258e:	015a      	lsls	r2, r3, #5
 8002590:	693b      	ldr	r3, [r7, #16]
 8002592:	4413      	add	r3, r2
 8002594:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002598:	689b      	ldr	r3, [r3, #8]
 800259a:	f003 0310 	and.w	r3, r3, #16
 800259e:	2b10      	cmp	r3, #16
 80025a0:	d156      	bne.n	8002650 <HCD_HC_IN_IRQHandler+0x6a2>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 80025a2:	687a      	ldr	r2, [r7, #4]
 80025a4:	68fb      	ldr	r3, [r7, #12]
 80025a6:	212c      	movs	r1, #44	; 0x2c
 80025a8:	fb01 f303 	mul.w	r3, r1, r3
 80025ac:	4413      	add	r3, r2
 80025ae:	333f      	adds	r3, #63	; 0x3f
 80025b0:	781b      	ldrb	r3, [r3, #0]
 80025b2:	2b03      	cmp	r3, #3
 80025b4:	d111      	bne.n	80025da <HCD_HC_IN_IRQHandler+0x62c>
      hhcd->hc[ch_num].ErrCnt = 0U;
 80025b6:	687a      	ldr	r2, [r7, #4]
 80025b8:	68fb      	ldr	r3, [r7, #12]
 80025ba:	212c      	movs	r1, #44	; 0x2c
 80025bc:	fb01 f303 	mul.w	r3, r1, r3
 80025c0:	4413      	add	r3, r2
 80025c2:	335c      	adds	r3, #92	; 0x5c
 80025c4:	2200      	movs	r2, #0
 80025c6:	601a      	str	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	68fa      	ldr	r2, [r7, #12]
 80025ce:	b2d2      	uxtb	r2, r2
 80025d0:	4611      	mov	r1, r2
 80025d2:	4618      	mov	r0, r3
 80025d4:	f003 ff61 	bl	800649a <USB_HC_Halt>
 80025d8:	e031      	b.n	800263e <HCD_HC_IN_IRQHandler+0x690>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80025da:	687a      	ldr	r2, [r7, #4]
 80025dc:	68fb      	ldr	r3, [r7, #12]
 80025de:	212c      	movs	r1, #44	; 0x2c
 80025e0:	fb01 f303 	mul.w	r3, r1, r3
 80025e4:	4413      	add	r3, r2
 80025e6:	333f      	adds	r3, #63	; 0x3f
 80025e8:	781b      	ldrb	r3, [r3, #0]
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	d009      	beq.n	8002602 <HCD_HC_IN_IRQHandler+0x654>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 80025ee:	687a      	ldr	r2, [r7, #4]
 80025f0:	68fb      	ldr	r3, [r7, #12]
 80025f2:	212c      	movs	r1, #44	; 0x2c
 80025f4:	fb01 f303 	mul.w	r3, r1, r3
 80025f8:	4413      	add	r3, r2
 80025fa:	333f      	adds	r3, #63	; 0x3f
 80025fc:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80025fe:	2b02      	cmp	r3, #2
 8002600:	d11d      	bne.n	800263e <HCD_HC_IN_IRQHandler+0x690>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8002602:	687a      	ldr	r2, [r7, #4]
 8002604:	68fb      	ldr	r3, [r7, #12]
 8002606:	212c      	movs	r1, #44	; 0x2c
 8002608:	fb01 f303 	mul.w	r3, r1, r3
 800260c:	4413      	add	r3, r2
 800260e:	335c      	adds	r3, #92	; 0x5c
 8002610:	2200      	movs	r2, #0
 8002612:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	691b      	ldr	r3, [r3, #16]
 8002618:	2b00      	cmp	r3, #0
 800261a:	d110      	bne.n	800263e <HCD_HC_IN_IRQHandler+0x690>
        hhcd->hc[ch_num].state = HC_NAK;
 800261c:	687a      	ldr	r2, [r7, #4]
 800261e:	68fb      	ldr	r3, [r7, #12]
 8002620:	212c      	movs	r1, #44	; 0x2c
 8002622:	fb01 f303 	mul.w	r3, r1, r3
 8002626:	4413      	add	r3, r2
 8002628:	3361      	adds	r3, #97	; 0x61
 800262a:	2203      	movs	r2, #3
 800262c:	701a      	strb	r2, [r3, #0]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	68fa      	ldr	r2, [r7, #12]
 8002634:	b2d2      	uxtb	r2, r2
 8002636:	4611      	mov	r1, r2
 8002638:	4618      	mov	r0, r3
 800263a:	f003 ff2e 	bl	800649a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 800263e:	68fb      	ldr	r3, [r7, #12]
 8002640:	015a      	lsls	r2, r3, #5
 8002642:	693b      	ldr	r3, [r7, #16]
 8002644:	4413      	add	r3, r2
 8002646:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800264a:	461a      	mov	r2, r3
 800264c:	2310      	movs	r3, #16
 800264e:	6093      	str	r3, [r2, #8]
}
 8002650:	bf00      	nop
 8002652:	3718      	adds	r7, #24
 8002654:	46bd      	mov	sp, r7
 8002656:	bd80      	pop	{r7, pc}

08002658 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8002658:	b580      	push	{r7, lr}
 800265a:	b088      	sub	sp, #32
 800265c:	af00      	add	r7, sp, #0
 800265e:	6078      	str	r0, [r7, #4]
 8002660:	460b      	mov	r3, r1
 8002662:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800266a:	69fb      	ldr	r3, [r7, #28]
 800266c:	61bb      	str	r3, [r7, #24]
  uint32_t ch_num = (uint32_t)chnum;
 800266e:	78fb      	ldrb	r3, [r7, #3]
 8002670:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t num_packets;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8002672:	697b      	ldr	r3, [r7, #20]
 8002674:	015a      	lsls	r2, r3, #5
 8002676:	69bb      	ldr	r3, [r7, #24]
 8002678:	4413      	add	r3, r2
 800267a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800267e:	689b      	ldr	r3, [r3, #8]
 8002680:	f003 0304 	and.w	r3, r3, #4
 8002684:	2b04      	cmp	r3, #4
 8002686:	d11a      	bne.n	80026be <HCD_HC_OUT_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8002688:	697b      	ldr	r3, [r7, #20]
 800268a:	015a      	lsls	r2, r3, #5
 800268c:	69bb      	ldr	r3, [r7, #24]
 800268e:	4413      	add	r3, r2
 8002690:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002694:	461a      	mov	r2, r3
 8002696:	2304      	movs	r3, #4
 8002698:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 800269a:	687a      	ldr	r2, [r7, #4]
 800269c:	697b      	ldr	r3, [r7, #20]
 800269e:	212c      	movs	r1, #44	; 0x2c
 80026a0:	fb01 f303 	mul.w	r3, r1, r3
 80026a4:	4413      	add	r3, r2
 80026a6:	3361      	adds	r3, #97	; 0x61
 80026a8:	2206      	movs	r2, #6
 80026aa:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	697a      	ldr	r2, [r7, #20]
 80026b2:	b2d2      	uxtb	r2, r2
 80026b4:	4611      	mov	r1, r2
 80026b6:	4618      	mov	r0, r3
 80026b8:	f003 feef 	bl	800649a <USB_HC_Halt>
  }
  else
  {
    /* ... */
  }
}
 80026bc:	e331      	b.n	8002d22 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 80026be:	697b      	ldr	r3, [r7, #20]
 80026c0:	015a      	lsls	r2, r3, #5
 80026c2:	69bb      	ldr	r3, [r7, #24]
 80026c4:	4413      	add	r3, r2
 80026c6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80026ca:	689b      	ldr	r3, [r3, #8]
 80026cc:	f003 0320 	and.w	r3, r3, #32
 80026d0:	2b20      	cmp	r3, #32
 80026d2:	d12e      	bne.n	8002732 <HCD_HC_OUT_IRQHandler+0xda>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 80026d4:	697b      	ldr	r3, [r7, #20]
 80026d6:	015a      	lsls	r2, r3, #5
 80026d8:	69bb      	ldr	r3, [r7, #24]
 80026da:	4413      	add	r3, r2
 80026dc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80026e0:	461a      	mov	r2, r3
 80026e2:	2320      	movs	r3, #32
 80026e4:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 80026e6:	687a      	ldr	r2, [r7, #4]
 80026e8:	697b      	ldr	r3, [r7, #20]
 80026ea:	212c      	movs	r1, #44	; 0x2c
 80026ec:	fb01 f303 	mul.w	r3, r1, r3
 80026f0:	4413      	add	r3, r2
 80026f2:	333d      	adds	r3, #61	; 0x3d
 80026f4:	781b      	ldrb	r3, [r3, #0]
 80026f6:	2b01      	cmp	r3, #1
 80026f8:	f040 8313 	bne.w	8002d22 <HCD_HC_OUT_IRQHandler+0x6ca>
      hhcd->hc[ch_num].do_ping = 0U;
 80026fc:	687a      	ldr	r2, [r7, #4]
 80026fe:	697b      	ldr	r3, [r7, #20]
 8002700:	212c      	movs	r1, #44	; 0x2c
 8002702:	fb01 f303 	mul.w	r3, r1, r3
 8002706:	4413      	add	r3, r2
 8002708:	333d      	adds	r3, #61	; 0x3d
 800270a:	2200      	movs	r2, #0
 800270c:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 800270e:	687a      	ldr	r2, [r7, #4]
 8002710:	697b      	ldr	r3, [r7, #20]
 8002712:	212c      	movs	r1, #44	; 0x2c
 8002714:	fb01 f303 	mul.w	r3, r1, r3
 8002718:	4413      	add	r3, r2
 800271a:	3360      	adds	r3, #96	; 0x60
 800271c:	2202      	movs	r2, #2
 800271e:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	697a      	ldr	r2, [r7, #20]
 8002726:	b2d2      	uxtb	r2, r2
 8002728:	4611      	mov	r1, r2
 800272a:	4618      	mov	r0, r3
 800272c:	f003 feb5 	bl	800649a <USB_HC_Halt>
}
 8002730:	e2f7      	b.n	8002d22 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8002732:	697b      	ldr	r3, [r7, #20]
 8002734:	015a      	lsls	r2, r3, #5
 8002736:	69bb      	ldr	r3, [r7, #24]
 8002738:	4413      	add	r3, r2
 800273a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800273e:	689b      	ldr	r3, [r3, #8]
 8002740:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002744:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002748:	d112      	bne.n	8002770 <HCD_HC_OUT_IRQHandler+0x118>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 800274a:	697b      	ldr	r3, [r7, #20]
 800274c:	015a      	lsls	r2, r3, #5
 800274e:	69bb      	ldr	r3, [r7, #24]
 8002750:	4413      	add	r3, r2
 8002752:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002756:	461a      	mov	r2, r3
 8002758:	f44f 7300 	mov.w	r3, #512	; 0x200
 800275c:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	697a      	ldr	r2, [r7, #20]
 8002764:	b2d2      	uxtb	r2, r2
 8002766:	4611      	mov	r1, r2
 8002768:	4618      	mov	r0, r3
 800276a:	f003 fe96 	bl	800649a <USB_HC_Halt>
}
 800276e:	e2d8      	b.n	8002d22 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8002770:	697b      	ldr	r3, [r7, #20]
 8002772:	015a      	lsls	r2, r3, #5
 8002774:	69bb      	ldr	r3, [r7, #24]
 8002776:	4413      	add	r3, r2
 8002778:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800277c:	689b      	ldr	r3, [r3, #8]
 800277e:	f003 0301 	and.w	r3, r3, #1
 8002782:	2b01      	cmp	r3, #1
 8002784:	d140      	bne.n	8002808 <HCD_HC_OUT_IRQHandler+0x1b0>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8002786:	687a      	ldr	r2, [r7, #4]
 8002788:	697b      	ldr	r3, [r7, #20]
 800278a:	212c      	movs	r1, #44	; 0x2c
 800278c:	fb01 f303 	mul.w	r3, r1, r3
 8002790:	4413      	add	r3, r2
 8002792:	335c      	adds	r3, #92	; 0x5c
 8002794:	2200      	movs	r2, #0
 8002796:	601a      	str	r2, [r3, #0]
    if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8002798:	697b      	ldr	r3, [r7, #20]
 800279a:	015a      	lsls	r2, r3, #5
 800279c:	69bb      	ldr	r3, [r7, #24]
 800279e:	4413      	add	r3, r2
 80027a0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80027a4:	689b      	ldr	r3, [r3, #8]
 80027a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80027aa:	2b40      	cmp	r3, #64	; 0x40
 80027ac:	d111      	bne.n	80027d2 <HCD_HC_OUT_IRQHandler+0x17a>
      hhcd->hc[ch_num].do_ping = 1U;
 80027ae:	687a      	ldr	r2, [r7, #4]
 80027b0:	697b      	ldr	r3, [r7, #20]
 80027b2:	212c      	movs	r1, #44	; 0x2c
 80027b4:	fb01 f303 	mul.w	r3, r1, r3
 80027b8:	4413      	add	r3, r2
 80027ba:	333d      	adds	r3, #61	; 0x3d
 80027bc:	2201      	movs	r2, #1
 80027be:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 80027c0:	697b      	ldr	r3, [r7, #20]
 80027c2:	015a      	lsls	r2, r3, #5
 80027c4:	69bb      	ldr	r3, [r7, #24]
 80027c6:	4413      	add	r3, r2
 80027c8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80027cc:	461a      	mov	r2, r3
 80027ce:	2340      	movs	r3, #64	; 0x40
 80027d0:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 80027d2:	697b      	ldr	r3, [r7, #20]
 80027d4:	015a      	lsls	r2, r3, #5
 80027d6:	69bb      	ldr	r3, [r7, #24]
 80027d8:	4413      	add	r3, r2
 80027da:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80027de:	461a      	mov	r2, r3
 80027e0:	2301      	movs	r3, #1
 80027e2:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 80027e4:	687a      	ldr	r2, [r7, #4]
 80027e6:	697b      	ldr	r3, [r7, #20]
 80027e8:	212c      	movs	r1, #44	; 0x2c
 80027ea:	fb01 f303 	mul.w	r3, r1, r3
 80027ee:	4413      	add	r3, r2
 80027f0:	3361      	adds	r3, #97	; 0x61
 80027f2:	2201      	movs	r2, #1
 80027f4:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	697a      	ldr	r2, [r7, #20]
 80027fc:	b2d2      	uxtb	r2, r2
 80027fe:	4611      	mov	r1, r2
 8002800:	4618      	mov	r0, r3
 8002802:	f003 fe4a 	bl	800649a <USB_HC_Halt>
}
 8002806:	e28c      	b.n	8002d22 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8002808:	697b      	ldr	r3, [r7, #20]
 800280a:	015a      	lsls	r2, r3, #5
 800280c:	69bb      	ldr	r3, [r7, #24]
 800280e:	4413      	add	r3, r2
 8002810:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002814:	689b      	ldr	r3, [r3, #8]
 8002816:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800281a:	2b40      	cmp	r3, #64	; 0x40
 800281c:	d12c      	bne.n	8002878 <HCD_HC_OUT_IRQHandler+0x220>
    hhcd->hc[ch_num].state = HC_NYET;
 800281e:	687a      	ldr	r2, [r7, #4]
 8002820:	697b      	ldr	r3, [r7, #20]
 8002822:	212c      	movs	r1, #44	; 0x2c
 8002824:	fb01 f303 	mul.w	r3, r1, r3
 8002828:	4413      	add	r3, r2
 800282a:	3361      	adds	r3, #97	; 0x61
 800282c:	2204      	movs	r2, #4
 800282e:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 8002830:	687a      	ldr	r2, [r7, #4]
 8002832:	697b      	ldr	r3, [r7, #20]
 8002834:	212c      	movs	r1, #44	; 0x2c
 8002836:	fb01 f303 	mul.w	r3, r1, r3
 800283a:	4413      	add	r3, r2
 800283c:	333d      	adds	r3, #61	; 0x3d
 800283e:	2201      	movs	r2, #1
 8002840:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8002842:	687a      	ldr	r2, [r7, #4]
 8002844:	697b      	ldr	r3, [r7, #20]
 8002846:	212c      	movs	r1, #44	; 0x2c
 8002848:	fb01 f303 	mul.w	r3, r1, r3
 800284c:	4413      	add	r3, r2
 800284e:	335c      	adds	r3, #92	; 0x5c
 8002850:	2200      	movs	r2, #0
 8002852:	601a      	str	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	697a      	ldr	r2, [r7, #20]
 800285a:	b2d2      	uxtb	r2, r2
 800285c:	4611      	mov	r1, r2
 800285e:	4618      	mov	r0, r3
 8002860:	f003 fe1b 	bl	800649a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8002864:	697b      	ldr	r3, [r7, #20]
 8002866:	015a      	lsls	r2, r3, #5
 8002868:	69bb      	ldr	r3, [r7, #24]
 800286a:	4413      	add	r3, r2
 800286c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002870:	461a      	mov	r2, r3
 8002872:	2340      	movs	r3, #64	; 0x40
 8002874:	6093      	str	r3, [r2, #8]
}
 8002876:	e254      	b.n	8002d22 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8002878:	697b      	ldr	r3, [r7, #20]
 800287a:	015a      	lsls	r2, r3, #5
 800287c:	69bb      	ldr	r3, [r7, #24]
 800287e:	4413      	add	r3, r2
 8002880:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002884:	689b      	ldr	r3, [r3, #8]
 8002886:	f003 0308 	and.w	r3, r3, #8
 800288a:	2b08      	cmp	r3, #8
 800288c:	d11a      	bne.n	80028c4 <HCD_HC_OUT_IRQHandler+0x26c>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 800288e:	697b      	ldr	r3, [r7, #20]
 8002890:	015a      	lsls	r2, r3, #5
 8002892:	69bb      	ldr	r3, [r7, #24]
 8002894:	4413      	add	r3, r2
 8002896:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800289a:	461a      	mov	r2, r3
 800289c:	2308      	movs	r3, #8
 800289e:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 80028a0:	687a      	ldr	r2, [r7, #4]
 80028a2:	697b      	ldr	r3, [r7, #20]
 80028a4:	212c      	movs	r1, #44	; 0x2c
 80028a6:	fb01 f303 	mul.w	r3, r1, r3
 80028aa:	4413      	add	r3, r2
 80028ac:	3361      	adds	r3, #97	; 0x61
 80028ae:	2205      	movs	r2, #5
 80028b0:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	697a      	ldr	r2, [r7, #20]
 80028b8:	b2d2      	uxtb	r2, r2
 80028ba:	4611      	mov	r1, r2
 80028bc:	4618      	mov	r0, r3
 80028be:	f003 fdec 	bl	800649a <USB_HC_Halt>
}
 80028c2:	e22e      	b.n	8002d22 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 80028c4:	697b      	ldr	r3, [r7, #20]
 80028c6:	015a      	lsls	r2, r3, #5
 80028c8:	69bb      	ldr	r3, [r7, #24]
 80028ca:	4413      	add	r3, r2
 80028cc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80028d0:	689b      	ldr	r3, [r3, #8]
 80028d2:	f003 0310 	and.w	r3, r3, #16
 80028d6:	2b10      	cmp	r3, #16
 80028d8:	d140      	bne.n	800295c <HCD_HC_OUT_IRQHandler+0x304>
    hhcd->hc[ch_num].ErrCnt = 0U;
 80028da:	687a      	ldr	r2, [r7, #4]
 80028dc:	697b      	ldr	r3, [r7, #20]
 80028de:	212c      	movs	r1, #44	; 0x2c
 80028e0:	fb01 f303 	mul.w	r3, r1, r3
 80028e4:	4413      	add	r3, r2
 80028e6:	335c      	adds	r3, #92	; 0x5c
 80028e8:	2200      	movs	r2, #0
 80028ea:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 80028ec:	687a      	ldr	r2, [r7, #4]
 80028ee:	697b      	ldr	r3, [r7, #20]
 80028f0:	212c      	movs	r1, #44	; 0x2c
 80028f2:	fb01 f303 	mul.w	r3, r1, r3
 80028f6:	4413      	add	r3, r2
 80028f8:	3361      	adds	r3, #97	; 0x61
 80028fa:	2203      	movs	r2, #3
 80028fc:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 80028fe:	687a      	ldr	r2, [r7, #4]
 8002900:	697b      	ldr	r3, [r7, #20]
 8002902:	212c      	movs	r1, #44	; 0x2c
 8002904:	fb01 f303 	mul.w	r3, r1, r3
 8002908:	4413      	add	r3, r2
 800290a:	333d      	adds	r3, #61	; 0x3d
 800290c:	781b      	ldrb	r3, [r3, #0]
 800290e:	2b00      	cmp	r3, #0
 8002910:	d112      	bne.n	8002938 <HCD_HC_OUT_IRQHandler+0x2e0>
      if (hhcd->hc[ch_num].speed == HCD_DEVICE_SPEED_HIGH)
 8002912:	687a      	ldr	r2, [r7, #4]
 8002914:	697b      	ldr	r3, [r7, #20]
 8002916:	212c      	movs	r1, #44	; 0x2c
 8002918:	fb01 f303 	mul.w	r3, r1, r3
 800291c:	4413      	add	r3, r2
 800291e:	333c      	adds	r3, #60	; 0x3c
 8002920:	781b      	ldrb	r3, [r3, #0]
 8002922:	2b00      	cmp	r3, #0
 8002924:	d108      	bne.n	8002938 <HCD_HC_OUT_IRQHandler+0x2e0>
        hhcd->hc[ch_num].do_ping = 1U;
 8002926:	687a      	ldr	r2, [r7, #4]
 8002928:	697b      	ldr	r3, [r7, #20]
 800292a:	212c      	movs	r1, #44	; 0x2c
 800292c:	fb01 f303 	mul.w	r3, r1, r3
 8002930:	4413      	add	r3, r2
 8002932:	333d      	adds	r3, #61	; 0x3d
 8002934:	2201      	movs	r2, #1
 8002936:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	697a      	ldr	r2, [r7, #20]
 800293e:	b2d2      	uxtb	r2, r2
 8002940:	4611      	mov	r1, r2
 8002942:	4618      	mov	r0, r3
 8002944:	f003 fda9 	bl	800649a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002948:	697b      	ldr	r3, [r7, #20]
 800294a:	015a      	lsls	r2, r3, #5
 800294c:	69bb      	ldr	r3, [r7, #24]
 800294e:	4413      	add	r3, r2
 8002950:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002954:	461a      	mov	r2, r3
 8002956:	2310      	movs	r3, #16
 8002958:	6093      	str	r3, [r2, #8]
}
 800295a:	e1e2      	b.n	8002d22 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 800295c:	697b      	ldr	r3, [r7, #20]
 800295e:	015a      	lsls	r2, r3, #5
 8002960:	69bb      	ldr	r3, [r7, #24]
 8002962:	4413      	add	r3, r2
 8002964:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002968:	689b      	ldr	r3, [r3, #8]
 800296a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800296e:	2b80      	cmp	r3, #128	; 0x80
 8002970:	d164      	bne.n	8002a3c <HCD_HC_OUT_IRQHandler+0x3e4>
    if (hhcd->Init.dma_enable == 0U)
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	691b      	ldr	r3, [r3, #16]
 8002976:	2b00      	cmp	r3, #0
 8002978:	d111      	bne.n	800299e <HCD_HC_OUT_IRQHandler+0x346>
      hhcd->hc[ch_num].state = HC_XACTERR;
 800297a:	687a      	ldr	r2, [r7, #4]
 800297c:	697b      	ldr	r3, [r7, #20]
 800297e:	212c      	movs	r1, #44	; 0x2c
 8002980:	fb01 f303 	mul.w	r3, r1, r3
 8002984:	4413      	add	r3, r2
 8002986:	3361      	adds	r3, #97	; 0x61
 8002988:	2206      	movs	r2, #6
 800298a:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	697a      	ldr	r2, [r7, #20]
 8002992:	b2d2      	uxtb	r2, r2
 8002994:	4611      	mov	r1, r2
 8002996:	4618      	mov	r0, r3
 8002998:	f003 fd7f 	bl	800649a <USB_HC_Halt>
 800299c:	e044      	b.n	8002a28 <HCD_HC_OUT_IRQHandler+0x3d0>
      hhcd->hc[ch_num].ErrCnt++;
 800299e:	687a      	ldr	r2, [r7, #4]
 80029a0:	697b      	ldr	r3, [r7, #20]
 80029a2:	212c      	movs	r1, #44	; 0x2c
 80029a4:	fb01 f303 	mul.w	r3, r1, r3
 80029a8:	4413      	add	r3, r2
 80029aa:	335c      	adds	r3, #92	; 0x5c
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	1c5a      	adds	r2, r3, #1
 80029b0:	6879      	ldr	r1, [r7, #4]
 80029b2:	697b      	ldr	r3, [r7, #20]
 80029b4:	202c      	movs	r0, #44	; 0x2c
 80029b6:	fb00 f303 	mul.w	r3, r0, r3
 80029ba:	440b      	add	r3, r1
 80029bc:	335c      	adds	r3, #92	; 0x5c
 80029be:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 80029c0:	687a      	ldr	r2, [r7, #4]
 80029c2:	697b      	ldr	r3, [r7, #20]
 80029c4:	212c      	movs	r1, #44	; 0x2c
 80029c6:	fb01 f303 	mul.w	r3, r1, r3
 80029ca:	4413      	add	r3, r2
 80029cc:	335c      	adds	r3, #92	; 0x5c
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	2b02      	cmp	r3, #2
 80029d2:	d920      	bls.n	8002a16 <HCD_HC_OUT_IRQHandler+0x3be>
        hhcd->hc[ch_num].ErrCnt = 0U;
 80029d4:	687a      	ldr	r2, [r7, #4]
 80029d6:	697b      	ldr	r3, [r7, #20]
 80029d8:	212c      	movs	r1, #44	; 0x2c
 80029da:	fb01 f303 	mul.w	r3, r1, r3
 80029de:	4413      	add	r3, r2
 80029e0:	335c      	adds	r3, #92	; 0x5c
 80029e2:	2200      	movs	r2, #0
 80029e4:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 80029e6:	687a      	ldr	r2, [r7, #4]
 80029e8:	697b      	ldr	r3, [r7, #20]
 80029ea:	212c      	movs	r1, #44	; 0x2c
 80029ec:	fb01 f303 	mul.w	r3, r1, r3
 80029f0:	4413      	add	r3, r2
 80029f2:	3360      	adds	r3, #96	; 0x60
 80029f4:	2204      	movs	r2, #4
 80029f6:	701a      	strb	r2, [r3, #0]
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80029f8:	697b      	ldr	r3, [r7, #20]
 80029fa:	b2d9      	uxtb	r1, r3
 80029fc:	687a      	ldr	r2, [r7, #4]
 80029fe:	697b      	ldr	r3, [r7, #20]
 8002a00:	202c      	movs	r0, #44	; 0x2c
 8002a02:	fb00 f303 	mul.w	r3, r0, r3
 8002a06:	4413      	add	r3, r2
 8002a08:	3360      	adds	r3, #96	; 0x60
 8002a0a:	781b      	ldrb	r3, [r3, #0]
 8002a0c:	461a      	mov	r2, r3
 8002a0e:	6878      	ldr	r0, [r7, #4]
 8002a10:	f005 ffe6 	bl	80089e0 <HAL_HCD_HC_NotifyURBChange_Callback>
 8002a14:	e008      	b.n	8002a28 <HCD_HC_OUT_IRQHandler+0x3d0>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002a16:	687a      	ldr	r2, [r7, #4]
 8002a18:	697b      	ldr	r3, [r7, #20]
 8002a1a:	212c      	movs	r1, #44	; 0x2c
 8002a1c:	fb01 f303 	mul.w	r3, r1, r3
 8002a20:	4413      	add	r3, r2
 8002a22:	3360      	adds	r3, #96	; 0x60
 8002a24:	2202      	movs	r2, #2
 8002a26:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8002a28:	697b      	ldr	r3, [r7, #20]
 8002a2a:	015a      	lsls	r2, r3, #5
 8002a2c:	69bb      	ldr	r3, [r7, #24]
 8002a2e:	4413      	add	r3, r2
 8002a30:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a34:	461a      	mov	r2, r3
 8002a36:	2380      	movs	r3, #128	; 0x80
 8002a38:	6093      	str	r3, [r2, #8]
}
 8002a3a:	e172      	b.n	8002d22 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8002a3c:	697b      	ldr	r3, [r7, #20]
 8002a3e:	015a      	lsls	r2, r3, #5
 8002a40:	69bb      	ldr	r3, [r7, #24]
 8002a42:	4413      	add	r3, r2
 8002a44:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a48:	689b      	ldr	r3, [r3, #8]
 8002a4a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002a4e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002a52:	d11b      	bne.n	8002a8c <HCD_HC_OUT_IRQHandler+0x434>
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8002a54:	687a      	ldr	r2, [r7, #4]
 8002a56:	697b      	ldr	r3, [r7, #20]
 8002a58:	212c      	movs	r1, #44	; 0x2c
 8002a5a:	fb01 f303 	mul.w	r3, r1, r3
 8002a5e:	4413      	add	r3, r2
 8002a60:	3361      	adds	r3, #97	; 0x61
 8002a62:	2208      	movs	r2, #8
 8002a64:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	697a      	ldr	r2, [r7, #20]
 8002a6c:	b2d2      	uxtb	r2, r2
 8002a6e:	4611      	mov	r1, r2
 8002a70:	4618      	mov	r0, r3
 8002a72:	f003 fd12 	bl	800649a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8002a76:	697b      	ldr	r3, [r7, #20]
 8002a78:	015a      	lsls	r2, r3, #5
 8002a7a:	69bb      	ldr	r3, [r7, #24]
 8002a7c:	4413      	add	r3, r2
 8002a7e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a82:	461a      	mov	r2, r3
 8002a84:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002a88:	6093      	str	r3, [r2, #8]
}
 8002a8a:	e14a      	b.n	8002d22 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8002a8c:	697b      	ldr	r3, [r7, #20]
 8002a8e:	015a      	lsls	r2, r3, #5
 8002a90:	69bb      	ldr	r3, [r7, #24]
 8002a92:	4413      	add	r3, r2
 8002a94:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a98:	689b      	ldr	r3, [r3, #8]
 8002a9a:	f003 0302 	and.w	r3, r3, #2
 8002a9e:	2b02      	cmp	r3, #2
 8002aa0:	f040 813f 	bne.w	8002d22 <HCD_HC_OUT_IRQHandler+0x6ca>
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8002aa4:	687a      	ldr	r2, [r7, #4]
 8002aa6:	697b      	ldr	r3, [r7, #20]
 8002aa8:	212c      	movs	r1, #44	; 0x2c
 8002aaa:	fb01 f303 	mul.w	r3, r1, r3
 8002aae:	4413      	add	r3, r2
 8002ab0:	3361      	adds	r3, #97	; 0x61
 8002ab2:	781b      	ldrb	r3, [r3, #0]
 8002ab4:	2b01      	cmp	r3, #1
 8002ab6:	d17d      	bne.n	8002bb4 <HCD_HC_OUT_IRQHandler+0x55c>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 8002ab8:	687a      	ldr	r2, [r7, #4]
 8002aba:	697b      	ldr	r3, [r7, #20]
 8002abc:	212c      	movs	r1, #44	; 0x2c
 8002abe:	fb01 f303 	mul.w	r3, r1, r3
 8002ac2:	4413      	add	r3, r2
 8002ac4:	3360      	adds	r3, #96	; 0x60
 8002ac6:	2201      	movs	r2, #1
 8002ac8:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8002aca:	687a      	ldr	r2, [r7, #4]
 8002acc:	697b      	ldr	r3, [r7, #20]
 8002ace:	212c      	movs	r1, #44	; 0x2c
 8002ad0:	fb01 f303 	mul.w	r3, r1, r3
 8002ad4:	4413      	add	r3, r2
 8002ad6:	333f      	adds	r3, #63	; 0x3f
 8002ad8:	781b      	ldrb	r3, [r3, #0]
 8002ada:	2b02      	cmp	r3, #2
 8002adc:	d00a      	beq.n	8002af4 <HCD_HC_OUT_IRQHandler+0x49c>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 8002ade:	687a      	ldr	r2, [r7, #4]
 8002ae0:	697b      	ldr	r3, [r7, #20]
 8002ae2:	212c      	movs	r1, #44	; 0x2c
 8002ae4:	fb01 f303 	mul.w	r3, r1, r3
 8002ae8:	4413      	add	r3, r2
 8002aea:	333f      	adds	r3, #63	; 0x3f
 8002aec:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8002aee:	2b03      	cmp	r3, #3
 8002af0:	f040 8100 	bne.w	8002cf4 <HCD_HC_OUT_IRQHandler+0x69c>
        if (hhcd->Init.dma_enable == 0U)
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	691b      	ldr	r3, [r3, #16]
 8002af8:	2b00      	cmp	r3, #0
 8002afa:	d113      	bne.n	8002b24 <HCD_HC_OUT_IRQHandler+0x4cc>
          hhcd->hc[ch_num].toggle_out ^= 1U;
 8002afc:	687a      	ldr	r2, [r7, #4]
 8002afe:	697b      	ldr	r3, [r7, #20]
 8002b00:	212c      	movs	r1, #44	; 0x2c
 8002b02:	fb01 f303 	mul.w	r3, r1, r3
 8002b06:	4413      	add	r3, r2
 8002b08:	3355      	adds	r3, #85	; 0x55
 8002b0a:	781b      	ldrb	r3, [r3, #0]
 8002b0c:	f083 0301 	eor.w	r3, r3, #1
 8002b10:	b2d8      	uxtb	r0, r3
 8002b12:	687a      	ldr	r2, [r7, #4]
 8002b14:	697b      	ldr	r3, [r7, #20]
 8002b16:	212c      	movs	r1, #44	; 0x2c
 8002b18:	fb01 f303 	mul.w	r3, r1, r3
 8002b1c:	4413      	add	r3, r2
 8002b1e:	3355      	adds	r3, #85	; 0x55
 8002b20:	4602      	mov	r2, r0
 8002b22:	701a      	strb	r2, [r3, #0]
        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[ch_num].xfer_len > 0U))
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	691b      	ldr	r3, [r3, #16]
 8002b28:	2b01      	cmp	r3, #1
 8002b2a:	f040 80e3 	bne.w	8002cf4 <HCD_HC_OUT_IRQHandler+0x69c>
 8002b2e:	687a      	ldr	r2, [r7, #4]
 8002b30:	697b      	ldr	r3, [r7, #20]
 8002b32:	212c      	movs	r1, #44	; 0x2c
 8002b34:	fb01 f303 	mul.w	r3, r1, r3
 8002b38:	4413      	add	r3, r2
 8002b3a:	334c      	adds	r3, #76	; 0x4c
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	f000 80d8 	beq.w	8002cf4 <HCD_HC_OUT_IRQHandler+0x69c>
          num_packets = (hhcd->hc[ch_num].xfer_len + hhcd->hc[ch_num].max_packet - 1U) / hhcd->hc[ch_num].max_packet;
 8002b44:	687a      	ldr	r2, [r7, #4]
 8002b46:	697b      	ldr	r3, [r7, #20]
 8002b48:	212c      	movs	r1, #44	; 0x2c
 8002b4a:	fb01 f303 	mul.w	r3, r1, r3
 8002b4e:	4413      	add	r3, r2
 8002b50:	334c      	adds	r3, #76	; 0x4c
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	6879      	ldr	r1, [r7, #4]
 8002b56:	697a      	ldr	r2, [r7, #20]
 8002b58:	202c      	movs	r0, #44	; 0x2c
 8002b5a:	fb00 f202 	mul.w	r2, r0, r2
 8002b5e:	440a      	add	r2, r1
 8002b60:	3240      	adds	r2, #64	; 0x40
 8002b62:	8812      	ldrh	r2, [r2, #0]
 8002b64:	4413      	add	r3, r2
 8002b66:	3b01      	subs	r3, #1
 8002b68:	6879      	ldr	r1, [r7, #4]
 8002b6a:	697a      	ldr	r2, [r7, #20]
 8002b6c:	202c      	movs	r0, #44	; 0x2c
 8002b6e:	fb00 f202 	mul.w	r2, r0, r2
 8002b72:	440a      	add	r2, r1
 8002b74:	3240      	adds	r2, #64	; 0x40
 8002b76:	8812      	ldrh	r2, [r2, #0]
 8002b78:	fbb3 f3f2 	udiv	r3, r3, r2
 8002b7c:	60fb      	str	r3, [r7, #12]
          if ((num_packets & 1U) != 0U)
 8002b7e:	68fb      	ldr	r3, [r7, #12]
 8002b80:	f003 0301 	and.w	r3, r3, #1
 8002b84:	2b00      	cmp	r3, #0
 8002b86:	f000 80b5 	beq.w	8002cf4 <HCD_HC_OUT_IRQHandler+0x69c>
            hhcd->hc[ch_num].toggle_out ^= 1U;
 8002b8a:	687a      	ldr	r2, [r7, #4]
 8002b8c:	697b      	ldr	r3, [r7, #20]
 8002b8e:	212c      	movs	r1, #44	; 0x2c
 8002b90:	fb01 f303 	mul.w	r3, r1, r3
 8002b94:	4413      	add	r3, r2
 8002b96:	3355      	adds	r3, #85	; 0x55
 8002b98:	781b      	ldrb	r3, [r3, #0]
 8002b9a:	f083 0301 	eor.w	r3, r3, #1
 8002b9e:	b2d8      	uxtb	r0, r3
 8002ba0:	687a      	ldr	r2, [r7, #4]
 8002ba2:	697b      	ldr	r3, [r7, #20]
 8002ba4:	212c      	movs	r1, #44	; 0x2c
 8002ba6:	fb01 f303 	mul.w	r3, r1, r3
 8002baa:	4413      	add	r3, r2
 8002bac:	3355      	adds	r3, #85	; 0x55
 8002bae:	4602      	mov	r2, r0
 8002bb0:	701a      	strb	r2, [r3, #0]
 8002bb2:	e09f      	b.n	8002cf4 <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8002bb4:	687a      	ldr	r2, [r7, #4]
 8002bb6:	697b      	ldr	r3, [r7, #20]
 8002bb8:	212c      	movs	r1, #44	; 0x2c
 8002bba:	fb01 f303 	mul.w	r3, r1, r3
 8002bbe:	4413      	add	r3, r2
 8002bc0:	3361      	adds	r3, #97	; 0x61
 8002bc2:	781b      	ldrb	r3, [r3, #0]
 8002bc4:	2b03      	cmp	r3, #3
 8002bc6:	d109      	bne.n	8002bdc <HCD_HC_OUT_IRQHandler+0x584>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002bc8:	687a      	ldr	r2, [r7, #4]
 8002bca:	697b      	ldr	r3, [r7, #20]
 8002bcc:	212c      	movs	r1, #44	; 0x2c
 8002bce:	fb01 f303 	mul.w	r3, r1, r3
 8002bd2:	4413      	add	r3, r2
 8002bd4:	3360      	adds	r3, #96	; 0x60
 8002bd6:	2202      	movs	r2, #2
 8002bd8:	701a      	strb	r2, [r3, #0]
 8002bda:	e08b      	b.n	8002cf4 <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 8002bdc:	687a      	ldr	r2, [r7, #4]
 8002bde:	697b      	ldr	r3, [r7, #20]
 8002be0:	212c      	movs	r1, #44	; 0x2c
 8002be2:	fb01 f303 	mul.w	r3, r1, r3
 8002be6:	4413      	add	r3, r2
 8002be8:	3361      	adds	r3, #97	; 0x61
 8002bea:	781b      	ldrb	r3, [r3, #0]
 8002bec:	2b04      	cmp	r3, #4
 8002bee:	d109      	bne.n	8002c04 <HCD_HC_OUT_IRQHandler+0x5ac>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8002bf0:	687a      	ldr	r2, [r7, #4]
 8002bf2:	697b      	ldr	r3, [r7, #20]
 8002bf4:	212c      	movs	r1, #44	; 0x2c
 8002bf6:	fb01 f303 	mul.w	r3, r1, r3
 8002bfa:	4413      	add	r3, r2
 8002bfc:	3360      	adds	r3, #96	; 0x60
 8002bfe:	2202      	movs	r2, #2
 8002c00:	701a      	strb	r2, [r3, #0]
 8002c02:	e077      	b.n	8002cf4 <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8002c04:	687a      	ldr	r2, [r7, #4]
 8002c06:	697b      	ldr	r3, [r7, #20]
 8002c08:	212c      	movs	r1, #44	; 0x2c
 8002c0a:	fb01 f303 	mul.w	r3, r1, r3
 8002c0e:	4413      	add	r3, r2
 8002c10:	3361      	adds	r3, #97	; 0x61
 8002c12:	781b      	ldrb	r3, [r3, #0]
 8002c14:	2b05      	cmp	r3, #5
 8002c16:	d109      	bne.n	8002c2c <HCD_HC_OUT_IRQHandler+0x5d4>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8002c18:	687a      	ldr	r2, [r7, #4]
 8002c1a:	697b      	ldr	r3, [r7, #20]
 8002c1c:	212c      	movs	r1, #44	; 0x2c
 8002c1e:	fb01 f303 	mul.w	r3, r1, r3
 8002c22:	4413      	add	r3, r2
 8002c24:	3360      	adds	r3, #96	; 0x60
 8002c26:	2205      	movs	r2, #5
 8002c28:	701a      	strb	r2, [r3, #0]
 8002c2a:	e063      	b.n	8002cf4 <HCD_HC_OUT_IRQHandler+0x69c>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002c2c:	687a      	ldr	r2, [r7, #4]
 8002c2e:	697b      	ldr	r3, [r7, #20]
 8002c30:	212c      	movs	r1, #44	; 0x2c
 8002c32:	fb01 f303 	mul.w	r3, r1, r3
 8002c36:	4413      	add	r3, r2
 8002c38:	3361      	adds	r3, #97	; 0x61
 8002c3a:	781b      	ldrb	r3, [r3, #0]
 8002c3c:	2b06      	cmp	r3, #6
 8002c3e:	d009      	beq.n	8002c54 <HCD_HC_OUT_IRQHandler+0x5fc>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8002c40:	687a      	ldr	r2, [r7, #4]
 8002c42:	697b      	ldr	r3, [r7, #20]
 8002c44:	212c      	movs	r1, #44	; 0x2c
 8002c46:	fb01 f303 	mul.w	r3, r1, r3
 8002c4a:	4413      	add	r3, r2
 8002c4c:	3361      	adds	r3, #97	; 0x61
 8002c4e:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002c50:	2b08      	cmp	r3, #8
 8002c52:	d14f      	bne.n	8002cf4 <HCD_HC_OUT_IRQHandler+0x69c>
      hhcd->hc[ch_num].ErrCnt++;
 8002c54:	687a      	ldr	r2, [r7, #4]
 8002c56:	697b      	ldr	r3, [r7, #20]
 8002c58:	212c      	movs	r1, #44	; 0x2c
 8002c5a:	fb01 f303 	mul.w	r3, r1, r3
 8002c5e:	4413      	add	r3, r2
 8002c60:	335c      	adds	r3, #92	; 0x5c
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	1c5a      	adds	r2, r3, #1
 8002c66:	6879      	ldr	r1, [r7, #4]
 8002c68:	697b      	ldr	r3, [r7, #20]
 8002c6a:	202c      	movs	r0, #44	; 0x2c
 8002c6c:	fb00 f303 	mul.w	r3, r0, r3
 8002c70:	440b      	add	r3, r1
 8002c72:	335c      	adds	r3, #92	; 0x5c
 8002c74:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8002c76:	687a      	ldr	r2, [r7, #4]
 8002c78:	697b      	ldr	r3, [r7, #20]
 8002c7a:	212c      	movs	r1, #44	; 0x2c
 8002c7c:	fb01 f303 	mul.w	r3, r1, r3
 8002c80:	4413      	add	r3, r2
 8002c82:	335c      	adds	r3, #92	; 0x5c
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	2b02      	cmp	r3, #2
 8002c88:	d912      	bls.n	8002cb0 <HCD_HC_OUT_IRQHandler+0x658>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8002c8a:	687a      	ldr	r2, [r7, #4]
 8002c8c:	697b      	ldr	r3, [r7, #20]
 8002c8e:	212c      	movs	r1, #44	; 0x2c
 8002c90:	fb01 f303 	mul.w	r3, r1, r3
 8002c94:	4413      	add	r3, r2
 8002c96:	335c      	adds	r3, #92	; 0x5c
 8002c98:	2200      	movs	r2, #0
 8002c9a:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002c9c:	687a      	ldr	r2, [r7, #4]
 8002c9e:	697b      	ldr	r3, [r7, #20]
 8002ca0:	212c      	movs	r1, #44	; 0x2c
 8002ca2:	fb01 f303 	mul.w	r3, r1, r3
 8002ca6:	4413      	add	r3, r2
 8002ca8:	3360      	adds	r3, #96	; 0x60
 8002caa:	2204      	movs	r2, #4
 8002cac:	701a      	strb	r2, [r3, #0]
 8002cae:	e021      	b.n	8002cf4 <HCD_HC_OUT_IRQHandler+0x69c>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002cb0:	687a      	ldr	r2, [r7, #4]
 8002cb2:	697b      	ldr	r3, [r7, #20]
 8002cb4:	212c      	movs	r1, #44	; 0x2c
 8002cb6:	fb01 f303 	mul.w	r3, r1, r3
 8002cba:	4413      	add	r3, r2
 8002cbc:	3360      	adds	r3, #96	; 0x60
 8002cbe:	2202      	movs	r2, #2
 8002cc0:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002cc2:	697b      	ldr	r3, [r7, #20]
 8002cc4:	015a      	lsls	r2, r3, #5
 8002cc6:	69bb      	ldr	r3, [r7, #24]
 8002cc8:	4413      	add	r3, r2
 8002cca:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	613b      	str	r3, [r7, #16]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002cd2:	693b      	ldr	r3, [r7, #16]
 8002cd4:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002cd8:	613b      	str	r3, [r7, #16]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002cda:	693b      	ldr	r3, [r7, #16]
 8002cdc:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002ce0:	613b      	str	r3, [r7, #16]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002ce2:	697b      	ldr	r3, [r7, #20]
 8002ce4:	015a      	lsls	r2, r3, #5
 8002ce6:	69bb      	ldr	r3, [r7, #24]
 8002ce8:	4413      	add	r3, r2
 8002cea:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002cee:	461a      	mov	r2, r3
 8002cf0:	693b      	ldr	r3, [r7, #16]
 8002cf2:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8002cf4:	697b      	ldr	r3, [r7, #20]
 8002cf6:	015a      	lsls	r2, r3, #5
 8002cf8:	69bb      	ldr	r3, [r7, #24]
 8002cfa:	4413      	add	r3, r2
 8002cfc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002d00:	461a      	mov	r2, r3
 8002d02:	2302      	movs	r3, #2
 8002d04:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002d06:	697b      	ldr	r3, [r7, #20]
 8002d08:	b2d9      	uxtb	r1, r3
 8002d0a:	687a      	ldr	r2, [r7, #4]
 8002d0c:	697b      	ldr	r3, [r7, #20]
 8002d0e:	202c      	movs	r0, #44	; 0x2c
 8002d10:	fb00 f303 	mul.w	r3, r0, r3
 8002d14:	4413      	add	r3, r2
 8002d16:	3360      	adds	r3, #96	; 0x60
 8002d18:	781b      	ldrb	r3, [r3, #0]
 8002d1a:	461a      	mov	r2, r3
 8002d1c:	6878      	ldr	r0, [r7, #4]
 8002d1e:	f005 fe5f 	bl	80089e0 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8002d22:	bf00      	nop
 8002d24:	3720      	adds	r7, #32
 8002d26:	46bd      	mov	sp, r7
 8002d28:	bd80      	pop	{r7, pc}

08002d2a <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8002d2a:	b580      	push	{r7, lr}
 8002d2c:	b08a      	sub	sp, #40	; 0x28
 8002d2e:	af00      	add	r7, sp, #0
 8002d30:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002d38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d3a:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t ch_num;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	6a1b      	ldr	r3, [r3, #32]
 8002d42:	61fb      	str	r3, [r7, #28]
  ch_num = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 8002d44:	69fb      	ldr	r3, [r7, #28]
 8002d46:	f003 030f 	and.w	r3, r3, #15
 8002d4a:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8002d4c:	69fb      	ldr	r3, [r7, #28]
 8002d4e:	0c5b      	lsrs	r3, r3, #17
 8002d50:	f003 030f 	and.w	r3, r3, #15
 8002d54:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002d56:	69fb      	ldr	r3, [r7, #28]
 8002d58:	091b      	lsrs	r3, r3, #4
 8002d5a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002d5e:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 8002d60:	697b      	ldr	r3, [r7, #20]
 8002d62:	2b02      	cmp	r3, #2
 8002d64:	d004      	beq.n	8002d70 <HCD_RXQLVL_IRQHandler+0x46>
 8002d66:	697b      	ldr	r3, [r7, #20]
 8002d68:	2b05      	cmp	r3, #5
 8002d6a:	f000 80a9 	beq.w	8002ec0 <HCD_RXQLVL_IRQHandler+0x196>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 8002d6e:	e0aa      	b.n	8002ec6 <HCD_RXQLVL_IRQHandler+0x19c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 8002d70:	693b      	ldr	r3, [r7, #16]
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	f000 80a6 	beq.w	8002ec4 <HCD_RXQLVL_IRQHandler+0x19a>
 8002d78:	687a      	ldr	r2, [r7, #4]
 8002d7a:	69bb      	ldr	r3, [r7, #24]
 8002d7c:	212c      	movs	r1, #44	; 0x2c
 8002d7e:	fb01 f303 	mul.w	r3, r1, r3
 8002d82:	4413      	add	r3, r2
 8002d84:	3344      	adds	r3, #68	; 0x44
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	f000 809b 	beq.w	8002ec4 <HCD_RXQLVL_IRQHandler+0x19a>
        if ((hhcd->hc[ch_num].xfer_count + pktcnt) <= hhcd->hc[ch_num].xfer_len)
 8002d8e:	687a      	ldr	r2, [r7, #4]
 8002d90:	69bb      	ldr	r3, [r7, #24]
 8002d92:	212c      	movs	r1, #44	; 0x2c
 8002d94:	fb01 f303 	mul.w	r3, r1, r3
 8002d98:	4413      	add	r3, r2
 8002d9a:	3350      	adds	r3, #80	; 0x50
 8002d9c:	681a      	ldr	r2, [r3, #0]
 8002d9e:	693b      	ldr	r3, [r7, #16]
 8002da0:	441a      	add	r2, r3
 8002da2:	6879      	ldr	r1, [r7, #4]
 8002da4:	69bb      	ldr	r3, [r7, #24]
 8002da6:	202c      	movs	r0, #44	; 0x2c
 8002da8:	fb00 f303 	mul.w	r3, r0, r3
 8002dac:	440b      	add	r3, r1
 8002dae:	334c      	adds	r3, #76	; 0x4c
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	429a      	cmp	r2, r3
 8002db4:	d87a      	bhi.n	8002eac <HCD_RXQLVL_IRQHandler+0x182>
          (void)USB_ReadPacket(hhcd->Instance,
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	6818      	ldr	r0, [r3, #0]
 8002dba:	687a      	ldr	r2, [r7, #4]
 8002dbc:	69bb      	ldr	r3, [r7, #24]
 8002dbe:	212c      	movs	r1, #44	; 0x2c
 8002dc0:	fb01 f303 	mul.w	r3, r1, r3
 8002dc4:	4413      	add	r3, r2
 8002dc6:	3344      	adds	r3, #68	; 0x44
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	693a      	ldr	r2, [r7, #16]
 8002dcc:	b292      	uxth	r2, r2
 8002dce:	4619      	mov	r1, r3
 8002dd0:	f002 feba 	bl	8005b48 <USB_ReadPacket>
          hhcd->hc[ch_num].xfer_buff += pktcnt;
 8002dd4:	687a      	ldr	r2, [r7, #4]
 8002dd6:	69bb      	ldr	r3, [r7, #24]
 8002dd8:	212c      	movs	r1, #44	; 0x2c
 8002dda:	fb01 f303 	mul.w	r3, r1, r3
 8002dde:	4413      	add	r3, r2
 8002de0:	3344      	adds	r3, #68	; 0x44
 8002de2:	681a      	ldr	r2, [r3, #0]
 8002de4:	693b      	ldr	r3, [r7, #16]
 8002de6:	441a      	add	r2, r3
 8002de8:	6879      	ldr	r1, [r7, #4]
 8002dea:	69bb      	ldr	r3, [r7, #24]
 8002dec:	202c      	movs	r0, #44	; 0x2c
 8002dee:	fb00 f303 	mul.w	r3, r0, r3
 8002df2:	440b      	add	r3, r1
 8002df4:	3344      	adds	r3, #68	; 0x44
 8002df6:	601a      	str	r2, [r3, #0]
          hhcd->hc[ch_num].xfer_count += pktcnt;
 8002df8:	687a      	ldr	r2, [r7, #4]
 8002dfa:	69bb      	ldr	r3, [r7, #24]
 8002dfc:	212c      	movs	r1, #44	; 0x2c
 8002dfe:	fb01 f303 	mul.w	r3, r1, r3
 8002e02:	4413      	add	r3, r2
 8002e04:	3350      	adds	r3, #80	; 0x50
 8002e06:	681a      	ldr	r2, [r3, #0]
 8002e08:	693b      	ldr	r3, [r7, #16]
 8002e0a:	441a      	add	r2, r3
 8002e0c:	6879      	ldr	r1, [r7, #4]
 8002e0e:	69bb      	ldr	r3, [r7, #24]
 8002e10:	202c      	movs	r0, #44	; 0x2c
 8002e12:	fb00 f303 	mul.w	r3, r0, r3
 8002e16:	440b      	add	r3, r1
 8002e18:	3350      	adds	r3, #80	; 0x50
 8002e1a:	601a      	str	r2, [r3, #0]
          xferSizePktCnt = (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 8002e1c:	69bb      	ldr	r3, [r7, #24]
 8002e1e:	015a      	lsls	r2, r3, #5
 8002e20:	6a3b      	ldr	r3, [r7, #32]
 8002e22:	4413      	add	r3, r2
 8002e24:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002e28:	691b      	ldr	r3, [r3, #16]
 8002e2a:	0cdb      	lsrs	r3, r3, #19
 8002e2c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002e30:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[ch_num].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 8002e32:	687a      	ldr	r2, [r7, #4]
 8002e34:	69bb      	ldr	r3, [r7, #24]
 8002e36:	212c      	movs	r1, #44	; 0x2c
 8002e38:	fb01 f303 	mul.w	r3, r1, r3
 8002e3c:	4413      	add	r3, r2
 8002e3e:	3340      	adds	r3, #64	; 0x40
 8002e40:	881b      	ldrh	r3, [r3, #0]
 8002e42:	461a      	mov	r2, r3
 8002e44:	693b      	ldr	r3, [r7, #16]
 8002e46:	4293      	cmp	r3, r2
 8002e48:	d13c      	bne.n	8002ec4 <HCD_RXQLVL_IRQHandler+0x19a>
 8002e4a:	68fb      	ldr	r3, [r7, #12]
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	d039      	beq.n	8002ec4 <HCD_RXQLVL_IRQHandler+0x19a>
            tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002e50:	69bb      	ldr	r3, [r7, #24]
 8002e52:	015a      	lsls	r2, r3, #5
 8002e54:	6a3b      	ldr	r3, [r7, #32]
 8002e56:	4413      	add	r3, r2
 8002e58:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002e60:	68bb      	ldr	r3, [r7, #8]
 8002e62:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002e66:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002e68:	68bb      	ldr	r3, [r7, #8]
 8002e6a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002e6e:	60bb      	str	r3, [r7, #8]
            USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002e70:	69bb      	ldr	r3, [r7, #24]
 8002e72:	015a      	lsls	r2, r3, #5
 8002e74:	6a3b      	ldr	r3, [r7, #32]
 8002e76:	4413      	add	r3, r2
 8002e78:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002e7c:	461a      	mov	r2, r3
 8002e7e:	68bb      	ldr	r3, [r7, #8]
 8002e80:	6013      	str	r3, [r2, #0]
            hhcd->hc[ch_num].toggle_in ^= 1U;
 8002e82:	687a      	ldr	r2, [r7, #4]
 8002e84:	69bb      	ldr	r3, [r7, #24]
 8002e86:	212c      	movs	r1, #44	; 0x2c
 8002e88:	fb01 f303 	mul.w	r3, r1, r3
 8002e8c:	4413      	add	r3, r2
 8002e8e:	3354      	adds	r3, #84	; 0x54
 8002e90:	781b      	ldrb	r3, [r3, #0]
 8002e92:	f083 0301 	eor.w	r3, r3, #1
 8002e96:	b2d8      	uxtb	r0, r3
 8002e98:	687a      	ldr	r2, [r7, #4]
 8002e9a:	69bb      	ldr	r3, [r7, #24]
 8002e9c:	212c      	movs	r1, #44	; 0x2c
 8002e9e:	fb01 f303 	mul.w	r3, r1, r3
 8002ea2:	4413      	add	r3, r2
 8002ea4:	3354      	adds	r3, #84	; 0x54
 8002ea6:	4602      	mov	r2, r0
 8002ea8:	701a      	strb	r2, [r3, #0]
      break;
 8002eaa:	e00b      	b.n	8002ec4 <HCD_RXQLVL_IRQHandler+0x19a>
          hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002eac:	687a      	ldr	r2, [r7, #4]
 8002eae:	69bb      	ldr	r3, [r7, #24]
 8002eb0:	212c      	movs	r1, #44	; 0x2c
 8002eb2:	fb01 f303 	mul.w	r3, r1, r3
 8002eb6:	4413      	add	r3, r2
 8002eb8:	3360      	adds	r3, #96	; 0x60
 8002eba:	2204      	movs	r2, #4
 8002ebc:	701a      	strb	r2, [r3, #0]
      break;
 8002ebe:	e001      	b.n	8002ec4 <HCD_RXQLVL_IRQHandler+0x19a>
      break;
 8002ec0:	bf00      	nop
 8002ec2:	e000      	b.n	8002ec6 <HCD_RXQLVL_IRQHandler+0x19c>
      break;
 8002ec4:	bf00      	nop
  }
}
 8002ec6:	bf00      	nop
 8002ec8:	3728      	adds	r7, #40	; 0x28
 8002eca:	46bd      	mov	sp, r7
 8002ecc:	bd80      	pop	{r7, pc}

08002ece <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8002ece:	b580      	push	{r7, lr}
 8002ed0:	b086      	sub	sp, #24
 8002ed2:	af00      	add	r7, sp, #0
 8002ed4:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002edc:	697b      	ldr	r3, [r7, #20]
 8002ede:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 8002ee0:	693b      	ldr	r3, [r7, #16]
 8002ee2:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 8002eea:	693b      	ldr	r3, [r7, #16]
 8002eec:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8002ef4:	68bb      	ldr	r3, [r7, #8]
 8002ef6:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8002efa:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	f003 0302 	and.w	r3, r3, #2
 8002f02:	2b02      	cmp	r3, #2
 8002f04:	d10b      	bne.n	8002f1e <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8002f06:	68fb      	ldr	r3, [r7, #12]
 8002f08:	f003 0301 	and.w	r3, r3, #1
 8002f0c:	2b01      	cmp	r3, #1
 8002f0e:	d102      	bne.n	8002f16 <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 8002f10:	6878      	ldr	r0, [r7, #4]
 8002f12:	f005 fd49 	bl	80089a8 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 8002f16:	68bb      	ldr	r3, [r7, #8]
 8002f18:	f043 0302 	orr.w	r3, r3, #2
 8002f1c:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	f003 0308 	and.w	r3, r3, #8
 8002f24:	2b08      	cmp	r3, #8
 8002f26:	d132      	bne.n	8002f8e <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8002f28:	68bb      	ldr	r3, [r7, #8]
 8002f2a:	f043 0308 	orr.w	r3, r3, #8
 8002f2e:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	f003 0304 	and.w	r3, r3, #4
 8002f36:	2b04      	cmp	r3, #4
 8002f38:	d126      	bne.n	8002f88 <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	699b      	ldr	r3, [r3, #24]
 8002f3e:	2b02      	cmp	r3, #2
 8002f40:	d113      	bne.n	8002f6a <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8002f42:	68fb      	ldr	r3, [r7, #12]
 8002f44:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 8002f48:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002f4c:	d106      	bne.n	8002f5c <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	2102      	movs	r1, #2
 8002f54:	4618      	mov	r0, r3
 8002f56:	f002 ff65 	bl	8005e24 <USB_InitFSLSPClkSel>
 8002f5a:	e011      	b.n	8002f80 <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	2101      	movs	r1, #1
 8002f62:	4618      	mov	r0, r3
 8002f64:	f002 ff5e 	bl	8005e24 <USB_InitFSLSPClkSel>
 8002f68:	e00a      	b.n	8002f80 <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	68db      	ldr	r3, [r3, #12]
 8002f6e:	2b01      	cmp	r3, #1
 8002f70:	d106      	bne.n	8002f80 <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 8002f72:	693b      	ldr	r3, [r7, #16]
 8002f74:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002f78:	461a      	mov	r2, r3
 8002f7a:	f64e 2360 	movw	r3, #60000	; 0xea60
 8002f7e:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8002f80:	6878      	ldr	r0, [r7, #4]
 8002f82:	f005 fd3b 	bl	80089fc <HAL_HCD_PortEnabled_Callback>
 8002f86:	e002      	b.n	8002f8e <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 8002f88:	6878      	ldr	r0, [r7, #4]
 8002f8a:	f005 fd45 	bl	8008a18 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	f003 0320 	and.w	r3, r3, #32
 8002f94:	2b20      	cmp	r3, #32
 8002f96:	d103      	bne.n	8002fa0 <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8002f98:	68bb      	ldr	r3, [r7, #8]
 8002f9a:	f043 0320 	orr.w	r3, r3, #32
 8002f9e:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8002fa0:	693b      	ldr	r3, [r7, #16]
 8002fa2:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8002fa6:	461a      	mov	r2, r3
 8002fa8:	68bb      	ldr	r3, [r7, #8]
 8002faa:	6013      	str	r3, [r2, #0]
}
 8002fac:	bf00      	nop
 8002fae:	3718      	adds	r7, #24
 8002fb0:	46bd      	mov	sp, r7
 8002fb2:	bd80      	pop	{r7, pc}

08002fb4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002fb4:	b580      	push	{r7, lr}
 8002fb6:	b084      	sub	sp, #16
 8002fb8:	af00      	add	r7, sp, #0
 8002fba:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	d101      	bne.n	8002fc6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002fc2:	2301      	movs	r3, #1
 8002fc4:	e12b      	b.n	800321e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002fcc:	b2db      	uxtb	r3, r3
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	d106      	bne.n	8002fe0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	2200      	movs	r2, #0
 8002fd6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002fda:	6878      	ldr	r0, [r7, #4]
 8002fdc:	f7fd fda8 	bl	8000b30 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	2224      	movs	r2, #36	; 0x24
 8002fe4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	681a      	ldr	r2, [r3, #0]
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	f022 0201 	bic.w	r2, r2, #1
 8002ff6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	681a      	ldr	r2, [r3, #0]
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003006:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	681a      	ldr	r2, [r3, #0]
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003016:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003018:	f001 fa20 	bl	800445c <HAL_RCC_GetPCLK1Freq>
 800301c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	685b      	ldr	r3, [r3, #4]
 8003022:	4a81      	ldr	r2, [pc, #516]	; (8003228 <HAL_I2C_Init+0x274>)
 8003024:	4293      	cmp	r3, r2
 8003026:	d807      	bhi.n	8003038 <HAL_I2C_Init+0x84>
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	4a80      	ldr	r2, [pc, #512]	; (800322c <HAL_I2C_Init+0x278>)
 800302c:	4293      	cmp	r3, r2
 800302e:	bf94      	ite	ls
 8003030:	2301      	movls	r3, #1
 8003032:	2300      	movhi	r3, #0
 8003034:	b2db      	uxtb	r3, r3
 8003036:	e006      	b.n	8003046 <HAL_I2C_Init+0x92>
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	4a7d      	ldr	r2, [pc, #500]	; (8003230 <HAL_I2C_Init+0x27c>)
 800303c:	4293      	cmp	r3, r2
 800303e:	bf94      	ite	ls
 8003040:	2301      	movls	r3, #1
 8003042:	2300      	movhi	r3, #0
 8003044:	b2db      	uxtb	r3, r3
 8003046:	2b00      	cmp	r3, #0
 8003048:	d001      	beq.n	800304e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800304a:	2301      	movs	r3, #1
 800304c:	e0e7      	b.n	800321e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800304e:	68fb      	ldr	r3, [r7, #12]
 8003050:	4a78      	ldr	r2, [pc, #480]	; (8003234 <HAL_I2C_Init+0x280>)
 8003052:	fba2 2303 	umull	r2, r3, r2, r3
 8003056:	0c9b      	lsrs	r3, r3, #18
 8003058:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	685b      	ldr	r3, [r3, #4]
 8003060:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	68ba      	ldr	r2, [r7, #8]
 800306a:	430a      	orrs	r2, r1
 800306c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	6a1b      	ldr	r3, [r3, #32]
 8003074:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	685b      	ldr	r3, [r3, #4]
 800307c:	4a6a      	ldr	r2, [pc, #424]	; (8003228 <HAL_I2C_Init+0x274>)
 800307e:	4293      	cmp	r3, r2
 8003080:	d802      	bhi.n	8003088 <HAL_I2C_Init+0xd4>
 8003082:	68bb      	ldr	r3, [r7, #8]
 8003084:	3301      	adds	r3, #1
 8003086:	e009      	b.n	800309c <HAL_I2C_Init+0xe8>
 8003088:	68bb      	ldr	r3, [r7, #8]
 800308a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800308e:	fb02 f303 	mul.w	r3, r2, r3
 8003092:	4a69      	ldr	r2, [pc, #420]	; (8003238 <HAL_I2C_Init+0x284>)
 8003094:	fba2 2303 	umull	r2, r3, r2, r3
 8003098:	099b      	lsrs	r3, r3, #6
 800309a:	3301      	adds	r3, #1
 800309c:	687a      	ldr	r2, [r7, #4]
 800309e:	6812      	ldr	r2, [r2, #0]
 80030a0:	430b      	orrs	r3, r1
 80030a2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	69db      	ldr	r3, [r3, #28]
 80030aa:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80030ae:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	685b      	ldr	r3, [r3, #4]
 80030b6:	495c      	ldr	r1, [pc, #368]	; (8003228 <HAL_I2C_Init+0x274>)
 80030b8:	428b      	cmp	r3, r1
 80030ba:	d819      	bhi.n	80030f0 <HAL_I2C_Init+0x13c>
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	1e59      	subs	r1, r3, #1
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	685b      	ldr	r3, [r3, #4]
 80030c4:	005b      	lsls	r3, r3, #1
 80030c6:	fbb1 f3f3 	udiv	r3, r1, r3
 80030ca:	1c59      	adds	r1, r3, #1
 80030cc:	f640 73fc 	movw	r3, #4092	; 0xffc
 80030d0:	400b      	ands	r3, r1
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	d00a      	beq.n	80030ec <HAL_I2C_Init+0x138>
 80030d6:	68fb      	ldr	r3, [r7, #12]
 80030d8:	1e59      	subs	r1, r3, #1
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	685b      	ldr	r3, [r3, #4]
 80030de:	005b      	lsls	r3, r3, #1
 80030e0:	fbb1 f3f3 	udiv	r3, r1, r3
 80030e4:	3301      	adds	r3, #1
 80030e6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80030ea:	e051      	b.n	8003190 <HAL_I2C_Init+0x1dc>
 80030ec:	2304      	movs	r3, #4
 80030ee:	e04f      	b.n	8003190 <HAL_I2C_Init+0x1dc>
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	689b      	ldr	r3, [r3, #8]
 80030f4:	2b00      	cmp	r3, #0
 80030f6:	d111      	bne.n	800311c <HAL_I2C_Init+0x168>
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	1e58      	subs	r0, r3, #1
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	6859      	ldr	r1, [r3, #4]
 8003100:	460b      	mov	r3, r1
 8003102:	005b      	lsls	r3, r3, #1
 8003104:	440b      	add	r3, r1
 8003106:	fbb0 f3f3 	udiv	r3, r0, r3
 800310a:	3301      	adds	r3, #1
 800310c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003110:	2b00      	cmp	r3, #0
 8003112:	bf0c      	ite	eq
 8003114:	2301      	moveq	r3, #1
 8003116:	2300      	movne	r3, #0
 8003118:	b2db      	uxtb	r3, r3
 800311a:	e012      	b.n	8003142 <HAL_I2C_Init+0x18e>
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	1e58      	subs	r0, r3, #1
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	6859      	ldr	r1, [r3, #4]
 8003124:	460b      	mov	r3, r1
 8003126:	009b      	lsls	r3, r3, #2
 8003128:	440b      	add	r3, r1
 800312a:	0099      	lsls	r1, r3, #2
 800312c:	440b      	add	r3, r1
 800312e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003132:	3301      	adds	r3, #1
 8003134:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003138:	2b00      	cmp	r3, #0
 800313a:	bf0c      	ite	eq
 800313c:	2301      	moveq	r3, #1
 800313e:	2300      	movne	r3, #0
 8003140:	b2db      	uxtb	r3, r3
 8003142:	2b00      	cmp	r3, #0
 8003144:	d001      	beq.n	800314a <HAL_I2C_Init+0x196>
 8003146:	2301      	movs	r3, #1
 8003148:	e022      	b.n	8003190 <HAL_I2C_Init+0x1dc>
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	689b      	ldr	r3, [r3, #8]
 800314e:	2b00      	cmp	r3, #0
 8003150:	d10e      	bne.n	8003170 <HAL_I2C_Init+0x1bc>
 8003152:	68fb      	ldr	r3, [r7, #12]
 8003154:	1e58      	subs	r0, r3, #1
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	6859      	ldr	r1, [r3, #4]
 800315a:	460b      	mov	r3, r1
 800315c:	005b      	lsls	r3, r3, #1
 800315e:	440b      	add	r3, r1
 8003160:	fbb0 f3f3 	udiv	r3, r0, r3
 8003164:	3301      	adds	r3, #1
 8003166:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800316a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800316e:	e00f      	b.n	8003190 <HAL_I2C_Init+0x1dc>
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	1e58      	subs	r0, r3, #1
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	6859      	ldr	r1, [r3, #4]
 8003178:	460b      	mov	r3, r1
 800317a:	009b      	lsls	r3, r3, #2
 800317c:	440b      	add	r3, r1
 800317e:	0099      	lsls	r1, r3, #2
 8003180:	440b      	add	r3, r1
 8003182:	fbb0 f3f3 	udiv	r3, r0, r3
 8003186:	3301      	adds	r3, #1
 8003188:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800318c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003190:	6879      	ldr	r1, [r7, #4]
 8003192:	6809      	ldr	r1, [r1, #0]
 8003194:	4313      	orrs	r3, r2
 8003196:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	69da      	ldr	r2, [r3, #28]
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	6a1b      	ldr	r3, [r3, #32]
 80031aa:	431a      	orrs	r2, r3
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	430a      	orrs	r2, r1
 80031b2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	689b      	ldr	r3, [r3, #8]
 80031ba:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80031be:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80031c2:	687a      	ldr	r2, [r7, #4]
 80031c4:	6911      	ldr	r1, [r2, #16]
 80031c6:	687a      	ldr	r2, [r7, #4]
 80031c8:	68d2      	ldr	r2, [r2, #12]
 80031ca:	4311      	orrs	r1, r2
 80031cc:	687a      	ldr	r2, [r7, #4]
 80031ce:	6812      	ldr	r2, [r2, #0]
 80031d0:	430b      	orrs	r3, r1
 80031d2:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	68db      	ldr	r3, [r3, #12]
 80031da:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	695a      	ldr	r2, [r3, #20]
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	699b      	ldr	r3, [r3, #24]
 80031e6:	431a      	orrs	r2, r3
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	430a      	orrs	r2, r1
 80031ee:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	681a      	ldr	r2, [r3, #0]
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	f042 0201 	orr.w	r2, r2, #1
 80031fe:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	2200      	movs	r2, #0
 8003204:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	2220      	movs	r2, #32
 800320a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	2200      	movs	r2, #0
 8003212:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	2200      	movs	r2, #0
 8003218:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800321c:	2300      	movs	r3, #0
}
 800321e:	4618      	mov	r0, r3
 8003220:	3710      	adds	r7, #16
 8003222:	46bd      	mov	sp, r7
 8003224:	bd80      	pop	{r7, pc}
 8003226:	bf00      	nop
 8003228:	000186a0 	.word	0x000186a0
 800322c:	001e847f 	.word	0x001e847f
 8003230:	003d08ff 	.word	0x003d08ff
 8003234:	431bde83 	.word	0x431bde83
 8003238:	10624dd3 	.word	0x10624dd3

0800323c <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 800323c:	b580      	push	{r7, lr}
 800323e:	b088      	sub	sp, #32
 8003240:	af00      	add	r7, sp, #0
 8003242:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	2b00      	cmp	r3, #0
 8003248:	d101      	bne.n	800324e <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 800324a:	2301      	movs	r3, #1
 800324c:	e128      	b.n	80034a0 <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003254:	b2db      	uxtb	r3, r3
 8003256:	2b00      	cmp	r3, #0
 8003258:	d109      	bne.n	800326e <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	2200      	movs	r2, #0
 800325e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	4a90      	ldr	r2, [pc, #576]	; (80034a8 <HAL_I2S_Init+0x26c>)
 8003266:	635a      	str	r2, [r3, #52]	; 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 8003268:	6878      	ldr	r0, [r7, #4]
 800326a:	f7fd fca9 	bl	8000bc0 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	2202      	movs	r2, #2
 8003272:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	69db      	ldr	r3, [r3, #28]
 800327c:	687a      	ldr	r2, [r7, #4]
 800327e:	6812      	ldr	r2, [r2, #0]
 8003280:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8003284:	f023 030f 	bic.w	r3, r3, #15
 8003288:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	2202      	movs	r2, #2
 8003290:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	695b      	ldr	r3, [r3, #20]
 8003296:	2b02      	cmp	r3, #2
 8003298:	d060      	beq.n	800335c <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	68db      	ldr	r3, [r3, #12]
 800329e:	2b00      	cmp	r3, #0
 80032a0:	d102      	bne.n	80032a8 <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 80032a2:	2310      	movs	r3, #16
 80032a4:	617b      	str	r3, [r7, #20]
 80032a6:	e001      	b.n	80032ac <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 80032a8:	2320      	movs	r3, #32
 80032aa:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	689b      	ldr	r3, [r3, #8]
 80032b0:	2b20      	cmp	r3, #32
 80032b2:	d802      	bhi.n	80032ba <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 80032b4:	697b      	ldr	r3, [r7, #20]
 80032b6:	005b      	lsls	r3, r3, #1
 80032b8:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 80032ba:	2001      	movs	r0, #1
 80032bc:	f001 f9d8 	bl	8004670 <HAL_RCCEx_GetPeriphCLKFreq>
 80032c0:	60f8      	str	r0, [r7, #12]
#endif /* I2S_APB1_APB2_FEATURE */

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	691b      	ldr	r3, [r3, #16]
 80032c6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80032ca:	d125      	bne.n	8003318 <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	68db      	ldr	r3, [r3, #12]
 80032d0:	2b00      	cmp	r3, #0
 80032d2:	d010      	beq.n	80032f6 <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80032d4:	697b      	ldr	r3, [r7, #20]
 80032d6:	009b      	lsls	r3, r3, #2
 80032d8:	68fa      	ldr	r2, [r7, #12]
 80032da:	fbb2 f2f3 	udiv	r2, r2, r3
 80032de:	4613      	mov	r3, r2
 80032e0:	009b      	lsls	r3, r3, #2
 80032e2:	4413      	add	r3, r2
 80032e4:	005b      	lsls	r3, r3, #1
 80032e6:	461a      	mov	r2, r3
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	695b      	ldr	r3, [r3, #20]
 80032ec:	fbb2 f3f3 	udiv	r3, r2, r3
 80032f0:	3305      	adds	r3, #5
 80032f2:	613b      	str	r3, [r7, #16]
 80032f4:	e01f      	b.n	8003336 <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80032f6:	697b      	ldr	r3, [r7, #20]
 80032f8:	00db      	lsls	r3, r3, #3
 80032fa:	68fa      	ldr	r2, [r7, #12]
 80032fc:	fbb2 f2f3 	udiv	r2, r2, r3
 8003300:	4613      	mov	r3, r2
 8003302:	009b      	lsls	r3, r3, #2
 8003304:	4413      	add	r3, r2
 8003306:	005b      	lsls	r3, r3, #1
 8003308:	461a      	mov	r2, r3
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	695b      	ldr	r3, [r3, #20]
 800330e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003312:	3305      	adds	r3, #5
 8003314:	613b      	str	r3, [r7, #16]
 8003316:	e00e      	b.n	8003336 <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8003318:	68fa      	ldr	r2, [r7, #12]
 800331a:	697b      	ldr	r3, [r7, #20]
 800331c:	fbb2 f2f3 	udiv	r2, r2, r3
 8003320:	4613      	mov	r3, r2
 8003322:	009b      	lsls	r3, r3, #2
 8003324:	4413      	add	r3, r2
 8003326:	005b      	lsls	r3, r3, #1
 8003328:	461a      	mov	r2, r3
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	695b      	ldr	r3, [r3, #20]
 800332e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003332:	3305      	adds	r3, #5
 8003334:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 8003336:	693b      	ldr	r3, [r7, #16]
 8003338:	4a5c      	ldr	r2, [pc, #368]	; (80034ac <HAL_I2S_Init+0x270>)
 800333a:	fba2 2303 	umull	r2, r3, r2, r3
 800333e:	08db      	lsrs	r3, r3, #3
 8003340:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 8003342:	693b      	ldr	r3, [r7, #16]
 8003344:	f003 0301 	and.w	r3, r3, #1
 8003348:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 800334a:	693a      	ldr	r2, [r7, #16]
 800334c:	69bb      	ldr	r3, [r7, #24]
 800334e:	1ad3      	subs	r3, r2, r3
 8003350:	085b      	lsrs	r3, r3, #1
 8003352:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 8003354:	69bb      	ldr	r3, [r7, #24]
 8003356:	021b      	lsls	r3, r3, #8
 8003358:	61bb      	str	r3, [r7, #24]
 800335a:	e003      	b.n	8003364 <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 800335c:	2302      	movs	r3, #2
 800335e:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 8003360:	2300      	movs	r3, #0
 8003362:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8003364:	69fb      	ldr	r3, [r7, #28]
 8003366:	2b01      	cmp	r3, #1
 8003368:	d902      	bls.n	8003370 <HAL_I2S_Init+0x134>
 800336a:	69fb      	ldr	r3, [r7, #28]
 800336c:	2bff      	cmp	r3, #255	; 0xff
 800336e:	d907      	bls.n	8003380 <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003374:	f043 0210 	orr.w	r2, r3, #16
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	645a      	str	r2, [r3, #68]	; 0x44
    return  HAL_ERROR;
 800337c:	2301      	movs	r3, #1
 800337e:	e08f      	b.n	80034a0 <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	691a      	ldr	r2, [r3, #16]
 8003384:	69bb      	ldr	r3, [r7, #24]
 8003386:	ea42 0103 	orr.w	r1, r2, r3
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	69fa      	ldr	r2, [r7, #28]
 8003390:	430a      	orrs	r2, r1
 8003392:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	69db      	ldr	r3, [r3, #28]
 800339a:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 800339e:	f023 030f 	bic.w	r3, r3, #15
 80033a2:	687a      	ldr	r2, [r7, #4]
 80033a4:	6851      	ldr	r1, [r2, #4]
 80033a6:	687a      	ldr	r2, [r7, #4]
 80033a8:	6892      	ldr	r2, [r2, #8]
 80033aa:	4311      	orrs	r1, r2
 80033ac:	687a      	ldr	r2, [r7, #4]
 80033ae:	68d2      	ldr	r2, [r2, #12]
 80033b0:	4311      	orrs	r1, r2
 80033b2:	687a      	ldr	r2, [r7, #4]
 80033b4:	6992      	ldr	r2, [r2, #24]
 80033b6:	430a      	orrs	r2, r1
 80033b8:	431a      	orrs	r2, r3
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80033c2:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	6a1b      	ldr	r3, [r3, #32]
 80033c8:	2b01      	cmp	r3, #1
 80033ca:	d161      	bne.n	8003490 <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	4a38      	ldr	r2, [pc, #224]	; (80034b0 <HAL_I2S_Init+0x274>)
 80033d0:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	4a37      	ldr	r2, [pc, #220]	; (80034b4 <HAL_I2S_Init+0x278>)
 80033d8:	4293      	cmp	r3, r2
 80033da:	d101      	bne.n	80033e0 <HAL_I2S_Init+0x1a4>
 80033dc:	4b36      	ldr	r3, [pc, #216]	; (80034b8 <HAL_I2S_Init+0x27c>)
 80033de:	e001      	b.n	80033e4 <HAL_I2S_Init+0x1a8>
 80033e0:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80033e4:	69db      	ldr	r3, [r3, #28]
 80033e6:	687a      	ldr	r2, [r7, #4]
 80033e8:	6812      	ldr	r2, [r2, #0]
 80033ea:	4932      	ldr	r1, [pc, #200]	; (80034b4 <HAL_I2S_Init+0x278>)
 80033ec:	428a      	cmp	r2, r1
 80033ee:	d101      	bne.n	80033f4 <HAL_I2S_Init+0x1b8>
 80033f0:	4a31      	ldr	r2, [pc, #196]	; (80034b8 <HAL_I2S_Init+0x27c>)
 80033f2:	e001      	b.n	80033f8 <HAL_I2S_Init+0x1bc>
 80033f4:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 80033f8:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 80033fc:	f023 030f 	bic.w	r3, r3, #15
 8003400:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	4a2b      	ldr	r2, [pc, #172]	; (80034b4 <HAL_I2S_Init+0x278>)
 8003408:	4293      	cmp	r3, r2
 800340a:	d101      	bne.n	8003410 <HAL_I2S_Init+0x1d4>
 800340c:	4b2a      	ldr	r3, [pc, #168]	; (80034b8 <HAL_I2S_Init+0x27c>)
 800340e:	e001      	b.n	8003414 <HAL_I2S_Init+0x1d8>
 8003410:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003414:	2202      	movs	r2, #2
 8003416:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	4a25      	ldr	r2, [pc, #148]	; (80034b4 <HAL_I2S_Init+0x278>)
 800341e:	4293      	cmp	r3, r2
 8003420:	d101      	bne.n	8003426 <HAL_I2S_Init+0x1ea>
 8003422:	4b25      	ldr	r3, [pc, #148]	; (80034b8 <HAL_I2S_Init+0x27c>)
 8003424:	e001      	b.n	800342a <HAL_I2S_Init+0x1ee>
 8003426:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800342a:	69db      	ldr	r3, [r3, #28]
 800342c:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	685b      	ldr	r3, [r3, #4]
 8003432:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003436:	d003      	beq.n	8003440 <HAL_I2S_Init+0x204>
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	685b      	ldr	r3, [r3, #4]
 800343c:	2b00      	cmp	r3, #0
 800343e:	d103      	bne.n	8003448 <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 8003440:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003444:	613b      	str	r3, [r7, #16]
 8003446:	e001      	b.n	800344c <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 8003448:	2300      	movs	r3, #0
 800344a:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 800344c:	693b      	ldr	r3, [r7, #16]
 800344e:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	689b      	ldr	r3, [r3, #8]
 8003454:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8003456:	4313      	orrs	r3, r2
 8003458:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	68db      	ldr	r3, [r3, #12]
 800345e:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8003460:	4313      	orrs	r3, r2
 8003462:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	699b      	ldr	r3, [r3, #24]
 8003468:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 800346a:	4313      	orrs	r3, r2
 800346c:	b29a      	uxth	r2, r3
 800346e:	897b      	ldrh	r3, [r7, #10]
 8003470:	4313      	orrs	r3, r2
 8003472:	b29b      	uxth	r3, r3
 8003474:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8003478:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	4a0d      	ldr	r2, [pc, #52]	; (80034b4 <HAL_I2S_Init+0x278>)
 8003480:	4293      	cmp	r3, r2
 8003482:	d101      	bne.n	8003488 <HAL_I2S_Init+0x24c>
 8003484:	4b0c      	ldr	r3, [pc, #48]	; (80034b8 <HAL_I2S_Init+0x27c>)
 8003486:	e001      	b.n	800348c <HAL_I2S_Init+0x250>
 8003488:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800348c:	897a      	ldrh	r2, [r7, #10]
 800348e:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	2200      	movs	r2, #0
 8003494:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	2201      	movs	r2, #1
 800349a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 800349e:	2300      	movs	r3, #0
}
 80034a0:	4618      	mov	r0, r3
 80034a2:	3720      	adds	r7, #32
 80034a4:	46bd      	mov	sp, r7
 80034a6:	bd80      	pop	{r7, pc}
 80034a8:	080035b3 	.word	0x080035b3
 80034ac:	cccccccd 	.word	0xcccccccd
 80034b0:	080036c9 	.word	0x080036c9
 80034b4:	40003800 	.word	0x40003800
 80034b8:	40003400 	.word	0x40003400

080034bc <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 80034bc:	b480      	push	{r7}
 80034be:	b083      	sub	sp, #12
 80034c0:	af00      	add	r7, sp, #0
 80034c2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 80034c4:	bf00      	nop
 80034c6:	370c      	adds	r7, #12
 80034c8:	46bd      	mov	sp, r7
 80034ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ce:	4770      	bx	lr

080034d0 <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 80034d0:	b480      	push	{r7}
 80034d2:	b083      	sub	sp, #12
 80034d4:	af00      	add	r7, sp, #0
 80034d6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 80034d8:	bf00      	nop
 80034da:	370c      	adds	r7, #12
 80034dc:	46bd      	mov	sp, r7
 80034de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034e2:	4770      	bx	lr

080034e4 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 80034e4:	b480      	push	{r7}
 80034e6:	b083      	sub	sp, #12
 80034e8:	af00      	add	r7, sp, #0
 80034ea:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 80034ec:	bf00      	nop
 80034ee:	370c      	adds	r7, #12
 80034f0:	46bd      	mov	sp, r7
 80034f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034f6:	4770      	bx	lr

080034f8 <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 80034f8:	b580      	push	{r7, lr}
 80034fa:	b082      	sub	sp, #8
 80034fc:	af00      	add	r7, sp, #0
 80034fe:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003504:	881a      	ldrh	r2, [r3, #0]
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003510:	1c9a      	adds	r2, r3, #2
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->TxXferCount--;
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800351a:	b29b      	uxth	r3, r3
 800351c:	3b01      	subs	r3, #1
 800351e:	b29a      	uxth	r2, r3
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003528:	b29b      	uxth	r3, r3
 800352a:	2b00      	cmp	r3, #0
 800352c:	d10e      	bne.n	800354c <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	685a      	ldr	r2, [r3, #4]
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800353c:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	2201      	movs	r2, #1
 8003542:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 8003546:	6878      	ldr	r0, [r7, #4]
 8003548:	f7ff ffb8 	bl	80034bc <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 800354c:	bf00      	nop
 800354e:	3708      	adds	r7, #8
 8003550:	46bd      	mov	sp, r7
 8003552:	bd80      	pop	{r7, pc}

08003554 <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 8003554:	b580      	push	{r7, lr}
 8003556:	b082      	sub	sp, #8
 8003558:	af00      	add	r7, sp, #0
 800355a:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	68da      	ldr	r2, [r3, #12]
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003566:	b292      	uxth	r2, r2
 8003568:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800356e:	1c9a      	adds	r2, r3, #2
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2s->RxXferCount--;
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003578:	b29b      	uxth	r3, r3
 800357a:	3b01      	subs	r3, #1
 800357c:	b29a      	uxth	r2, r3
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003586:	b29b      	uxth	r3, r3
 8003588:	2b00      	cmp	r3, #0
 800358a:	d10e      	bne.n	80035aa <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	685a      	ldr	r2, [r3, #4]
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800359a:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	2201      	movs	r2, #1
 80035a0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 80035a4:	6878      	ldr	r0, [r7, #4]
 80035a6:	f7ff ff93 	bl	80034d0 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 80035aa:	bf00      	nop
 80035ac:	3708      	adds	r7, #8
 80035ae:	46bd      	mov	sp, r7
 80035b0:	bd80      	pop	{r7, pc}

080035b2 <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 80035b2:	b580      	push	{r7, lr}
 80035b4:	b086      	sub	sp, #24
 80035b6:	af00      	add	r7, sp, #0
 80035b8:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	689b      	ldr	r3, [r3, #8]
 80035c0:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80035c8:	b2db      	uxtb	r3, r3
 80035ca:	2b04      	cmp	r3, #4
 80035cc:	d13a      	bne.n	8003644 <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 80035ce:	697b      	ldr	r3, [r7, #20]
 80035d0:	f003 0301 	and.w	r3, r3, #1
 80035d4:	2b01      	cmp	r3, #1
 80035d6:	d109      	bne.n	80035ec <I2S_IRQHandler+0x3a>
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	685b      	ldr	r3, [r3, #4]
 80035de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80035e2:	2b40      	cmp	r3, #64	; 0x40
 80035e4:	d102      	bne.n	80035ec <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 80035e6:	6878      	ldr	r0, [r7, #4]
 80035e8:	f7ff ffb4 	bl	8003554 <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 80035ec:	697b      	ldr	r3, [r7, #20]
 80035ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80035f2:	2b40      	cmp	r3, #64	; 0x40
 80035f4:	d126      	bne.n	8003644 <I2S_IRQHandler+0x92>
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	685b      	ldr	r3, [r3, #4]
 80035fc:	f003 0320 	and.w	r3, r3, #32
 8003600:	2b20      	cmp	r3, #32
 8003602:	d11f      	bne.n	8003644 <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	685a      	ldr	r2, [r3, #4]
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003612:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8003614:	2300      	movs	r3, #0
 8003616:	613b      	str	r3, [r7, #16]
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	68db      	ldr	r3, [r3, #12]
 800361e:	613b      	str	r3, [r7, #16]
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	689b      	ldr	r3, [r3, #8]
 8003626:	613b      	str	r3, [r7, #16]
 8003628:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	2201      	movs	r2, #1
 800362e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003636:	f043 0202 	orr.w	r2, r3, #2
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800363e:	6878      	ldr	r0, [r7, #4]
 8003640:	f7ff ff50 	bl	80034e4 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800364a:	b2db      	uxtb	r3, r3
 800364c:	2b03      	cmp	r3, #3
 800364e:	d136      	bne.n	80036be <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 8003650:	697b      	ldr	r3, [r7, #20]
 8003652:	f003 0302 	and.w	r3, r3, #2
 8003656:	2b02      	cmp	r3, #2
 8003658:	d109      	bne.n	800366e <I2S_IRQHandler+0xbc>
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	685b      	ldr	r3, [r3, #4]
 8003660:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003664:	2b80      	cmp	r3, #128	; 0x80
 8003666:	d102      	bne.n	800366e <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 8003668:	6878      	ldr	r0, [r7, #4]
 800366a:	f7ff ff45 	bl	80034f8 <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 800366e:	697b      	ldr	r3, [r7, #20]
 8003670:	f003 0308 	and.w	r3, r3, #8
 8003674:	2b08      	cmp	r3, #8
 8003676:	d122      	bne.n	80036be <I2S_IRQHandler+0x10c>
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	685b      	ldr	r3, [r3, #4]
 800367e:	f003 0320 	and.w	r3, r3, #32
 8003682:	2b20      	cmp	r3, #32
 8003684:	d11b      	bne.n	80036be <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	685a      	ldr	r2, [r3, #4]
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003694:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8003696:	2300      	movs	r3, #0
 8003698:	60fb      	str	r3, [r7, #12]
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	689b      	ldr	r3, [r3, #8]
 80036a0:	60fb      	str	r3, [r7, #12]
 80036a2:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	2201      	movs	r2, #1
 80036a8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80036b0:	f043 0204 	orr.w	r2, r3, #4
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80036b8:	6878      	ldr	r0, [r7, #4]
 80036ba:	f7ff ff13 	bl	80034e4 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80036be:	bf00      	nop
 80036c0:	3718      	adds	r7, #24
 80036c2:	46bd      	mov	sp, r7
 80036c4:	bd80      	pop	{r7, pc}
	...

080036c8 <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 80036c8:	b580      	push	{r7, lr}
 80036ca:	b088      	sub	sp, #32
 80036cc:	af00      	add	r7, sp, #0
 80036ce:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	689b      	ldr	r3, [r3, #8]
 80036d6:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	4a92      	ldr	r2, [pc, #584]	; (8003928 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80036de:	4293      	cmp	r3, r2
 80036e0:	d101      	bne.n	80036e6 <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 80036e2:	4b92      	ldr	r3, [pc, #584]	; (800392c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80036e4:	e001      	b.n	80036ea <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 80036e6:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80036ea:	689b      	ldr	r3, [r3, #8]
 80036ec:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	685b      	ldr	r3, [r3, #4]
 80036f4:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	4a8b      	ldr	r2, [pc, #556]	; (8003928 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80036fc:	4293      	cmp	r3, r2
 80036fe:	d101      	bne.n	8003704 <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 8003700:	4b8a      	ldr	r3, [pc, #552]	; (800392c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003702:	e001      	b.n	8003708 <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 8003704:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003708:	685b      	ldr	r3, [r3, #4]
 800370a:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	685b      	ldr	r3, [r3, #4]
 8003710:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003714:	d004      	beq.n	8003720 <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	685b      	ldr	r3, [r3, #4]
 800371a:	2b00      	cmp	r3, #0
 800371c:	f040 8099 	bne.w	8003852 <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 8003720:	69fb      	ldr	r3, [r7, #28]
 8003722:	f003 0302 	and.w	r3, r3, #2
 8003726:	2b02      	cmp	r3, #2
 8003728:	d107      	bne.n	800373a <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 800372a:	697b      	ldr	r3, [r7, #20]
 800372c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003730:	2b00      	cmp	r3, #0
 8003732:	d002      	beq.n	800373a <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 8003734:	6878      	ldr	r0, [r7, #4]
 8003736:	f000 f925 	bl	8003984 <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 800373a:	69bb      	ldr	r3, [r7, #24]
 800373c:	f003 0301 	and.w	r3, r3, #1
 8003740:	2b01      	cmp	r3, #1
 8003742:	d107      	bne.n	8003754 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 8003744:	693b      	ldr	r3, [r7, #16]
 8003746:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800374a:	2b00      	cmp	r3, #0
 800374c:	d002      	beq.n	8003754 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 800374e:	6878      	ldr	r0, [r7, #4]
 8003750:	f000 f9c8 	bl	8003ae4 <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8003754:	69bb      	ldr	r3, [r7, #24]
 8003756:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800375a:	2b40      	cmp	r3, #64	; 0x40
 800375c:	d13a      	bne.n	80037d4 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 800375e:	693b      	ldr	r3, [r7, #16]
 8003760:	f003 0320 	and.w	r3, r3, #32
 8003764:	2b00      	cmp	r3, #0
 8003766:	d035      	beq.n	80037d4 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	4a6e      	ldr	r2, [pc, #440]	; (8003928 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800376e:	4293      	cmp	r3, r2
 8003770:	d101      	bne.n	8003776 <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 8003772:	4b6e      	ldr	r3, [pc, #440]	; (800392c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003774:	e001      	b.n	800377a <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 8003776:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800377a:	685a      	ldr	r2, [r3, #4]
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	4969      	ldr	r1, [pc, #420]	; (8003928 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003782:	428b      	cmp	r3, r1
 8003784:	d101      	bne.n	800378a <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 8003786:	4b69      	ldr	r3, [pc, #420]	; (800392c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003788:	e001      	b.n	800378e <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 800378a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800378e:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003792:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	685a      	ldr	r2, [r3, #4]
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80037a2:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 80037a4:	2300      	movs	r3, #0
 80037a6:	60fb      	str	r3, [r7, #12]
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	68db      	ldr	r3, [r3, #12]
 80037ae:	60fb      	str	r3, [r7, #12]
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	689b      	ldr	r3, [r3, #8]
 80037b6:	60fb      	str	r3, [r7, #12]
 80037b8:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	2201      	movs	r2, #1
 80037be:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80037c6:	f043 0202 	orr.w	r2, r3, #2
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80037ce:	6878      	ldr	r0, [r7, #4]
 80037d0:	f7ff fe88 	bl	80034e4 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80037d4:	69fb      	ldr	r3, [r7, #28]
 80037d6:	f003 0308 	and.w	r3, r3, #8
 80037da:	2b08      	cmp	r3, #8
 80037dc:	f040 80c3 	bne.w	8003966 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
 80037e0:	697b      	ldr	r3, [r7, #20]
 80037e2:	f003 0320 	and.w	r3, r3, #32
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	f000 80bd 	beq.w	8003966 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	685a      	ldr	r2, [r3, #4]
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80037fa:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	4a49      	ldr	r2, [pc, #292]	; (8003928 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003802:	4293      	cmp	r3, r2
 8003804:	d101      	bne.n	800380a <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 8003806:	4b49      	ldr	r3, [pc, #292]	; (800392c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003808:	e001      	b.n	800380e <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 800380a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800380e:	685a      	ldr	r2, [r3, #4]
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	4944      	ldr	r1, [pc, #272]	; (8003928 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003816:	428b      	cmp	r3, r1
 8003818:	d101      	bne.n	800381e <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 800381a:	4b44      	ldr	r3, [pc, #272]	; (800392c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800381c:	e001      	b.n	8003822 <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 800381e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003822:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003826:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8003828:	2300      	movs	r3, #0
 800382a:	60bb      	str	r3, [r7, #8]
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	689b      	ldr	r3, [r3, #8]
 8003832:	60bb      	str	r3, [r7, #8]
 8003834:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	2201      	movs	r2, #1
 800383a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003842:	f043 0204 	orr.w	r2, r3, #4
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800384a:	6878      	ldr	r0, [r7, #4]
 800384c:	f7ff fe4a 	bl	80034e4 <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8003850:	e089      	b.n	8003966 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 8003852:	69bb      	ldr	r3, [r7, #24]
 8003854:	f003 0302 	and.w	r3, r3, #2
 8003858:	2b02      	cmp	r3, #2
 800385a:	d107      	bne.n	800386c <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 800385c:	693b      	ldr	r3, [r7, #16]
 800385e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003862:	2b00      	cmp	r3, #0
 8003864:	d002      	beq.n	800386c <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 8003866:	6878      	ldr	r0, [r7, #4]
 8003868:	f000 f8be 	bl	80039e8 <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 800386c:	69fb      	ldr	r3, [r7, #28]
 800386e:	f003 0301 	and.w	r3, r3, #1
 8003872:	2b01      	cmp	r3, #1
 8003874:	d107      	bne.n	8003886 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 8003876:	697b      	ldr	r3, [r7, #20]
 8003878:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800387c:	2b00      	cmp	r3, #0
 800387e:	d002      	beq.n	8003886 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 8003880:	6878      	ldr	r0, [r7, #4]
 8003882:	f000 f8fd 	bl	8003a80 <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8003886:	69fb      	ldr	r3, [r7, #28]
 8003888:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800388c:	2b40      	cmp	r3, #64	; 0x40
 800388e:	d12f      	bne.n	80038f0 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 8003890:	697b      	ldr	r3, [r7, #20]
 8003892:	f003 0320 	and.w	r3, r3, #32
 8003896:	2b00      	cmp	r3, #0
 8003898:	d02a      	beq.n	80038f0 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	685a      	ldr	r2, [r3, #4]
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80038a8:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	4a1e      	ldr	r2, [pc, #120]	; (8003928 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80038b0:	4293      	cmp	r3, r2
 80038b2:	d101      	bne.n	80038b8 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 80038b4:	4b1d      	ldr	r3, [pc, #116]	; (800392c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80038b6:	e001      	b.n	80038bc <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 80038b8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80038bc:	685a      	ldr	r2, [r3, #4]
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	4919      	ldr	r1, [pc, #100]	; (8003928 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80038c4:	428b      	cmp	r3, r1
 80038c6:	d101      	bne.n	80038cc <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 80038c8:	4b18      	ldr	r3, [pc, #96]	; (800392c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80038ca:	e001      	b.n	80038d0 <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 80038cc:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80038d0:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80038d4:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	2201      	movs	r2, #1
 80038da:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80038e2:	f043 0202 	orr.w	r2, r3, #2
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80038ea:	6878      	ldr	r0, [r7, #4]
 80038ec:	f7ff fdfa 	bl	80034e4 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 80038f0:	69bb      	ldr	r3, [r7, #24]
 80038f2:	f003 0308 	and.w	r3, r3, #8
 80038f6:	2b08      	cmp	r3, #8
 80038f8:	d136      	bne.n	8003968 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
 80038fa:	693b      	ldr	r3, [r7, #16]
 80038fc:	f003 0320 	and.w	r3, r3, #32
 8003900:	2b00      	cmp	r3, #0
 8003902:	d031      	beq.n	8003968 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	4a07      	ldr	r2, [pc, #28]	; (8003928 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800390a:	4293      	cmp	r3, r2
 800390c:	d101      	bne.n	8003912 <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 800390e:	4b07      	ldr	r3, [pc, #28]	; (800392c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003910:	e001      	b.n	8003916 <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 8003912:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003916:	685a      	ldr	r2, [r3, #4]
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	4902      	ldr	r1, [pc, #8]	; (8003928 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800391e:	428b      	cmp	r3, r1
 8003920:	d106      	bne.n	8003930 <HAL_I2SEx_FullDuplex_IRQHandler+0x268>
 8003922:	4b02      	ldr	r3, [pc, #8]	; (800392c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003924:	e006      	b.n	8003934 <HAL_I2SEx_FullDuplex_IRQHandler+0x26c>
 8003926:	bf00      	nop
 8003928:	40003800 	.word	0x40003800
 800392c:	40003400 	.word	0x40003400
 8003930:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003934:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003938:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	685a      	ldr	r2, [r3, #4]
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003948:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	2201      	movs	r2, #1
 800394e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003956:	f043 0204 	orr.w	r2, r3, #4
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800395e:	6878      	ldr	r0, [r7, #4]
 8003960:	f7ff fdc0 	bl	80034e4 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003964:	e000      	b.n	8003968 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8003966:	bf00      	nop
}
 8003968:	bf00      	nop
 800396a:	3720      	adds	r7, #32
 800396c:	46bd      	mov	sp, r7
 800396e:	bd80      	pop	{r7, pc}

08003970 <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8003970:	b480      	push	{r7}
 8003972:	b083      	sub	sp, #12
 8003974:	af00      	add	r7, sp, #0
 8003976:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 8003978:	bf00      	nop
 800397a:	370c      	adds	r7, #12
 800397c:	46bd      	mov	sp, r7
 800397e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003982:	4770      	bx	lr

08003984 <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8003984:	b580      	push	{r7, lr}
 8003986:	b082      	sub	sp, #8
 8003988:	af00      	add	r7, sp, #0
 800398a:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003990:	1c99      	adds	r1, r3, #2
 8003992:	687a      	ldr	r2, [r7, #4]
 8003994:	6251      	str	r1, [r2, #36]	; 0x24
 8003996:	881a      	ldrh	r2, [r3, #0]
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80039a2:	b29b      	uxth	r3, r3
 80039a4:	3b01      	subs	r3, #1
 80039a6:	b29a      	uxth	r2, r3
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80039b0:	b29b      	uxth	r3, r3
 80039b2:	2b00      	cmp	r3, #0
 80039b4:	d113      	bne.n	80039de <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	685a      	ldr	r2, [r3, #4]
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80039c4:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80039ca:	b29b      	uxth	r3, r3
 80039cc:	2b00      	cmp	r3, #0
 80039ce:	d106      	bne.n	80039de <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	2201      	movs	r2, #1
 80039d4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80039d8:	6878      	ldr	r0, [r7, #4]
 80039da:	f7ff ffc9 	bl	8003970 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80039de:	bf00      	nop
 80039e0:	3708      	adds	r7, #8
 80039e2:	46bd      	mov	sp, r7
 80039e4:	bd80      	pop	{r7, pc}
	...

080039e8 <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 80039e8:	b580      	push	{r7, lr}
 80039ea:	b082      	sub	sp, #8
 80039ec:	af00      	add	r7, sp, #0
 80039ee:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039f4:	1c99      	adds	r1, r3, #2
 80039f6:	687a      	ldr	r2, [r7, #4]
 80039f8:	6251      	str	r1, [r2, #36]	; 0x24
 80039fa:	8819      	ldrh	r1, [r3, #0]
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	4a1d      	ldr	r2, [pc, #116]	; (8003a78 <I2SEx_TxISR_I2SExt+0x90>)
 8003a02:	4293      	cmp	r3, r2
 8003a04:	d101      	bne.n	8003a0a <I2SEx_TxISR_I2SExt+0x22>
 8003a06:	4b1d      	ldr	r3, [pc, #116]	; (8003a7c <I2SEx_TxISR_I2SExt+0x94>)
 8003a08:	e001      	b.n	8003a0e <I2SEx_TxISR_I2SExt+0x26>
 8003a0a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003a0e:	460a      	mov	r2, r1
 8003a10:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a16:	b29b      	uxth	r3, r3
 8003a18:	3b01      	subs	r3, #1
 8003a1a:	b29a      	uxth	r2, r3
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a24:	b29b      	uxth	r3, r3
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	d121      	bne.n	8003a6e <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	4a12      	ldr	r2, [pc, #72]	; (8003a78 <I2SEx_TxISR_I2SExt+0x90>)
 8003a30:	4293      	cmp	r3, r2
 8003a32:	d101      	bne.n	8003a38 <I2SEx_TxISR_I2SExt+0x50>
 8003a34:	4b11      	ldr	r3, [pc, #68]	; (8003a7c <I2SEx_TxISR_I2SExt+0x94>)
 8003a36:	e001      	b.n	8003a3c <I2SEx_TxISR_I2SExt+0x54>
 8003a38:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003a3c:	685a      	ldr	r2, [r3, #4]
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	490d      	ldr	r1, [pc, #52]	; (8003a78 <I2SEx_TxISR_I2SExt+0x90>)
 8003a44:	428b      	cmp	r3, r1
 8003a46:	d101      	bne.n	8003a4c <I2SEx_TxISR_I2SExt+0x64>
 8003a48:	4b0c      	ldr	r3, [pc, #48]	; (8003a7c <I2SEx_TxISR_I2SExt+0x94>)
 8003a4a:	e001      	b.n	8003a50 <I2SEx_TxISR_I2SExt+0x68>
 8003a4c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003a50:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003a54:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003a5a:	b29b      	uxth	r3, r3
 8003a5c:	2b00      	cmp	r3, #0
 8003a5e:	d106      	bne.n	8003a6e <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	2201      	movs	r2, #1
 8003a64:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8003a68:	6878      	ldr	r0, [r7, #4]
 8003a6a:	f7ff ff81 	bl	8003970 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003a6e:	bf00      	nop
 8003a70:	3708      	adds	r7, #8
 8003a72:	46bd      	mov	sp, r7
 8003a74:	bd80      	pop	{r7, pc}
 8003a76:	bf00      	nop
 8003a78:	40003800 	.word	0x40003800
 8003a7c:	40003400 	.word	0x40003400

08003a80 <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8003a80:	b580      	push	{r7, lr}
 8003a82:	b082      	sub	sp, #8
 8003a84:	af00      	add	r7, sp, #0
 8003a86:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	68d8      	ldr	r0, [r3, #12]
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a92:	1c99      	adds	r1, r3, #2
 8003a94:	687a      	ldr	r2, [r7, #4]
 8003a96:	62d1      	str	r1, [r2, #44]	; 0x2c
 8003a98:	b282      	uxth	r2, r0
 8003a9a:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003aa0:	b29b      	uxth	r3, r3
 8003aa2:	3b01      	subs	r3, #1
 8003aa4:	b29a      	uxth	r2, r3
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003aae:	b29b      	uxth	r3, r3
 8003ab0:	2b00      	cmp	r3, #0
 8003ab2:	d113      	bne.n	8003adc <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	685a      	ldr	r2, [r3, #4]
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003ac2:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ac8:	b29b      	uxth	r3, r3
 8003aca:	2b00      	cmp	r3, #0
 8003acc:	d106      	bne.n	8003adc <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	2201      	movs	r2, #1
 8003ad2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8003ad6:	6878      	ldr	r0, [r7, #4]
 8003ad8:	f7ff ff4a 	bl	8003970 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003adc:	bf00      	nop
 8003ade:	3708      	adds	r7, #8
 8003ae0:	46bd      	mov	sp, r7
 8003ae2:	bd80      	pop	{r7, pc}

08003ae4 <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8003ae4:	b580      	push	{r7, lr}
 8003ae6:	b082      	sub	sp, #8
 8003ae8:	af00      	add	r7, sp, #0
 8003aea:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	4a20      	ldr	r2, [pc, #128]	; (8003b74 <I2SEx_RxISR_I2SExt+0x90>)
 8003af2:	4293      	cmp	r3, r2
 8003af4:	d101      	bne.n	8003afa <I2SEx_RxISR_I2SExt+0x16>
 8003af6:	4b20      	ldr	r3, [pc, #128]	; (8003b78 <I2SEx_RxISR_I2SExt+0x94>)
 8003af8:	e001      	b.n	8003afe <I2SEx_RxISR_I2SExt+0x1a>
 8003afa:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003afe:	68d8      	ldr	r0, [r3, #12]
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b04:	1c99      	adds	r1, r3, #2
 8003b06:	687a      	ldr	r2, [r7, #4]
 8003b08:	62d1      	str	r1, [r2, #44]	; 0x2c
 8003b0a:	b282      	uxth	r2, r0
 8003b0c:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003b12:	b29b      	uxth	r3, r3
 8003b14:	3b01      	subs	r3, #1
 8003b16:	b29a      	uxth	r2, r3
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003b20:	b29b      	uxth	r3, r3
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	d121      	bne.n	8003b6a <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	4a12      	ldr	r2, [pc, #72]	; (8003b74 <I2SEx_RxISR_I2SExt+0x90>)
 8003b2c:	4293      	cmp	r3, r2
 8003b2e:	d101      	bne.n	8003b34 <I2SEx_RxISR_I2SExt+0x50>
 8003b30:	4b11      	ldr	r3, [pc, #68]	; (8003b78 <I2SEx_RxISR_I2SExt+0x94>)
 8003b32:	e001      	b.n	8003b38 <I2SEx_RxISR_I2SExt+0x54>
 8003b34:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003b38:	685a      	ldr	r2, [r3, #4]
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	490d      	ldr	r1, [pc, #52]	; (8003b74 <I2SEx_RxISR_I2SExt+0x90>)
 8003b40:	428b      	cmp	r3, r1
 8003b42:	d101      	bne.n	8003b48 <I2SEx_RxISR_I2SExt+0x64>
 8003b44:	4b0c      	ldr	r3, [pc, #48]	; (8003b78 <I2SEx_RxISR_I2SExt+0x94>)
 8003b46:	e001      	b.n	8003b4c <I2SEx_RxISR_I2SExt+0x68>
 8003b48:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003b4c:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003b50:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b56:	b29b      	uxth	r3, r3
 8003b58:	2b00      	cmp	r3, #0
 8003b5a:	d106      	bne.n	8003b6a <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	2201      	movs	r2, #1
 8003b60:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8003b64:	6878      	ldr	r0, [r7, #4]
 8003b66:	f7ff ff03 	bl	8003970 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003b6a:	bf00      	nop
 8003b6c:	3708      	adds	r7, #8
 8003b6e:	46bd      	mov	sp, r7
 8003b70:	bd80      	pop	{r7, pc}
 8003b72:	bf00      	nop
 8003b74:	40003800 	.word	0x40003800
 8003b78:	40003400 	.word	0x40003400

08003b7c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003b7c:	b580      	push	{r7, lr}
 8003b7e:	b086      	sub	sp, #24
 8003b80:	af00      	add	r7, sp, #0
 8003b82:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	d101      	bne.n	8003b8e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003b8a:	2301      	movs	r3, #1
 8003b8c:	e267      	b.n	800405e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	f003 0301 	and.w	r3, r3, #1
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	d075      	beq.n	8003c86 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003b9a:	4b88      	ldr	r3, [pc, #544]	; (8003dbc <HAL_RCC_OscConfig+0x240>)
 8003b9c:	689b      	ldr	r3, [r3, #8]
 8003b9e:	f003 030c 	and.w	r3, r3, #12
 8003ba2:	2b04      	cmp	r3, #4
 8003ba4:	d00c      	beq.n	8003bc0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003ba6:	4b85      	ldr	r3, [pc, #532]	; (8003dbc <HAL_RCC_OscConfig+0x240>)
 8003ba8:	689b      	ldr	r3, [r3, #8]
 8003baa:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003bae:	2b08      	cmp	r3, #8
 8003bb0:	d112      	bne.n	8003bd8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003bb2:	4b82      	ldr	r3, [pc, #520]	; (8003dbc <HAL_RCC_OscConfig+0x240>)
 8003bb4:	685b      	ldr	r3, [r3, #4]
 8003bb6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003bba:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003bbe:	d10b      	bne.n	8003bd8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003bc0:	4b7e      	ldr	r3, [pc, #504]	; (8003dbc <HAL_RCC_OscConfig+0x240>)
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003bc8:	2b00      	cmp	r3, #0
 8003bca:	d05b      	beq.n	8003c84 <HAL_RCC_OscConfig+0x108>
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	685b      	ldr	r3, [r3, #4]
 8003bd0:	2b00      	cmp	r3, #0
 8003bd2:	d157      	bne.n	8003c84 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003bd4:	2301      	movs	r3, #1
 8003bd6:	e242      	b.n	800405e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	685b      	ldr	r3, [r3, #4]
 8003bdc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003be0:	d106      	bne.n	8003bf0 <HAL_RCC_OscConfig+0x74>
 8003be2:	4b76      	ldr	r3, [pc, #472]	; (8003dbc <HAL_RCC_OscConfig+0x240>)
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	4a75      	ldr	r2, [pc, #468]	; (8003dbc <HAL_RCC_OscConfig+0x240>)
 8003be8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003bec:	6013      	str	r3, [r2, #0]
 8003bee:	e01d      	b.n	8003c2c <HAL_RCC_OscConfig+0xb0>
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	685b      	ldr	r3, [r3, #4]
 8003bf4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003bf8:	d10c      	bne.n	8003c14 <HAL_RCC_OscConfig+0x98>
 8003bfa:	4b70      	ldr	r3, [pc, #448]	; (8003dbc <HAL_RCC_OscConfig+0x240>)
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	4a6f      	ldr	r2, [pc, #444]	; (8003dbc <HAL_RCC_OscConfig+0x240>)
 8003c00:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003c04:	6013      	str	r3, [r2, #0]
 8003c06:	4b6d      	ldr	r3, [pc, #436]	; (8003dbc <HAL_RCC_OscConfig+0x240>)
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	4a6c      	ldr	r2, [pc, #432]	; (8003dbc <HAL_RCC_OscConfig+0x240>)
 8003c0c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003c10:	6013      	str	r3, [r2, #0]
 8003c12:	e00b      	b.n	8003c2c <HAL_RCC_OscConfig+0xb0>
 8003c14:	4b69      	ldr	r3, [pc, #420]	; (8003dbc <HAL_RCC_OscConfig+0x240>)
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	4a68      	ldr	r2, [pc, #416]	; (8003dbc <HAL_RCC_OscConfig+0x240>)
 8003c1a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003c1e:	6013      	str	r3, [r2, #0]
 8003c20:	4b66      	ldr	r3, [pc, #408]	; (8003dbc <HAL_RCC_OscConfig+0x240>)
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	4a65      	ldr	r2, [pc, #404]	; (8003dbc <HAL_RCC_OscConfig+0x240>)
 8003c26:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003c2a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	685b      	ldr	r3, [r3, #4]
 8003c30:	2b00      	cmp	r3, #0
 8003c32:	d013      	beq.n	8003c5c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c34:	f7fd f9fa 	bl	800102c <HAL_GetTick>
 8003c38:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003c3a:	e008      	b.n	8003c4e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003c3c:	f7fd f9f6 	bl	800102c <HAL_GetTick>
 8003c40:	4602      	mov	r2, r0
 8003c42:	693b      	ldr	r3, [r7, #16]
 8003c44:	1ad3      	subs	r3, r2, r3
 8003c46:	2b64      	cmp	r3, #100	; 0x64
 8003c48:	d901      	bls.n	8003c4e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003c4a:	2303      	movs	r3, #3
 8003c4c:	e207      	b.n	800405e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003c4e:	4b5b      	ldr	r3, [pc, #364]	; (8003dbc <HAL_RCC_OscConfig+0x240>)
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c56:	2b00      	cmp	r3, #0
 8003c58:	d0f0      	beq.n	8003c3c <HAL_RCC_OscConfig+0xc0>
 8003c5a:	e014      	b.n	8003c86 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c5c:	f7fd f9e6 	bl	800102c <HAL_GetTick>
 8003c60:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003c62:	e008      	b.n	8003c76 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003c64:	f7fd f9e2 	bl	800102c <HAL_GetTick>
 8003c68:	4602      	mov	r2, r0
 8003c6a:	693b      	ldr	r3, [r7, #16]
 8003c6c:	1ad3      	subs	r3, r2, r3
 8003c6e:	2b64      	cmp	r3, #100	; 0x64
 8003c70:	d901      	bls.n	8003c76 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003c72:	2303      	movs	r3, #3
 8003c74:	e1f3      	b.n	800405e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003c76:	4b51      	ldr	r3, [pc, #324]	; (8003dbc <HAL_RCC_OscConfig+0x240>)
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c7e:	2b00      	cmp	r3, #0
 8003c80:	d1f0      	bne.n	8003c64 <HAL_RCC_OscConfig+0xe8>
 8003c82:	e000      	b.n	8003c86 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003c84:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	f003 0302 	and.w	r3, r3, #2
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	d063      	beq.n	8003d5a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003c92:	4b4a      	ldr	r3, [pc, #296]	; (8003dbc <HAL_RCC_OscConfig+0x240>)
 8003c94:	689b      	ldr	r3, [r3, #8]
 8003c96:	f003 030c 	and.w	r3, r3, #12
 8003c9a:	2b00      	cmp	r3, #0
 8003c9c:	d00b      	beq.n	8003cb6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003c9e:	4b47      	ldr	r3, [pc, #284]	; (8003dbc <HAL_RCC_OscConfig+0x240>)
 8003ca0:	689b      	ldr	r3, [r3, #8]
 8003ca2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003ca6:	2b08      	cmp	r3, #8
 8003ca8:	d11c      	bne.n	8003ce4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003caa:	4b44      	ldr	r3, [pc, #272]	; (8003dbc <HAL_RCC_OscConfig+0x240>)
 8003cac:	685b      	ldr	r3, [r3, #4]
 8003cae:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	d116      	bne.n	8003ce4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003cb6:	4b41      	ldr	r3, [pc, #260]	; (8003dbc <HAL_RCC_OscConfig+0x240>)
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	f003 0302 	and.w	r3, r3, #2
 8003cbe:	2b00      	cmp	r3, #0
 8003cc0:	d005      	beq.n	8003cce <HAL_RCC_OscConfig+0x152>
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	68db      	ldr	r3, [r3, #12]
 8003cc6:	2b01      	cmp	r3, #1
 8003cc8:	d001      	beq.n	8003cce <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003cca:	2301      	movs	r3, #1
 8003ccc:	e1c7      	b.n	800405e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003cce:	4b3b      	ldr	r3, [pc, #236]	; (8003dbc <HAL_RCC_OscConfig+0x240>)
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	691b      	ldr	r3, [r3, #16]
 8003cda:	00db      	lsls	r3, r3, #3
 8003cdc:	4937      	ldr	r1, [pc, #220]	; (8003dbc <HAL_RCC_OscConfig+0x240>)
 8003cde:	4313      	orrs	r3, r2
 8003ce0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003ce2:	e03a      	b.n	8003d5a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	68db      	ldr	r3, [r3, #12]
 8003ce8:	2b00      	cmp	r3, #0
 8003cea:	d020      	beq.n	8003d2e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003cec:	4b34      	ldr	r3, [pc, #208]	; (8003dc0 <HAL_RCC_OscConfig+0x244>)
 8003cee:	2201      	movs	r2, #1
 8003cf0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003cf2:	f7fd f99b 	bl	800102c <HAL_GetTick>
 8003cf6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003cf8:	e008      	b.n	8003d0c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003cfa:	f7fd f997 	bl	800102c <HAL_GetTick>
 8003cfe:	4602      	mov	r2, r0
 8003d00:	693b      	ldr	r3, [r7, #16]
 8003d02:	1ad3      	subs	r3, r2, r3
 8003d04:	2b02      	cmp	r3, #2
 8003d06:	d901      	bls.n	8003d0c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003d08:	2303      	movs	r3, #3
 8003d0a:	e1a8      	b.n	800405e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003d0c:	4b2b      	ldr	r3, [pc, #172]	; (8003dbc <HAL_RCC_OscConfig+0x240>)
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	f003 0302 	and.w	r3, r3, #2
 8003d14:	2b00      	cmp	r3, #0
 8003d16:	d0f0      	beq.n	8003cfa <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003d18:	4b28      	ldr	r3, [pc, #160]	; (8003dbc <HAL_RCC_OscConfig+0x240>)
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	691b      	ldr	r3, [r3, #16]
 8003d24:	00db      	lsls	r3, r3, #3
 8003d26:	4925      	ldr	r1, [pc, #148]	; (8003dbc <HAL_RCC_OscConfig+0x240>)
 8003d28:	4313      	orrs	r3, r2
 8003d2a:	600b      	str	r3, [r1, #0]
 8003d2c:	e015      	b.n	8003d5a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003d2e:	4b24      	ldr	r3, [pc, #144]	; (8003dc0 <HAL_RCC_OscConfig+0x244>)
 8003d30:	2200      	movs	r2, #0
 8003d32:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d34:	f7fd f97a 	bl	800102c <HAL_GetTick>
 8003d38:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003d3a:	e008      	b.n	8003d4e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003d3c:	f7fd f976 	bl	800102c <HAL_GetTick>
 8003d40:	4602      	mov	r2, r0
 8003d42:	693b      	ldr	r3, [r7, #16]
 8003d44:	1ad3      	subs	r3, r2, r3
 8003d46:	2b02      	cmp	r3, #2
 8003d48:	d901      	bls.n	8003d4e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003d4a:	2303      	movs	r3, #3
 8003d4c:	e187      	b.n	800405e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003d4e:	4b1b      	ldr	r3, [pc, #108]	; (8003dbc <HAL_RCC_OscConfig+0x240>)
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	f003 0302 	and.w	r3, r3, #2
 8003d56:	2b00      	cmp	r3, #0
 8003d58:	d1f0      	bne.n	8003d3c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	f003 0308 	and.w	r3, r3, #8
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	d036      	beq.n	8003dd4 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	695b      	ldr	r3, [r3, #20]
 8003d6a:	2b00      	cmp	r3, #0
 8003d6c:	d016      	beq.n	8003d9c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003d6e:	4b15      	ldr	r3, [pc, #84]	; (8003dc4 <HAL_RCC_OscConfig+0x248>)
 8003d70:	2201      	movs	r2, #1
 8003d72:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003d74:	f7fd f95a 	bl	800102c <HAL_GetTick>
 8003d78:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003d7a:	e008      	b.n	8003d8e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003d7c:	f7fd f956 	bl	800102c <HAL_GetTick>
 8003d80:	4602      	mov	r2, r0
 8003d82:	693b      	ldr	r3, [r7, #16]
 8003d84:	1ad3      	subs	r3, r2, r3
 8003d86:	2b02      	cmp	r3, #2
 8003d88:	d901      	bls.n	8003d8e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003d8a:	2303      	movs	r3, #3
 8003d8c:	e167      	b.n	800405e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003d8e:	4b0b      	ldr	r3, [pc, #44]	; (8003dbc <HAL_RCC_OscConfig+0x240>)
 8003d90:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003d92:	f003 0302 	and.w	r3, r3, #2
 8003d96:	2b00      	cmp	r3, #0
 8003d98:	d0f0      	beq.n	8003d7c <HAL_RCC_OscConfig+0x200>
 8003d9a:	e01b      	b.n	8003dd4 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003d9c:	4b09      	ldr	r3, [pc, #36]	; (8003dc4 <HAL_RCC_OscConfig+0x248>)
 8003d9e:	2200      	movs	r2, #0
 8003da0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003da2:	f7fd f943 	bl	800102c <HAL_GetTick>
 8003da6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003da8:	e00e      	b.n	8003dc8 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003daa:	f7fd f93f 	bl	800102c <HAL_GetTick>
 8003dae:	4602      	mov	r2, r0
 8003db0:	693b      	ldr	r3, [r7, #16]
 8003db2:	1ad3      	subs	r3, r2, r3
 8003db4:	2b02      	cmp	r3, #2
 8003db6:	d907      	bls.n	8003dc8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003db8:	2303      	movs	r3, #3
 8003dba:	e150      	b.n	800405e <HAL_RCC_OscConfig+0x4e2>
 8003dbc:	40023800 	.word	0x40023800
 8003dc0:	42470000 	.word	0x42470000
 8003dc4:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003dc8:	4b88      	ldr	r3, [pc, #544]	; (8003fec <HAL_RCC_OscConfig+0x470>)
 8003dca:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003dcc:	f003 0302 	and.w	r3, r3, #2
 8003dd0:	2b00      	cmp	r3, #0
 8003dd2:	d1ea      	bne.n	8003daa <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	f003 0304 	and.w	r3, r3, #4
 8003ddc:	2b00      	cmp	r3, #0
 8003dde:	f000 8097 	beq.w	8003f10 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003de2:	2300      	movs	r3, #0
 8003de4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003de6:	4b81      	ldr	r3, [pc, #516]	; (8003fec <HAL_RCC_OscConfig+0x470>)
 8003de8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003dee:	2b00      	cmp	r3, #0
 8003df0:	d10f      	bne.n	8003e12 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003df2:	2300      	movs	r3, #0
 8003df4:	60bb      	str	r3, [r7, #8]
 8003df6:	4b7d      	ldr	r3, [pc, #500]	; (8003fec <HAL_RCC_OscConfig+0x470>)
 8003df8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dfa:	4a7c      	ldr	r2, [pc, #496]	; (8003fec <HAL_RCC_OscConfig+0x470>)
 8003dfc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003e00:	6413      	str	r3, [r2, #64]	; 0x40
 8003e02:	4b7a      	ldr	r3, [pc, #488]	; (8003fec <HAL_RCC_OscConfig+0x470>)
 8003e04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e06:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003e0a:	60bb      	str	r3, [r7, #8]
 8003e0c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003e0e:	2301      	movs	r3, #1
 8003e10:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003e12:	4b77      	ldr	r3, [pc, #476]	; (8003ff0 <HAL_RCC_OscConfig+0x474>)
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	d118      	bne.n	8003e50 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003e1e:	4b74      	ldr	r3, [pc, #464]	; (8003ff0 <HAL_RCC_OscConfig+0x474>)
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	4a73      	ldr	r2, [pc, #460]	; (8003ff0 <HAL_RCC_OscConfig+0x474>)
 8003e24:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003e28:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003e2a:	f7fd f8ff 	bl	800102c <HAL_GetTick>
 8003e2e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003e30:	e008      	b.n	8003e44 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003e32:	f7fd f8fb 	bl	800102c <HAL_GetTick>
 8003e36:	4602      	mov	r2, r0
 8003e38:	693b      	ldr	r3, [r7, #16]
 8003e3a:	1ad3      	subs	r3, r2, r3
 8003e3c:	2b02      	cmp	r3, #2
 8003e3e:	d901      	bls.n	8003e44 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003e40:	2303      	movs	r3, #3
 8003e42:	e10c      	b.n	800405e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003e44:	4b6a      	ldr	r3, [pc, #424]	; (8003ff0 <HAL_RCC_OscConfig+0x474>)
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e4c:	2b00      	cmp	r3, #0
 8003e4e:	d0f0      	beq.n	8003e32 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	689b      	ldr	r3, [r3, #8]
 8003e54:	2b01      	cmp	r3, #1
 8003e56:	d106      	bne.n	8003e66 <HAL_RCC_OscConfig+0x2ea>
 8003e58:	4b64      	ldr	r3, [pc, #400]	; (8003fec <HAL_RCC_OscConfig+0x470>)
 8003e5a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e5c:	4a63      	ldr	r2, [pc, #396]	; (8003fec <HAL_RCC_OscConfig+0x470>)
 8003e5e:	f043 0301 	orr.w	r3, r3, #1
 8003e62:	6713      	str	r3, [r2, #112]	; 0x70
 8003e64:	e01c      	b.n	8003ea0 <HAL_RCC_OscConfig+0x324>
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	689b      	ldr	r3, [r3, #8]
 8003e6a:	2b05      	cmp	r3, #5
 8003e6c:	d10c      	bne.n	8003e88 <HAL_RCC_OscConfig+0x30c>
 8003e6e:	4b5f      	ldr	r3, [pc, #380]	; (8003fec <HAL_RCC_OscConfig+0x470>)
 8003e70:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e72:	4a5e      	ldr	r2, [pc, #376]	; (8003fec <HAL_RCC_OscConfig+0x470>)
 8003e74:	f043 0304 	orr.w	r3, r3, #4
 8003e78:	6713      	str	r3, [r2, #112]	; 0x70
 8003e7a:	4b5c      	ldr	r3, [pc, #368]	; (8003fec <HAL_RCC_OscConfig+0x470>)
 8003e7c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e7e:	4a5b      	ldr	r2, [pc, #364]	; (8003fec <HAL_RCC_OscConfig+0x470>)
 8003e80:	f043 0301 	orr.w	r3, r3, #1
 8003e84:	6713      	str	r3, [r2, #112]	; 0x70
 8003e86:	e00b      	b.n	8003ea0 <HAL_RCC_OscConfig+0x324>
 8003e88:	4b58      	ldr	r3, [pc, #352]	; (8003fec <HAL_RCC_OscConfig+0x470>)
 8003e8a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e8c:	4a57      	ldr	r2, [pc, #348]	; (8003fec <HAL_RCC_OscConfig+0x470>)
 8003e8e:	f023 0301 	bic.w	r3, r3, #1
 8003e92:	6713      	str	r3, [r2, #112]	; 0x70
 8003e94:	4b55      	ldr	r3, [pc, #340]	; (8003fec <HAL_RCC_OscConfig+0x470>)
 8003e96:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e98:	4a54      	ldr	r2, [pc, #336]	; (8003fec <HAL_RCC_OscConfig+0x470>)
 8003e9a:	f023 0304 	bic.w	r3, r3, #4
 8003e9e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	689b      	ldr	r3, [r3, #8]
 8003ea4:	2b00      	cmp	r3, #0
 8003ea6:	d015      	beq.n	8003ed4 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003ea8:	f7fd f8c0 	bl	800102c <HAL_GetTick>
 8003eac:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003eae:	e00a      	b.n	8003ec6 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003eb0:	f7fd f8bc 	bl	800102c <HAL_GetTick>
 8003eb4:	4602      	mov	r2, r0
 8003eb6:	693b      	ldr	r3, [r7, #16]
 8003eb8:	1ad3      	subs	r3, r2, r3
 8003eba:	f241 3288 	movw	r2, #5000	; 0x1388
 8003ebe:	4293      	cmp	r3, r2
 8003ec0:	d901      	bls.n	8003ec6 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003ec2:	2303      	movs	r3, #3
 8003ec4:	e0cb      	b.n	800405e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003ec6:	4b49      	ldr	r3, [pc, #292]	; (8003fec <HAL_RCC_OscConfig+0x470>)
 8003ec8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003eca:	f003 0302 	and.w	r3, r3, #2
 8003ece:	2b00      	cmp	r3, #0
 8003ed0:	d0ee      	beq.n	8003eb0 <HAL_RCC_OscConfig+0x334>
 8003ed2:	e014      	b.n	8003efe <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003ed4:	f7fd f8aa 	bl	800102c <HAL_GetTick>
 8003ed8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003eda:	e00a      	b.n	8003ef2 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003edc:	f7fd f8a6 	bl	800102c <HAL_GetTick>
 8003ee0:	4602      	mov	r2, r0
 8003ee2:	693b      	ldr	r3, [r7, #16]
 8003ee4:	1ad3      	subs	r3, r2, r3
 8003ee6:	f241 3288 	movw	r2, #5000	; 0x1388
 8003eea:	4293      	cmp	r3, r2
 8003eec:	d901      	bls.n	8003ef2 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003eee:	2303      	movs	r3, #3
 8003ef0:	e0b5      	b.n	800405e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003ef2:	4b3e      	ldr	r3, [pc, #248]	; (8003fec <HAL_RCC_OscConfig+0x470>)
 8003ef4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ef6:	f003 0302 	and.w	r3, r3, #2
 8003efa:	2b00      	cmp	r3, #0
 8003efc:	d1ee      	bne.n	8003edc <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003efe:	7dfb      	ldrb	r3, [r7, #23]
 8003f00:	2b01      	cmp	r3, #1
 8003f02:	d105      	bne.n	8003f10 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003f04:	4b39      	ldr	r3, [pc, #228]	; (8003fec <HAL_RCC_OscConfig+0x470>)
 8003f06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f08:	4a38      	ldr	r2, [pc, #224]	; (8003fec <HAL_RCC_OscConfig+0x470>)
 8003f0a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003f0e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	699b      	ldr	r3, [r3, #24]
 8003f14:	2b00      	cmp	r3, #0
 8003f16:	f000 80a1 	beq.w	800405c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003f1a:	4b34      	ldr	r3, [pc, #208]	; (8003fec <HAL_RCC_OscConfig+0x470>)
 8003f1c:	689b      	ldr	r3, [r3, #8]
 8003f1e:	f003 030c 	and.w	r3, r3, #12
 8003f22:	2b08      	cmp	r3, #8
 8003f24:	d05c      	beq.n	8003fe0 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	699b      	ldr	r3, [r3, #24]
 8003f2a:	2b02      	cmp	r3, #2
 8003f2c:	d141      	bne.n	8003fb2 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003f2e:	4b31      	ldr	r3, [pc, #196]	; (8003ff4 <HAL_RCC_OscConfig+0x478>)
 8003f30:	2200      	movs	r2, #0
 8003f32:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f34:	f7fd f87a 	bl	800102c <HAL_GetTick>
 8003f38:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003f3a:	e008      	b.n	8003f4e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003f3c:	f7fd f876 	bl	800102c <HAL_GetTick>
 8003f40:	4602      	mov	r2, r0
 8003f42:	693b      	ldr	r3, [r7, #16]
 8003f44:	1ad3      	subs	r3, r2, r3
 8003f46:	2b02      	cmp	r3, #2
 8003f48:	d901      	bls.n	8003f4e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003f4a:	2303      	movs	r3, #3
 8003f4c:	e087      	b.n	800405e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003f4e:	4b27      	ldr	r3, [pc, #156]	; (8003fec <HAL_RCC_OscConfig+0x470>)
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003f56:	2b00      	cmp	r3, #0
 8003f58:	d1f0      	bne.n	8003f3c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	69da      	ldr	r2, [r3, #28]
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	6a1b      	ldr	r3, [r3, #32]
 8003f62:	431a      	orrs	r2, r3
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f68:	019b      	lsls	r3, r3, #6
 8003f6a:	431a      	orrs	r2, r3
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f70:	085b      	lsrs	r3, r3, #1
 8003f72:	3b01      	subs	r3, #1
 8003f74:	041b      	lsls	r3, r3, #16
 8003f76:	431a      	orrs	r2, r3
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f7c:	061b      	lsls	r3, r3, #24
 8003f7e:	491b      	ldr	r1, [pc, #108]	; (8003fec <HAL_RCC_OscConfig+0x470>)
 8003f80:	4313      	orrs	r3, r2
 8003f82:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003f84:	4b1b      	ldr	r3, [pc, #108]	; (8003ff4 <HAL_RCC_OscConfig+0x478>)
 8003f86:	2201      	movs	r2, #1
 8003f88:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f8a:	f7fd f84f 	bl	800102c <HAL_GetTick>
 8003f8e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003f90:	e008      	b.n	8003fa4 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003f92:	f7fd f84b 	bl	800102c <HAL_GetTick>
 8003f96:	4602      	mov	r2, r0
 8003f98:	693b      	ldr	r3, [r7, #16]
 8003f9a:	1ad3      	subs	r3, r2, r3
 8003f9c:	2b02      	cmp	r3, #2
 8003f9e:	d901      	bls.n	8003fa4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003fa0:	2303      	movs	r3, #3
 8003fa2:	e05c      	b.n	800405e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003fa4:	4b11      	ldr	r3, [pc, #68]	; (8003fec <HAL_RCC_OscConfig+0x470>)
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003fac:	2b00      	cmp	r3, #0
 8003fae:	d0f0      	beq.n	8003f92 <HAL_RCC_OscConfig+0x416>
 8003fb0:	e054      	b.n	800405c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003fb2:	4b10      	ldr	r3, [pc, #64]	; (8003ff4 <HAL_RCC_OscConfig+0x478>)
 8003fb4:	2200      	movs	r2, #0
 8003fb6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003fb8:	f7fd f838 	bl	800102c <HAL_GetTick>
 8003fbc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003fbe:	e008      	b.n	8003fd2 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003fc0:	f7fd f834 	bl	800102c <HAL_GetTick>
 8003fc4:	4602      	mov	r2, r0
 8003fc6:	693b      	ldr	r3, [r7, #16]
 8003fc8:	1ad3      	subs	r3, r2, r3
 8003fca:	2b02      	cmp	r3, #2
 8003fcc:	d901      	bls.n	8003fd2 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003fce:	2303      	movs	r3, #3
 8003fd0:	e045      	b.n	800405e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003fd2:	4b06      	ldr	r3, [pc, #24]	; (8003fec <HAL_RCC_OscConfig+0x470>)
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003fda:	2b00      	cmp	r3, #0
 8003fdc:	d1f0      	bne.n	8003fc0 <HAL_RCC_OscConfig+0x444>
 8003fde:	e03d      	b.n	800405c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	699b      	ldr	r3, [r3, #24]
 8003fe4:	2b01      	cmp	r3, #1
 8003fe6:	d107      	bne.n	8003ff8 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003fe8:	2301      	movs	r3, #1
 8003fea:	e038      	b.n	800405e <HAL_RCC_OscConfig+0x4e2>
 8003fec:	40023800 	.word	0x40023800
 8003ff0:	40007000 	.word	0x40007000
 8003ff4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003ff8:	4b1b      	ldr	r3, [pc, #108]	; (8004068 <HAL_RCC_OscConfig+0x4ec>)
 8003ffa:	685b      	ldr	r3, [r3, #4]
 8003ffc:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	699b      	ldr	r3, [r3, #24]
 8004002:	2b01      	cmp	r3, #1
 8004004:	d028      	beq.n	8004058 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004006:	68fb      	ldr	r3, [r7, #12]
 8004008:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004010:	429a      	cmp	r2, r3
 8004012:	d121      	bne.n	8004058 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800401e:	429a      	cmp	r2, r3
 8004020:	d11a      	bne.n	8004058 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004022:	68fa      	ldr	r2, [r7, #12]
 8004024:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004028:	4013      	ands	r3, r2
 800402a:	687a      	ldr	r2, [r7, #4]
 800402c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800402e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004030:	4293      	cmp	r3, r2
 8004032:	d111      	bne.n	8004058 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800403e:	085b      	lsrs	r3, r3, #1
 8004040:	3b01      	subs	r3, #1
 8004042:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004044:	429a      	cmp	r2, r3
 8004046:	d107      	bne.n	8004058 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004052:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004054:	429a      	cmp	r2, r3
 8004056:	d001      	beq.n	800405c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8004058:	2301      	movs	r3, #1
 800405a:	e000      	b.n	800405e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800405c:	2300      	movs	r3, #0
}
 800405e:	4618      	mov	r0, r3
 8004060:	3718      	adds	r7, #24
 8004062:	46bd      	mov	sp, r7
 8004064:	bd80      	pop	{r7, pc}
 8004066:	bf00      	nop
 8004068:	40023800 	.word	0x40023800

0800406c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800406c:	b580      	push	{r7, lr}
 800406e:	b084      	sub	sp, #16
 8004070:	af00      	add	r7, sp, #0
 8004072:	6078      	str	r0, [r7, #4]
 8004074:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	2b00      	cmp	r3, #0
 800407a:	d101      	bne.n	8004080 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800407c:	2301      	movs	r3, #1
 800407e:	e0cc      	b.n	800421a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004080:	4b68      	ldr	r3, [pc, #416]	; (8004224 <HAL_RCC_ClockConfig+0x1b8>)
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	f003 0307 	and.w	r3, r3, #7
 8004088:	683a      	ldr	r2, [r7, #0]
 800408a:	429a      	cmp	r2, r3
 800408c:	d90c      	bls.n	80040a8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800408e:	4b65      	ldr	r3, [pc, #404]	; (8004224 <HAL_RCC_ClockConfig+0x1b8>)
 8004090:	683a      	ldr	r2, [r7, #0]
 8004092:	b2d2      	uxtb	r2, r2
 8004094:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004096:	4b63      	ldr	r3, [pc, #396]	; (8004224 <HAL_RCC_ClockConfig+0x1b8>)
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	f003 0307 	and.w	r3, r3, #7
 800409e:	683a      	ldr	r2, [r7, #0]
 80040a0:	429a      	cmp	r2, r3
 80040a2:	d001      	beq.n	80040a8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80040a4:	2301      	movs	r3, #1
 80040a6:	e0b8      	b.n	800421a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	f003 0302 	and.w	r3, r3, #2
 80040b0:	2b00      	cmp	r3, #0
 80040b2:	d020      	beq.n	80040f6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	f003 0304 	and.w	r3, r3, #4
 80040bc:	2b00      	cmp	r3, #0
 80040be:	d005      	beq.n	80040cc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80040c0:	4b59      	ldr	r3, [pc, #356]	; (8004228 <HAL_RCC_ClockConfig+0x1bc>)
 80040c2:	689b      	ldr	r3, [r3, #8]
 80040c4:	4a58      	ldr	r2, [pc, #352]	; (8004228 <HAL_RCC_ClockConfig+0x1bc>)
 80040c6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80040ca:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	f003 0308 	and.w	r3, r3, #8
 80040d4:	2b00      	cmp	r3, #0
 80040d6:	d005      	beq.n	80040e4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80040d8:	4b53      	ldr	r3, [pc, #332]	; (8004228 <HAL_RCC_ClockConfig+0x1bc>)
 80040da:	689b      	ldr	r3, [r3, #8]
 80040dc:	4a52      	ldr	r2, [pc, #328]	; (8004228 <HAL_RCC_ClockConfig+0x1bc>)
 80040de:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80040e2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80040e4:	4b50      	ldr	r3, [pc, #320]	; (8004228 <HAL_RCC_ClockConfig+0x1bc>)
 80040e6:	689b      	ldr	r3, [r3, #8]
 80040e8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	689b      	ldr	r3, [r3, #8]
 80040f0:	494d      	ldr	r1, [pc, #308]	; (8004228 <HAL_RCC_ClockConfig+0x1bc>)
 80040f2:	4313      	orrs	r3, r2
 80040f4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	f003 0301 	and.w	r3, r3, #1
 80040fe:	2b00      	cmp	r3, #0
 8004100:	d044      	beq.n	800418c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	685b      	ldr	r3, [r3, #4]
 8004106:	2b01      	cmp	r3, #1
 8004108:	d107      	bne.n	800411a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800410a:	4b47      	ldr	r3, [pc, #284]	; (8004228 <HAL_RCC_ClockConfig+0x1bc>)
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004112:	2b00      	cmp	r3, #0
 8004114:	d119      	bne.n	800414a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004116:	2301      	movs	r3, #1
 8004118:	e07f      	b.n	800421a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	685b      	ldr	r3, [r3, #4]
 800411e:	2b02      	cmp	r3, #2
 8004120:	d003      	beq.n	800412a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004126:	2b03      	cmp	r3, #3
 8004128:	d107      	bne.n	800413a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800412a:	4b3f      	ldr	r3, [pc, #252]	; (8004228 <HAL_RCC_ClockConfig+0x1bc>)
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004132:	2b00      	cmp	r3, #0
 8004134:	d109      	bne.n	800414a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004136:	2301      	movs	r3, #1
 8004138:	e06f      	b.n	800421a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800413a:	4b3b      	ldr	r3, [pc, #236]	; (8004228 <HAL_RCC_ClockConfig+0x1bc>)
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	f003 0302 	and.w	r3, r3, #2
 8004142:	2b00      	cmp	r3, #0
 8004144:	d101      	bne.n	800414a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004146:	2301      	movs	r3, #1
 8004148:	e067      	b.n	800421a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800414a:	4b37      	ldr	r3, [pc, #220]	; (8004228 <HAL_RCC_ClockConfig+0x1bc>)
 800414c:	689b      	ldr	r3, [r3, #8]
 800414e:	f023 0203 	bic.w	r2, r3, #3
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	685b      	ldr	r3, [r3, #4]
 8004156:	4934      	ldr	r1, [pc, #208]	; (8004228 <HAL_RCC_ClockConfig+0x1bc>)
 8004158:	4313      	orrs	r3, r2
 800415a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800415c:	f7fc ff66 	bl	800102c <HAL_GetTick>
 8004160:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004162:	e00a      	b.n	800417a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004164:	f7fc ff62 	bl	800102c <HAL_GetTick>
 8004168:	4602      	mov	r2, r0
 800416a:	68fb      	ldr	r3, [r7, #12]
 800416c:	1ad3      	subs	r3, r2, r3
 800416e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004172:	4293      	cmp	r3, r2
 8004174:	d901      	bls.n	800417a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004176:	2303      	movs	r3, #3
 8004178:	e04f      	b.n	800421a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800417a:	4b2b      	ldr	r3, [pc, #172]	; (8004228 <HAL_RCC_ClockConfig+0x1bc>)
 800417c:	689b      	ldr	r3, [r3, #8]
 800417e:	f003 020c 	and.w	r2, r3, #12
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	685b      	ldr	r3, [r3, #4]
 8004186:	009b      	lsls	r3, r3, #2
 8004188:	429a      	cmp	r2, r3
 800418a:	d1eb      	bne.n	8004164 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800418c:	4b25      	ldr	r3, [pc, #148]	; (8004224 <HAL_RCC_ClockConfig+0x1b8>)
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	f003 0307 	and.w	r3, r3, #7
 8004194:	683a      	ldr	r2, [r7, #0]
 8004196:	429a      	cmp	r2, r3
 8004198:	d20c      	bcs.n	80041b4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800419a:	4b22      	ldr	r3, [pc, #136]	; (8004224 <HAL_RCC_ClockConfig+0x1b8>)
 800419c:	683a      	ldr	r2, [r7, #0]
 800419e:	b2d2      	uxtb	r2, r2
 80041a0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80041a2:	4b20      	ldr	r3, [pc, #128]	; (8004224 <HAL_RCC_ClockConfig+0x1b8>)
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	f003 0307 	and.w	r3, r3, #7
 80041aa:	683a      	ldr	r2, [r7, #0]
 80041ac:	429a      	cmp	r2, r3
 80041ae:	d001      	beq.n	80041b4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80041b0:	2301      	movs	r3, #1
 80041b2:	e032      	b.n	800421a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	f003 0304 	and.w	r3, r3, #4
 80041bc:	2b00      	cmp	r3, #0
 80041be:	d008      	beq.n	80041d2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80041c0:	4b19      	ldr	r3, [pc, #100]	; (8004228 <HAL_RCC_ClockConfig+0x1bc>)
 80041c2:	689b      	ldr	r3, [r3, #8]
 80041c4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	68db      	ldr	r3, [r3, #12]
 80041cc:	4916      	ldr	r1, [pc, #88]	; (8004228 <HAL_RCC_ClockConfig+0x1bc>)
 80041ce:	4313      	orrs	r3, r2
 80041d0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	f003 0308 	and.w	r3, r3, #8
 80041da:	2b00      	cmp	r3, #0
 80041dc:	d009      	beq.n	80041f2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80041de:	4b12      	ldr	r3, [pc, #72]	; (8004228 <HAL_RCC_ClockConfig+0x1bc>)
 80041e0:	689b      	ldr	r3, [r3, #8]
 80041e2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	691b      	ldr	r3, [r3, #16]
 80041ea:	00db      	lsls	r3, r3, #3
 80041ec:	490e      	ldr	r1, [pc, #56]	; (8004228 <HAL_RCC_ClockConfig+0x1bc>)
 80041ee:	4313      	orrs	r3, r2
 80041f0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80041f2:	f000 f821 	bl	8004238 <HAL_RCC_GetSysClockFreq>
 80041f6:	4602      	mov	r2, r0
 80041f8:	4b0b      	ldr	r3, [pc, #44]	; (8004228 <HAL_RCC_ClockConfig+0x1bc>)
 80041fa:	689b      	ldr	r3, [r3, #8]
 80041fc:	091b      	lsrs	r3, r3, #4
 80041fe:	f003 030f 	and.w	r3, r3, #15
 8004202:	490a      	ldr	r1, [pc, #40]	; (800422c <HAL_RCC_ClockConfig+0x1c0>)
 8004204:	5ccb      	ldrb	r3, [r1, r3]
 8004206:	fa22 f303 	lsr.w	r3, r2, r3
 800420a:	4a09      	ldr	r2, [pc, #36]	; (8004230 <HAL_RCC_ClockConfig+0x1c4>)
 800420c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800420e:	4b09      	ldr	r3, [pc, #36]	; (8004234 <HAL_RCC_ClockConfig+0x1c8>)
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	4618      	mov	r0, r3
 8004214:	f7fc fec6 	bl	8000fa4 <HAL_InitTick>

  return HAL_OK;
 8004218:	2300      	movs	r3, #0
}
 800421a:	4618      	mov	r0, r3
 800421c:	3710      	adds	r7, #16
 800421e:	46bd      	mov	sp, r7
 8004220:	bd80      	pop	{r7, pc}
 8004222:	bf00      	nop
 8004224:	40023c00 	.word	0x40023c00
 8004228:	40023800 	.word	0x40023800
 800422c:	080097b0 	.word	0x080097b0
 8004230:	20000000 	.word	0x20000000
 8004234:	20000004 	.word	0x20000004

08004238 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004238:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800423c:	b094      	sub	sp, #80	; 0x50
 800423e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004240:	2300      	movs	r3, #0
 8004242:	647b      	str	r3, [r7, #68]	; 0x44
 8004244:	2300      	movs	r3, #0
 8004246:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004248:	2300      	movs	r3, #0
 800424a:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 800424c:	2300      	movs	r3, #0
 800424e:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004250:	4b79      	ldr	r3, [pc, #484]	; (8004438 <HAL_RCC_GetSysClockFreq+0x200>)
 8004252:	689b      	ldr	r3, [r3, #8]
 8004254:	f003 030c 	and.w	r3, r3, #12
 8004258:	2b08      	cmp	r3, #8
 800425a:	d00d      	beq.n	8004278 <HAL_RCC_GetSysClockFreq+0x40>
 800425c:	2b08      	cmp	r3, #8
 800425e:	f200 80e1 	bhi.w	8004424 <HAL_RCC_GetSysClockFreq+0x1ec>
 8004262:	2b00      	cmp	r3, #0
 8004264:	d002      	beq.n	800426c <HAL_RCC_GetSysClockFreq+0x34>
 8004266:	2b04      	cmp	r3, #4
 8004268:	d003      	beq.n	8004272 <HAL_RCC_GetSysClockFreq+0x3a>
 800426a:	e0db      	b.n	8004424 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800426c:	4b73      	ldr	r3, [pc, #460]	; (800443c <HAL_RCC_GetSysClockFreq+0x204>)
 800426e:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8004270:	e0db      	b.n	800442a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004272:	4b73      	ldr	r3, [pc, #460]	; (8004440 <HAL_RCC_GetSysClockFreq+0x208>)
 8004274:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004276:	e0d8      	b.n	800442a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004278:	4b6f      	ldr	r3, [pc, #444]	; (8004438 <HAL_RCC_GetSysClockFreq+0x200>)
 800427a:	685b      	ldr	r3, [r3, #4]
 800427c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004280:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004282:	4b6d      	ldr	r3, [pc, #436]	; (8004438 <HAL_RCC_GetSysClockFreq+0x200>)
 8004284:	685b      	ldr	r3, [r3, #4]
 8004286:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800428a:	2b00      	cmp	r3, #0
 800428c:	d063      	beq.n	8004356 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800428e:	4b6a      	ldr	r3, [pc, #424]	; (8004438 <HAL_RCC_GetSysClockFreq+0x200>)
 8004290:	685b      	ldr	r3, [r3, #4]
 8004292:	099b      	lsrs	r3, r3, #6
 8004294:	2200      	movs	r2, #0
 8004296:	63bb      	str	r3, [r7, #56]	; 0x38
 8004298:	63fa      	str	r2, [r7, #60]	; 0x3c
 800429a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800429c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80042a0:	633b      	str	r3, [r7, #48]	; 0x30
 80042a2:	2300      	movs	r3, #0
 80042a4:	637b      	str	r3, [r7, #52]	; 0x34
 80042a6:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80042aa:	4622      	mov	r2, r4
 80042ac:	462b      	mov	r3, r5
 80042ae:	f04f 0000 	mov.w	r0, #0
 80042b2:	f04f 0100 	mov.w	r1, #0
 80042b6:	0159      	lsls	r1, r3, #5
 80042b8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80042bc:	0150      	lsls	r0, r2, #5
 80042be:	4602      	mov	r2, r0
 80042c0:	460b      	mov	r3, r1
 80042c2:	4621      	mov	r1, r4
 80042c4:	1a51      	subs	r1, r2, r1
 80042c6:	6139      	str	r1, [r7, #16]
 80042c8:	4629      	mov	r1, r5
 80042ca:	eb63 0301 	sbc.w	r3, r3, r1
 80042ce:	617b      	str	r3, [r7, #20]
 80042d0:	f04f 0200 	mov.w	r2, #0
 80042d4:	f04f 0300 	mov.w	r3, #0
 80042d8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80042dc:	4659      	mov	r1, fp
 80042de:	018b      	lsls	r3, r1, #6
 80042e0:	4651      	mov	r1, sl
 80042e2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80042e6:	4651      	mov	r1, sl
 80042e8:	018a      	lsls	r2, r1, #6
 80042ea:	4651      	mov	r1, sl
 80042ec:	ebb2 0801 	subs.w	r8, r2, r1
 80042f0:	4659      	mov	r1, fp
 80042f2:	eb63 0901 	sbc.w	r9, r3, r1
 80042f6:	f04f 0200 	mov.w	r2, #0
 80042fa:	f04f 0300 	mov.w	r3, #0
 80042fe:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004302:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004306:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800430a:	4690      	mov	r8, r2
 800430c:	4699      	mov	r9, r3
 800430e:	4623      	mov	r3, r4
 8004310:	eb18 0303 	adds.w	r3, r8, r3
 8004314:	60bb      	str	r3, [r7, #8]
 8004316:	462b      	mov	r3, r5
 8004318:	eb49 0303 	adc.w	r3, r9, r3
 800431c:	60fb      	str	r3, [r7, #12]
 800431e:	f04f 0200 	mov.w	r2, #0
 8004322:	f04f 0300 	mov.w	r3, #0
 8004326:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800432a:	4629      	mov	r1, r5
 800432c:	024b      	lsls	r3, r1, #9
 800432e:	4621      	mov	r1, r4
 8004330:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004334:	4621      	mov	r1, r4
 8004336:	024a      	lsls	r2, r1, #9
 8004338:	4610      	mov	r0, r2
 800433a:	4619      	mov	r1, r3
 800433c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800433e:	2200      	movs	r2, #0
 8004340:	62bb      	str	r3, [r7, #40]	; 0x28
 8004342:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004344:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004348:	f7fb ff92 	bl	8000270 <__aeabi_uldivmod>
 800434c:	4602      	mov	r2, r0
 800434e:	460b      	mov	r3, r1
 8004350:	4613      	mov	r3, r2
 8004352:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004354:	e058      	b.n	8004408 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004356:	4b38      	ldr	r3, [pc, #224]	; (8004438 <HAL_RCC_GetSysClockFreq+0x200>)
 8004358:	685b      	ldr	r3, [r3, #4]
 800435a:	099b      	lsrs	r3, r3, #6
 800435c:	2200      	movs	r2, #0
 800435e:	4618      	mov	r0, r3
 8004360:	4611      	mov	r1, r2
 8004362:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8004366:	623b      	str	r3, [r7, #32]
 8004368:	2300      	movs	r3, #0
 800436a:	627b      	str	r3, [r7, #36]	; 0x24
 800436c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8004370:	4642      	mov	r2, r8
 8004372:	464b      	mov	r3, r9
 8004374:	f04f 0000 	mov.w	r0, #0
 8004378:	f04f 0100 	mov.w	r1, #0
 800437c:	0159      	lsls	r1, r3, #5
 800437e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004382:	0150      	lsls	r0, r2, #5
 8004384:	4602      	mov	r2, r0
 8004386:	460b      	mov	r3, r1
 8004388:	4641      	mov	r1, r8
 800438a:	ebb2 0a01 	subs.w	sl, r2, r1
 800438e:	4649      	mov	r1, r9
 8004390:	eb63 0b01 	sbc.w	fp, r3, r1
 8004394:	f04f 0200 	mov.w	r2, #0
 8004398:	f04f 0300 	mov.w	r3, #0
 800439c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80043a0:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80043a4:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80043a8:	ebb2 040a 	subs.w	r4, r2, sl
 80043ac:	eb63 050b 	sbc.w	r5, r3, fp
 80043b0:	f04f 0200 	mov.w	r2, #0
 80043b4:	f04f 0300 	mov.w	r3, #0
 80043b8:	00eb      	lsls	r3, r5, #3
 80043ba:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80043be:	00e2      	lsls	r2, r4, #3
 80043c0:	4614      	mov	r4, r2
 80043c2:	461d      	mov	r5, r3
 80043c4:	4643      	mov	r3, r8
 80043c6:	18e3      	adds	r3, r4, r3
 80043c8:	603b      	str	r3, [r7, #0]
 80043ca:	464b      	mov	r3, r9
 80043cc:	eb45 0303 	adc.w	r3, r5, r3
 80043d0:	607b      	str	r3, [r7, #4]
 80043d2:	f04f 0200 	mov.w	r2, #0
 80043d6:	f04f 0300 	mov.w	r3, #0
 80043da:	e9d7 4500 	ldrd	r4, r5, [r7]
 80043de:	4629      	mov	r1, r5
 80043e0:	028b      	lsls	r3, r1, #10
 80043e2:	4621      	mov	r1, r4
 80043e4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80043e8:	4621      	mov	r1, r4
 80043ea:	028a      	lsls	r2, r1, #10
 80043ec:	4610      	mov	r0, r2
 80043ee:	4619      	mov	r1, r3
 80043f0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80043f2:	2200      	movs	r2, #0
 80043f4:	61bb      	str	r3, [r7, #24]
 80043f6:	61fa      	str	r2, [r7, #28]
 80043f8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80043fc:	f7fb ff38 	bl	8000270 <__aeabi_uldivmod>
 8004400:	4602      	mov	r2, r0
 8004402:	460b      	mov	r3, r1
 8004404:	4613      	mov	r3, r2
 8004406:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004408:	4b0b      	ldr	r3, [pc, #44]	; (8004438 <HAL_RCC_GetSysClockFreq+0x200>)
 800440a:	685b      	ldr	r3, [r3, #4]
 800440c:	0c1b      	lsrs	r3, r3, #16
 800440e:	f003 0303 	and.w	r3, r3, #3
 8004412:	3301      	adds	r3, #1
 8004414:	005b      	lsls	r3, r3, #1
 8004416:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8004418:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800441a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800441c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004420:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004422:	e002      	b.n	800442a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004424:	4b05      	ldr	r3, [pc, #20]	; (800443c <HAL_RCC_GetSysClockFreq+0x204>)
 8004426:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004428:	bf00      	nop
    }
  }
  return sysclockfreq;
 800442a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 800442c:	4618      	mov	r0, r3
 800442e:	3750      	adds	r7, #80	; 0x50
 8004430:	46bd      	mov	sp, r7
 8004432:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004436:	bf00      	nop
 8004438:	40023800 	.word	0x40023800
 800443c:	00f42400 	.word	0x00f42400
 8004440:	007a1200 	.word	0x007a1200

08004444 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004444:	b480      	push	{r7}
 8004446:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004448:	4b03      	ldr	r3, [pc, #12]	; (8004458 <HAL_RCC_GetHCLKFreq+0x14>)
 800444a:	681b      	ldr	r3, [r3, #0]
}
 800444c:	4618      	mov	r0, r3
 800444e:	46bd      	mov	sp, r7
 8004450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004454:	4770      	bx	lr
 8004456:	bf00      	nop
 8004458:	20000000 	.word	0x20000000

0800445c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800445c:	b580      	push	{r7, lr}
 800445e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004460:	f7ff fff0 	bl	8004444 <HAL_RCC_GetHCLKFreq>
 8004464:	4602      	mov	r2, r0
 8004466:	4b05      	ldr	r3, [pc, #20]	; (800447c <HAL_RCC_GetPCLK1Freq+0x20>)
 8004468:	689b      	ldr	r3, [r3, #8]
 800446a:	0a9b      	lsrs	r3, r3, #10
 800446c:	f003 0307 	and.w	r3, r3, #7
 8004470:	4903      	ldr	r1, [pc, #12]	; (8004480 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004472:	5ccb      	ldrb	r3, [r1, r3]
 8004474:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004478:	4618      	mov	r0, r3
 800447a:	bd80      	pop	{r7, pc}
 800447c:	40023800 	.word	0x40023800
 8004480:	080097c0 	.word	0x080097c0

08004484 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004484:	b580      	push	{r7, lr}
 8004486:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004488:	f7ff ffdc 	bl	8004444 <HAL_RCC_GetHCLKFreq>
 800448c:	4602      	mov	r2, r0
 800448e:	4b05      	ldr	r3, [pc, #20]	; (80044a4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004490:	689b      	ldr	r3, [r3, #8]
 8004492:	0b5b      	lsrs	r3, r3, #13
 8004494:	f003 0307 	and.w	r3, r3, #7
 8004498:	4903      	ldr	r1, [pc, #12]	; (80044a8 <HAL_RCC_GetPCLK2Freq+0x24>)
 800449a:	5ccb      	ldrb	r3, [r1, r3]
 800449c:	fa22 f303 	lsr.w	r3, r2, r3
}
 80044a0:	4618      	mov	r0, r3
 80044a2:	bd80      	pop	{r7, pc}
 80044a4:	40023800 	.word	0x40023800
 80044a8:	080097c0 	.word	0x080097c0

080044ac <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80044ac:	b580      	push	{r7, lr}
 80044ae:	b086      	sub	sp, #24
 80044b0:	af00      	add	r7, sp, #0
 80044b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80044b4:	2300      	movs	r3, #0
 80044b6:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 80044b8:	2300      	movs	r3, #0
 80044ba:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	f003 0301 	and.w	r3, r3, #1
 80044c4:	2b00      	cmp	r3, #0
 80044c6:	d105      	bne.n	80044d4 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80044d0:	2b00      	cmp	r3, #0
 80044d2:	d035      	beq.n	8004540 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80044d4:	4b62      	ldr	r3, [pc, #392]	; (8004660 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 80044d6:	2200      	movs	r2, #0
 80044d8:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80044da:	f7fc fda7 	bl	800102c <HAL_GetTick>
 80044de:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80044e0:	e008      	b.n	80044f4 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80044e2:	f7fc fda3 	bl	800102c <HAL_GetTick>
 80044e6:	4602      	mov	r2, r0
 80044e8:	697b      	ldr	r3, [r7, #20]
 80044ea:	1ad3      	subs	r3, r2, r3
 80044ec:	2b02      	cmp	r3, #2
 80044ee:	d901      	bls.n	80044f4 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80044f0:	2303      	movs	r3, #3
 80044f2:	e0b0      	b.n	8004656 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80044f4:	4b5b      	ldr	r3, [pc, #364]	; (8004664 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80044fc:	2b00      	cmp	r3, #0
 80044fe:	d1f0      	bne.n	80044e2 <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	685b      	ldr	r3, [r3, #4]
 8004504:	019a      	lsls	r2, r3, #6
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	689b      	ldr	r3, [r3, #8]
 800450a:	071b      	lsls	r3, r3, #28
 800450c:	4955      	ldr	r1, [pc, #340]	; (8004664 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800450e:	4313      	orrs	r3, r2
 8004510:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8004514:	4b52      	ldr	r3, [pc, #328]	; (8004660 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8004516:	2201      	movs	r2, #1
 8004518:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800451a:	f7fc fd87 	bl	800102c <HAL_GetTick>
 800451e:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004520:	e008      	b.n	8004534 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8004522:	f7fc fd83 	bl	800102c <HAL_GetTick>
 8004526:	4602      	mov	r2, r0
 8004528:	697b      	ldr	r3, [r7, #20]
 800452a:	1ad3      	subs	r3, r2, r3
 800452c:	2b02      	cmp	r3, #2
 800452e:	d901      	bls.n	8004534 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004530:	2303      	movs	r3, #3
 8004532:	e090      	b.n	8004656 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004534:	4b4b      	ldr	r3, [pc, #300]	; (8004664 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800453c:	2b00      	cmp	r3, #0
 800453e:	d0f0      	beq.n	8004522 <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	f003 0302 	and.w	r3, r3, #2
 8004548:	2b00      	cmp	r3, #0
 800454a:	f000 8083 	beq.w	8004654 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800454e:	2300      	movs	r3, #0
 8004550:	60fb      	str	r3, [r7, #12]
 8004552:	4b44      	ldr	r3, [pc, #272]	; (8004664 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004554:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004556:	4a43      	ldr	r2, [pc, #268]	; (8004664 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004558:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800455c:	6413      	str	r3, [r2, #64]	; 0x40
 800455e:	4b41      	ldr	r3, [pc, #260]	; (8004664 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004560:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004562:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004566:	60fb      	str	r3, [r7, #12]
 8004568:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 800456a:	4b3f      	ldr	r3, [pc, #252]	; (8004668 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	4a3e      	ldr	r2, [pc, #248]	; (8004668 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004570:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004574:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8004576:	f7fc fd59 	bl	800102c <HAL_GetTick>
 800457a:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 800457c:	e008      	b.n	8004590 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800457e:	f7fc fd55 	bl	800102c <HAL_GetTick>
 8004582:	4602      	mov	r2, r0
 8004584:	697b      	ldr	r3, [r7, #20]
 8004586:	1ad3      	subs	r3, r2, r3
 8004588:	2b02      	cmp	r3, #2
 800458a:	d901      	bls.n	8004590 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 800458c:	2303      	movs	r3, #3
 800458e:	e062      	b.n	8004656 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8004590:	4b35      	ldr	r3, [pc, #212]	; (8004668 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004598:	2b00      	cmp	r3, #0
 800459a:	d0f0      	beq.n	800457e <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800459c:	4b31      	ldr	r3, [pc, #196]	; (8004664 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800459e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80045a0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80045a4:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80045a6:	693b      	ldr	r3, [r7, #16]
 80045a8:	2b00      	cmp	r3, #0
 80045aa:	d02f      	beq.n	800460c <HAL_RCCEx_PeriphCLKConfig+0x160>
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	68db      	ldr	r3, [r3, #12]
 80045b0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80045b4:	693a      	ldr	r2, [r7, #16]
 80045b6:	429a      	cmp	r2, r3
 80045b8:	d028      	beq.n	800460c <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80045ba:	4b2a      	ldr	r3, [pc, #168]	; (8004664 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80045bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80045be:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80045c2:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80045c4:	4b29      	ldr	r3, [pc, #164]	; (800466c <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80045c6:	2201      	movs	r2, #1
 80045c8:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80045ca:	4b28      	ldr	r3, [pc, #160]	; (800466c <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80045cc:	2200      	movs	r2, #0
 80045ce:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 80045d0:	4a24      	ldr	r2, [pc, #144]	; (8004664 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80045d2:	693b      	ldr	r3, [r7, #16]
 80045d4:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80045d6:	4b23      	ldr	r3, [pc, #140]	; (8004664 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80045d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80045da:	f003 0301 	and.w	r3, r3, #1
 80045de:	2b01      	cmp	r3, #1
 80045e0:	d114      	bne.n	800460c <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 80045e2:	f7fc fd23 	bl	800102c <HAL_GetTick>
 80045e6:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80045e8:	e00a      	b.n	8004600 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80045ea:	f7fc fd1f 	bl	800102c <HAL_GetTick>
 80045ee:	4602      	mov	r2, r0
 80045f0:	697b      	ldr	r3, [r7, #20]
 80045f2:	1ad3      	subs	r3, r2, r3
 80045f4:	f241 3288 	movw	r2, #5000	; 0x1388
 80045f8:	4293      	cmp	r3, r2
 80045fa:	d901      	bls.n	8004600 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 80045fc:	2303      	movs	r3, #3
 80045fe:	e02a      	b.n	8004656 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004600:	4b18      	ldr	r3, [pc, #96]	; (8004664 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004602:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004604:	f003 0302 	and.w	r3, r3, #2
 8004608:	2b00      	cmp	r3, #0
 800460a:	d0ee      	beq.n	80045ea <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	68db      	ldr	r3, [r3, #12]
 8004610:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004614:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004618:	d10d      	bne.n	8004636 <HAL_RCCEx_PeriphCLKConfig+0x18a>
 800461a:	4b12      	ldr	r3, [pc, #72]	; (8004664 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800461c:	689b      	ldr	r3, [r3, #8]
 800461e:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	68db      	ldr	r3, [r3, #12]
 8004626:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800462a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800462e:	490d      	ldr	r1, [pc, #52]	; (8004664 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004630:	4313      	orrs	r3, r2
 8004632:	608b      	str	r3, [r1, #8]
 8004634:	e005      	b.n	8004642 <HAL_RCCEx_PeriphCLKConfig+0x196>
 8004636:	4b0b      	ldr	r3, [pc, #44]	; (8004664 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004638:	689b      	ldr	r3, [r3, #8]
 800463a:	4a0a      	ldr	r2, [pc, #40]	; (8004664 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800463c:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8004640:	6093      	str	r3, [r2, #8]
 8004642:	4b08      	ldr	r3, [pc, #32]	; (8004664 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004644:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	68db      	ldr	r3, [r3, #12]
 800464a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800464e:	4905      	ldr	r1, [pc, #20]	; (8004664 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004650:	4313      	orrs	r3, r2
 8004652:	670b      	str	r3, [r1, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8004654:	2300      	movs	r3, #0
}
 8004656:	4618      	mov	r0, r3
 8004658:	3718      	adds	r7, #24
 800465a:	46bd      	mov	sp, r7
 800465c:	bd80      	pop	{r7, pc}
 800465e:	bf00      	nop
 8004660:	42470068 	.word	0x42470068
 8004664:	40023800 	.word	0x40023800
 8004668:	40007000 	.word	0x40007000
 800466c:	42470e40 	.word	0x42470e40

08004670 <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8004670:	b480      	push	{r7}
 8004672:	b087      	sub	sp, #28
 8004674:	af00      	add	r7, sp, #0
 8004676:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 8004678:	2300      	movs	r3, #0
 800467a:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 800467c:	2300      	movs	r3, #0
 800467e:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 8004680:	2300      	movs	r3, #0
 8004682:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 8004684:	2300      	movs	r3, #0
 8004686:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	2b01      	cmp	r3, #1
 800468c:	d13e      	bne.n	800470c <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 800468e:	4b23      	ldr	r3, [pc, #140]	; (800471c <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8004690:	689b      	ldr	r3, [r3, #8]
 8004692:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004696:	60fb      	str	r3, [r7, #12]
 8004698:	68fb      	ldr	r3, [r7, #12]
 800469a:	2b00      	cmp	r3, #0
 800469c:	d005      	beq.n	80046aa <HAL_RCCEx_GetPeriphCLKFreq+0x3a>
 800469e:	68fb      	ldr	r3, [r7, #12]
 80046a0:	2b01      	cmp	r3, #1
 80046a2:	d12f      	bne.n	8004704 <HAL_RCCEx_GetPeriphCLKFreq+0x94>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 80046a4:	4b1e      	ldr	r3, [pc, #120]	; (8004720 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 80046a6:	617b      	str	r3, [r7, #20]
          break;
 80046a8:	e02f      	b.n	800470a <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
          }
#else
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 80046aa:	4b1c      	ldr	r3, [pc, #112]	; (800471c <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 80046ac:	685b      	ldr	r3, [r3, #4]
 80046ae:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80046b2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80046b6:	d108      	bne.n	80046ca <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 80046b8:	4b18      	ldr	r3, [pc, #96]	; (800471c <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 80046ba:	685b      	ldr	r3, [r3, #4]
 80046bc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80046c0:	4a18      	ldr	r2, [pc, #96]	; (8004724 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 80046c2:	fbb2 f3f3 	udiv	r3, r2, r3
 80046c6:	613b      	str	r3, [r7, #16]
 80046c8:	e007      	b.n	80046da <HAL_RCCEx_GetPeriphCLKFreq+0x6a>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 80046ca:	4b14      	ldr	r3, [pc, #80]	; (800471c <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 80046cc:	685b      	ldr	r3, [r3, #4]
 80046ce:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80046d2:	4a15      	ldr	r2, [pc, #84]	; (8004728 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 80046d4:	fbb2 f3f3 	udiv	r3, r2, r3
 80046d8:	613b      	str	r3, [r7, #16]
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 80046da:	4b10      	ldr	r3, [pc, #64]	; (800471c <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 80046dc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80046e0:	099b      	lsrs	r3, r3, #6
 80046e2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80046e6:	693b      	ldr	r3, [r7, #16]
 80046e8:	fb02 f303 	mul.w	r3, r2, r3
 80046ec:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 80046ee:	4b0b      	ldr	r3, [pc, #44]	; (800471c <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 80046f0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80046f4:	0f1b      	lsrs	r3, r3, #28
 80046f6:	f003 0307 	and.w	r3, r3, #7
 80046fa:	68ba      	ldr	r2, [r7, #8]
 80046fc:	fbb2 f3f3 	udiv	r3, r2, r3
 8004700:	617b      	str	r3, [r7, #20]
          break;
 8004702:	e002      	b.n	800470a <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 8004704:	2300      	movs	r3, #0
 8004706:	617b      	str	r3, [r7, #20]
          break;
 8004708:	bf00      	nop
        }
      }
      break;
 800470a:	bf00      	nop
    }
  }
  return frequency;
 800470c:	697b      	ldr	r3, [r7, #20]
}
 800470e:	4618      	mov	r0, r3
 8004710:	371c      	adds	r7, #28
 8004712:	46bd      	mov	sp, r7
 8004714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004718:	4770      	bx	lr
 800471a:	bf00      	nop
 800471c:	40023800 	.word	0x40023800
 8004720:	00bb8000 	.word	0x00bb8000
 8004724:	007a1200 	.word	0x007a1200
 8004728:	00f42400 	.word	0x00f42400

0800472c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800472c:	b580      	push	{r7, lr}
 800472e:	b082      	sub	sp, #8
 8004730:	af00      	add	r7, sp, #0
 8004732:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	2b00      	cmp	r3, #0
 8004738:	d101      	bne.n	800473e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800473a:	2301      	movs	r3, #1
 800473c:	e07b      	b.n	8004836 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004742:	2b00      	cmp	r3, #0
 8004744:	d108      	bne.n	8004758 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	685b      	ldr	r3, [r3, #4]
 800474a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800474e:	d009      	beq.n	8004764 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	2200      	movs	r2, #0
 8004754:	61da      	str	r2, [r3, #28]
 8004756:	e005      	b.n	8004764 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	2200      	movs	r2, #0
 800475c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	2200      	movs	r2, #0
 8004762:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	2200      	movs	r2, #0
 8004768:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004770:	b2db      	uxtb	r3, r3
 8004772:	2b00      	cmp	r3, #0
 8004774:	d106      	bne.n	8004784 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	2200      	movs	r2, #0
 800477a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800477e:	6878      	ldr	r0, [r7, #4]
 8004780:	f7fc fa9e 	bl	8000cc0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	2202      	movs	r2, #2
 8004788:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	681a      	ldr	r2, [r3, #0]
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800479a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	685b      	ldr	r3, [r3, #4]
 80047a0:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	689b      	ldr	r3, [r3, #8]
 80047a8:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80047ac:	431a      	orrs	r2, r3
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	68db      	ldr	r3, [r3, #12]
 80047b2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80047b6:	431a      	orrs	r2, r3
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	691b      	ldr	r3, [r3, #16]
 80047bc:	f003 0302 	and.w	r3, r3, #2
 80047c0:	431a      	orrs	r2, r3
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	695b      	ldr	r3, [r3, #20]
 80047c6:	f003 0301 	and.w	r3, r3, #1
 80047ca:	431a      	orrs	r2, r3
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	699b      	ldr	r3, [r3, #24]
 80047d0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80047d4:	431a      	orrs	r2, r3
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	69db      	ldr	r3, [r3, #28]
 80047da:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80047de:	431a      	orrs	r2, r3
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	6a1b      	ldr	r3, [r3, #32]
 80047e4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80047e8:	ea42 0103 	orr.w	r1, r2, r3
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80047f0:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	430a      	orrs	r2, r1
 80047fa:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	699b      	ldr	r3, [r3, #24]
 8004800:	0c1b      	lsrs	r3, r3, #16
 8004802:	f003 0104 	and.w	r1, r3, #4
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800480a:	f003 0210 	and.w	r2, r3, #16
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	430a      	orrs	r2, r1
 8004814:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	69da      	ldr	r2, [r3, #28]
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004824:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	2200      	movs	r2, #0
 800482a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	2201      	movs	r2, #1
 8004830:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8004834:	2300      	movs	r3, #0
}
 8004836:	4618      	mov	r0, r3
 8004838:	3708      	adds	r7, #8
 800483a:	46bd      	mov	sp, r7
 800483c:	bd80      	pop	{r7, pc}

0800483e <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800483e:	b580      	push	{r7, lr}
 8004840:	b082      	sub	sp, #8
 8004842:	af00      	add	r7, sp, #0
 8004844:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	2b00      	cmp	r3, #0
 800484a:	d101      	bne.n	8004850 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800484c:	2301      	movs	r3, #1
 800484e:	e03f      	b.n	80048d0 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004856:	b2db      	uxtb	r3, r3
 8004858:	2b00      	cmp	r3, #0
 800485a:	d106      	bne.n	800486a <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	2200      	movs	r2, #0
 8004860:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004864:	6878      	ldr	r0, [r7, #4]
 8004866:	f7fc fa73 	bl	8000d50 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	2224      	movs	r2, #36	; 0x24
 800486e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	68da      	ldr	r2, [r3, #12]
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004880:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004882:	6878      	ldr	r0, [r7, #4]
 8004884:	f000 fd7a 	bl	800537c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	691a      	ldr	r2, [r3, #16]
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004896:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	695a      	ldr	r2, [r3, #20]
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80048a6:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	68da      	ldr	r2, [r3, #12]
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80048b6:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	2200      	movs	r2, #0
 80048bc:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	2220      	movs	r2, #32
 80048c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	2220      	movs	r2, #32
 80048ca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80048ce:	2300      	movs	r3, #0
}
 80048d0:	4618      	mov	r0, r3
 80048d2:	3708      	adds	r7, #8
 80048d4:	46bd      	mov	sp, r7
 80048d6:	bd80      	pop	{r7, pc}

080048d8 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80048d8:	b580      	push	{r7, lr}
 80048da:	b08a      	sub	sp, #40	; 0x28
 80048dc:	af02      	add	r7, sp, #8
 80048de:	60f8      	str	r0, [r7, #12]
 80048e0:	60b9      	str	r1, [r7, #8]
 80048e2:	603b      	str	r3, [r7, #0]
 80048e4:	4613      	mov	r3, r2
 80048e6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80048e8:	2300      	movs	r3, #0
 80048ea:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80048ec:	68fb      	ldr	r3, [r7, #12]
 80048ee:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80048f2:	b2db      	uxtb	r3, r3
 80048f4:	2b20      	cmp	r3, #32
 80048f6:	d17c      	bne.n	80049f2 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80048f8:	68bb      	ldr	r3, [r7, #8]
 80048fa:	2b00      	cmp	r3, #0
 80048fc:	d002      	beq.n	8004904 <HAL_UART_Transmit+0x2c>
 80048fe:	88fb      	ldrh	r3, [r7, #6]
 8004900:	2b00      	cmp	r3, #0
 8004902:	d101      	bne.n	8004908 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8004904:	2301      	movs	r3, #1
 8004906:	e075      	b.n	80049f4 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004908:	68fb      	ldr	r3, [r7, #12]
 800490a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800490e:	2b01      	cmp	r3, #1
 8004910:	d101      	bne.n	8004916 <HAL_UART_Transmit+0x3e>
 8004912:	2302      	movs	r3, #2
 8004914:	e06e      	b.n	80049f4 <HAL_UART_Transmit+0x11c>
 8004916:	68fb      	ldr	r3, [r7, #12]
 8004918:	2201      	movs	r2, #1
 800491a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800491e:	68fb      	ldr	r3, [r7, #12]
 8004920:	2200      	movs	r2, #0
 8004922:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004924:	68fb      	ldr	r3, [r7, #12]
 8004926:	2221      	movs	r2, #33	; 0x21
 8004928:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800492c:	f7fc fb7e 	bl	800102c <HAL_GetTick>
 8004930:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004932:	68fb      	ldr	r3, [r7, #12]
 8004934:	88fa      	ldrh	r2, [r7, #6]
 8004936:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8004938:	68fb      	ldr	r3, [r7, #12]
 800493a:	88fa      	ldrh	r2, [r7, #6]
 800493c:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800493e:	68fb      	ldr	r3, [r7, #12]
 8004940:	689b      	ldr	r3, [r3, #8]
 8004942:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004946:	d108      	bne.n	800495a <HAL_UART_Transmit+0x82>
 8004948:	68fb      	ldr	r3, [r7, #12]
 800494a:	691b      	ldr	r3, [r3, #16]
 800494c:	2b00      	cmp	r3, #0
 800494e:	d104      	bne.n	800495a <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8004950:	2300      	movs	r3, #0
 8004952:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004954:	68bb      	ldr	r3, [r7, #8]
 8004956:	61bb      	str	r3, [r7, #24]
 8004958:	e003      	b.n	8004962 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 800495a:	68bb      	ldr	r3, [r7, #8]
 800495c:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800495e:	2300      	movs	r3, #0
 8004960:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8004962:	68fb      	ldr	r3, [r7, #12]
 8004964:	2200      	movs	r2, #0
 8004966:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 800496a:	e02a      	b.n	80049c2 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800496c:	683b      	ldr	r3, [r7, #0]
 800496e:	9300      	str	r3, [sp, #0]
 8004970:	697b      	ldr	r3, [r7, #20]
 8004972:	2200      	movs	r2, #0
 8004974:	2180      	movs	r1, #128	; 0x80
 8004976:	68f8      	ldr	r0, [r7, #12]
 8004978:	f000 faf8 	bl	8004f6c <UART_WaitOnFlagUntilTimeout>
 800497c:	4603      	mov	r3, r0
 800497e:	2b00      	cmp	r3, #0
 8004980:	d001      	beq.n	8004986 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8004982:	2303      	movs	r3, #3
 8004984:	e036      	b.n	80049f4 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8004986:	69fb      	ldr	r3, [r7, #28]
 8004988:	2b00      	cmp	r3, #0
 800498a:	d10b      	bne.n	80049a4 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800498c:	69bb      	ldr	r3, [r7, #24]
 800498e:	881b      	ldrh	r3, [r3, #0]
 8004990:	461a      	mov	r2, r3
 8004992:	68fb      	ldr	r3, [r7, #12]
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800499a:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800499c:	69bb      	ldr	r3, [r7, #24]
 800499e:	3302      	adds	r3, #2
 80049a0:	61bb      	str	r3, [r7, #24]
 80049a2:	e007      	b.n	80049b4 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80049a4:	69fb      	ldr	r3, [r7, #28]
 80049a6:	781a      	ldrb	r2, [r3, #0]
 80049a8:	68fb      	ldr	r3, [r7, #12]
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80049ae:	69fb      	ldr	r3, [r7, #28]
 80049b0:	3301      	adds	r3, #1
 80049b2:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80049b4:	68fb      	ldr	r3, [r7, #12]
 80049b6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80049b8:	b29b      	uxth	r3, r3
 80049ba:	3b01      	subs	r3, #1
 80049bc:	b29a      	uxth	r2, r3
 80049be:	68fb      	ldr	r3, [r7, #12]
 80049c0:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80049c2:	68fb      	ldr	r3, [r7, #12]
 80049c4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80049c6:	b29b      	uxth	r3, r3
 80049c8:	2b00      	cmp	r3, #0
 80049ca:	d1cf      	bne.n	800496c <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80049cc:	683b      	ldr	r3, [r7, #0]
 80049ce:	9300      	str	r3, [sp, #0]
 80049d0:	697b      	ldr	r3, [r7, #20]
 80049d2:	2200      	movs	r2, #0
 80049d4:	2140      	movs	r1, #64	; 0x40
 80049d6:	68f8      	ldr	r0, [r7, #12]
 80049d8:	f000 fac8 	bl	8004f6c <UART_WaitOnFlagUntilTimeout>
 80049dc:	4603      	mov	r3, r0
 80049de:	2b00      	cmp	r3, #0
 80049e0:	d001      	beq.n	80049e6 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80049e2:	2303      	movs	r3, #3
 80049e4:	e006      	b.n	80049f4 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80049e6:	68fb      	ldr	r3, [r7, #12]
 80049e8:	2220      	movs	r2, #32
 80049ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80049ee:	2300      	movs	r3, #0
 80049f0:	e000      	b.n	80049f4 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80049f2:	2302      	movs	r3, #2
  }
}
 80049f4:	4618      	mov	r0, r3
 80049f6:	3720      	adds	r7, #32
 80049f8:	46bd      	mov	sp, r7
 80049fa:	bd80      	pop	{r7, pc}

080049fc <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80049fc:	b580      	push	{r7, lr}
 80049fe:	b0ba      	sub	sp, #232	; 0xe8
 8004a00:	af00      	add	r7, sp, #0
 8004a02:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	68db      	ldr	r3, [r3, #12]
 8004a14:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	695b      	ldr	r3, [r3, #20]
 8004a1e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8004a22:	2300      	movs	r3, #0
 8004a24:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8004a28:	2300      	movs	r3, #0
 8004a2a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8004a2e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004a32:	f003 030f 	and.w	r3, r3, #15
 8004a36:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8004a3a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004a3e:	2b00      	cmp	r3, #0
 8004a40:	d10f      	bne.n	8004a62 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004a42:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004a46:	f003 0320 	and.w	r3, r3, #32
 8004a4a:	2b00      	cmp	r3, #0
 8004a4c:	d009      	beq.n	8004a62 <HAL_UART_IRQHandler+0x66>
 8004a4e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004a52:	f003 0320 	and.w	r3, r3, #32
 8004a56:	2b00      	cmp	r3, #0
 8004a58:	d003      	beq.n	8004a62 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8004a5a:	6878      	ldr	r0, [r7, #4]
 8004a5c:	f000 fbd3 	bl	8005206 <UART_Receive_IT>
      return;
 8004a60:	e256      	b.n	8004f10 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8004a62:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004a66:	2b00      	cmp	r3, #0
 8004a68:	f000 80de 	beq.w	8004c28 <HAL_UART_IRQHandler+0x22c>
 8004a6c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004a70:	f003 0301 	and.w	r3, r3, #1
 8004a74:	2b00      	cmp	r3, #0
 8004a76:	d106      	bne.n	8004a86 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8004a78:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004a7c:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8004a80:	2b00      	cmp	r3, #0
 8004a82:	f000 80d1 	beq.w	8004c28 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8004a86:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004a8a:	f003 0301 	and.w	r3, r3, #1
 8004a8e:	2b00      	cmp	r3, #0
 8004a90:	d00b      	beq.n	8004aaa <HAL_UART_IRQHandler+0xae>
 8004a92:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004a96:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004a9a:	2b00      	cmp	r3, #0
 8004a9c:	d005      	beq.n	8004aaa <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004aa2:	f043 0201 	orr.w	r2, r3, #1
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004aaa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004aae:	f003 0304 	and.w	r3, r3, #4
 8004ab2:	2b00      	cmp	r3, #0
 8004ab4:	d00b      	beq.n	8004ace <HAL_UART_IRQHandler+0xd2>
 8004ab6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004aba:	f003 0301 	and.w	r3, r3, #1
 8004abe:	2b00      	cmp	r3, #0
 8004ac0:	d005      	beq.n	8004ace <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ac6:	f043 0202 	orr.w	r2, r3, #2
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004ace:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004ad2:	f003 0302 	and.w	r3, r3, #2
 8004ad6:	2b00      	cmp	r3, #0
 8004ad8:	d00b      	beq.n	8004af2 <HAL_UART_IRQHandler+0xf6>
 8004ada:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004ade:	f003 0301 	and.w	r3, r3, #1
 8004ae2:	2b00      	cmp	r3, #0
 8004ae4:	d005      	beq.n	8004af2 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004aea:	f043 0204 	orr.w	r2, r3, #4
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8004af2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004af6:	f003 0308 	and.w	r3, r3, #8
 8004afa:	2b00      	cmp	r3, #0
 8004afc:	d011      	beq.n	8004b22 <HAL_UART_IRQHandler+0x126>
 8004afe:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004b02:	f003 0320 	and.w	r3, r3, #32
 8004b06:	2b00      	cmp	r3, #0
 8004b08:	d105      	bne.n	8004b16 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8004b0a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004b0e:	f003 0301 	and.w	r3, r3, #1
 8004b12:	2b00      	cmp	r3, #0
 8004b14:	d005      	beq.n	8004b22 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b1a:	f043 0208 	orr.w	r2, r3, #8
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b26:	2b00      	cmp	r3, #0
 8004b28:	f000 81ed 	beq.w	8004f06 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004b2c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004b30:	f003 0320 	and.w	r3, r3, #32
 8004b34:	2b00      	cmp	r3, #0
 8004b36:	d008      	beq.n	8004b4a <HAL_UART_IRQHandler+0x14e>
 8004b38:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004b3c:	f003 0320 	and.w	r3, r3, #32
 8004b40:	2b00      	cmp	r3, #0
 8004b42:	d002      	beq.n	8004b4a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8004b44:	6878      	ldr	r0, [r7, #4]
 8004b46:	f000 fb5e 	bl	8005206 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	695b      	ldr	r3, [r3, #20]
 8004b50:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b54:	2b40      	cmp	r3, #64	; 0x40
 8004b56:	bf0c      	ite	eq
 8004b58:	2301      	moveq	r3, #1
 8004b5a:	2300      	movne	r3, #0
 8004b5c:	b2db      	uxtb	r3, r3
 8004b5e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b66:	f003 0308 	and.w	r3, r3, #8
 8004b6a:	2b00      	cmp	r3, #0
 8004b6c:	d103      	bne.n	8004b76 <HAL_UART_IRQHandler+0x17a>
 8004b6e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004b72:	2b00      	cmp	r3, #0
 8004b74:	d04f      	beq.n	8004c16 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004b76:	6878      	ldr	r0, [r7, #4]
 8004b78:	f000 fa66 	bl	8005048 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	695b      	ldr	r3, [r3, #20]
 8004b82:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b86:	2b40      	cmp	r3, #64	; 0x40
 8004b88:	d141      	bne.n	8004c0e <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	3314      	adds	r3, #20
 8004b90:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b94:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004b98:	e853 3f00 	ldrex	r3, [r3]
 8004b9c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8004ba0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004ba4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004ba8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	3314      	adds	r3, #20
 8004bb2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8004bb6:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8004bba:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004bbe:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8004bc2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8004bc6:	e841 2300 	strex	r3, r2, [r1]
 8004bca:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8004bce:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8004bd2:	2b00      	cmp	r3, #0
 8004bd4:	d1d9      	bne.n	8004b8a <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004bda:	2b00      	cmp	r3, #0
 8004bdc:	d013      	beq.n	8004c06 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004be2:	4a7d      	ldr	r2, [pc, #500]	; (8004dd8 <HAL_UART_IRQHandler+0x3dc>)
 8004be4:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004bea:	4618      	mov	r0, r3
 8004bec:	f7fc fbcf 	bl	800138e <HAL_DMA_Abort_IT>
 8004bf0:	4603      	mov	r3, r0
 8004bf2:	2b00      	cmp	r3, #0
 8004bf4:	d016      	beq.n	8004c24 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004bfa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004bfc:	687a      	ldr	r2, [r7, #4]
 8004bfe:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004c00:	4610      	mov	r0, r2
 8004c02:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004c04:	e00e      	b.n	8004c24 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004c06:	6878      	ldr	r0, [r7, #4]
 8004c08:	f000 f99a 	bl	8004f40 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004c0c:	e00a      	b.n	8004c24 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004c0e:	6878      	ldr	r0, [r7, #4]
 8004c10:	f000 f996 	bl	8004f40 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004c14:	e006      	b.n	8004c24 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004c16:	6878      	ldr	r0, [r7, #4]
 8004c18:	f000 f992 	bl	8004f40 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	2200      	movs	r2, #0
 8004c20:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8004c22:	e170      	b.n	8004f06 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004c24:	bf00      	nop
    return;
 8004c26:	e16e      	b.n	8004f06 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c2c:	2b01      	cmp	r3, #1
 8004c2e:	f040 814a 	bne.w	8004ec6 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8004c32:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004c36:	f003 0310 	and.w	r3, r3, #16
 8004c3a:	2b00      	cmp	r3, #0
 8004c3c:	f000 8143 	beq.w	8004ec6 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8004c40:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004c44:	f003 0310 	and.w	r3, r3, #16
 8004c48:	2b00      	cmp	r3, #0
 8004c4a:	f000 813c 	beq.w	8004ec6 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004c4e:	2300      	movs	r3, #0
 8004c50:	60bb      	str	r3, [r7, #8]
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	60bb      	str	r3, [r7, #8]
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	685b      	ldr	r3, [r3, #4]
 8004c60:	60bb      	str	r3, [r7, #8]
 8004c62:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	695b      	ldr	r3, [r3, #20]
 8004c6a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c6e:	2b40      	cmp	r3, #64	; 0x40
 8004c70:	f040 80b4 	bne.w	8004ddc <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	685b      	ldr	r3, [r3, #4]
 8004c7c:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8004c80:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8004c84:	2b00      	cmp	r3, #0
 8004c86:	f000 8140 	beq.w	8004f0a <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004c8e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004c92:	429a      	cmp	r2, r3
 8004c94:	f080 8139 	bcs.w	8004f0a <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004c9e:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ca4:	69db      	ldr	r3, [r3, #28]
 8004ca6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004caa:	f000 8088 	beq.w	8004dbe <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	330c      	adds	r3, #12
 8004cb4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004cb8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004cbc:	e853 3f00 	ldrex	r3, [r3]
 8004cc0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8004cc4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004cc8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004ccc:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	330c      	adds	r3, #12
 8004cd6:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8004cda:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8004cde:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ce2:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8004ce6:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8004cea:	e841 2300 	strex	r3, r2, [r1]
 8004cee:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8004cf2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004cf6:	2b00      	cmp	r3, #0
 8004cf8:	d1d9      	bne.n	8004cae <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	3314      	adds	r3, #20
 8004d00:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d02:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004d04:	e853 3f00 	ldrex	r3, [r3]
 8004d08:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8004d0a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004d0c:	f023 0301 	bic.w	r3, r3, #1
 8004d10:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	3314      	adds	r3, #20
 8004d1a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8004d1e:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8004d22:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d24:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8004d26:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8004d2a:	e841 2300 	strex	r3, r2, [r1]
 8004d2e:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8004d30:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004d32:	2b00      	cmp	r3, #0
 8004d34:	d1e1      	bne.n	8004cfa <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	3314      	adds	r3, #20
 8004d3c:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d3e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004d40:	e853 3f00 	ldrex	r3, [r3]
 8004d44:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8004d46:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004d48:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004d4c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	3314      	adds	r3, #20
 8004d56:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8004d5a:	66fa      	str	r2, [r7, #108]	; 0x6c
 8004d5c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d5e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8004d60:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8004d62:	e841 2300 	strex	r3, r2, [r1]
 8004d66:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8004d68:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004d6a:	2b00      	cmp	r3, #0
 8004d6c:	d1e3      	bne.n	8004d36 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	2220      	movs	r2, #32
 8004d72:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	2200      	movs	r2, #0
 8004d7a:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	330c      	adds	r3, #12
 8004d82:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d84:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004d86:	e853 3f00 	ldrex	r3, [r3]
 8004d8a:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8004d8c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004d8e:	f023 0310 	bic.w	r3, r3, #16
 8004d92:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	330c      	adds	r3, #12
 8004d9c:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8004da0:	65ba      	str	r2, [r7, #88]	; 0x58
 8004da2:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004da4:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8004da6:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004da8:	e841 2300 	strex	r3, r2, [r1]
 8004dac:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8004dae:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004db0:	2b00      	cmp	r3, #0
 8004db2:	d1e3      	bne.n	8004d7c <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004db8:	4618      	mov	r0, r3
 8004dba:	f7fc fa78 	bl	80012ae <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004dc6:	b29b      	uxth	r3, r3
 8004dc8:	1ad3      	subs	r3, r2, r3
 8004dca:	b29b      	uxth	r3, r3
 8004dcc:	4619      	mov	r1, r3
 8004dce:	6878      	ldr	r0, [r7, #4]
 8004dd0:	f000 f8c0 	bl	8004f54 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004dd4:	e099      	b.n	8004f0a <HAL_UART_IRQHandler+0x50e>
 8004dd6:	bf00      	nop
 8004dd8:	0800510f 	.word	0x0800510f
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004de4:	b29b      	uxth	r3, r3
 8004de6:	1ad3      	subs	r3, r2, r3
 8004de8:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004df0:	b29b      	uxth	r3, r3
 8004df2:	2b00      	cmp	r3, #0
 8004df4:	f000 808b 	beq.w	8004f0e <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8004df8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004dfc:	2b00      	cmp	r3, #0
 8004dfe:	f000 8086 	beq.w	8004f0e <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	330c      	adds	r3, #12
 8004e08:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e0c:	e853 3f00 	ldrex	r3, [r3]
 8004e10:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004e12:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004e14:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004e18:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	330c      	adds	r3, #12
 8004e22:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8004e26:	647a      	str	r2, [r7, #68]	; 0x44
 8004e28:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e2a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004e2c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004e2e:	e841 2300 	strex	r3, r2, [r1]
 8004e32:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004e34:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004e36:	2b00      	cmp	r3, #0
 8004e38:	d1e3      	bne.n	8004e02 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	3314      	adds	r3, #20
 8004e40:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e44:	e853 3f00 	ldrex	r3, [r3]
 8004e48:	623b      	str	r3, [r7, #32]
   return(result);
 8004e4a:	6a3b      	ldr	r3, [r7, #32]
 8004e4c:	f023 0301 	bic.w	r3, r3, #1
 8004e50:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	3314      	adds	r3, #20
 8004e5a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8004e5e:	633a      	str	r2, [r7, #48]	; 0x30
 8004e60:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e62:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004e64:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004e66:	e841 2300 	strex	r3, r2, [r1]
 8004e6a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004e6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e6e:	2b00      	cmp	r3, #0
 8004e70:	d1e3      	bne.n	8004e3a <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	2220      	movs	r2, #32
 8004e76:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	2200      	movs	r2, #0
 8004e7e:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	330c      	adds	r3, #12
 8004e86:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e88:	693b      	ldr	r3, [r7, #16]
 8004e8a:	e853 3f00 	ldrex	r3, [r3]
 8004e8e:	60fb      	str	r3, [r7, #12]
   return(result);
 8004e90:	68fb      	ldr	r3, [r7, #12]
 8004e92:	f023 0310 	bic.w	r3, r3, #16
 8004e96:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	330c      	adds	r3, #12
 8004ea0:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8004ea4:	61fa      	str	r2, [r7, #28]
 8004ea6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ea8:	69b9      	ldr	r1, [r7, #24]
 8004eaa:	69fa      	ldr	r2, [r7, #28]
 8004eac:	e841 2300 	strex	r3, r2, [r1]
 8004eb0:	617b      	str	r3, [r7, #20]
   return(result);
 8004eb2:	697b      	ldr	r3, [r7, #20]
 8004eb4:	2b00      	cmp	r3, #0
 8004eb6:	d1e3      	bne.n	8004e80 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004eb8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004ebc:	4619      	mov	r1, r3
 8004ebe:	6878      	ldr	r0, [r7, #4]
 8004ec0:	f000 f848 	bl	8004f54 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004ec4:	e023      	b.n	8004f0e <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8004ec6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004eca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004ece:	2b00      	cmp	r3, #0
 8004ed0:	d009      	beq.n	8004ee6 <HAL_UART_IRQHandler+0x4ea>
 8004ed2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004ed6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004eda:	2b00      	cmp	r3, #0
 8004edc:	d003      	beq.n	8004ee6 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8004ede:	6878      	ldr	r0, [r7, #4]
 8004ee0:	f000 f929 	bl	8005136 <UART_Transmit_IT>
    return;
 8004ee4:	e014      	b.n	8004f10 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8004ee6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004eea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004eee:	2b00      	cmp	r3, #0
 8004ef0:	d00e      	beq.n	8004f10 <HAL_UART_IRQHandler+0x514>
 8004ef2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004ef6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004efa:	2b00      	cmp	r3, #0
 8004efc:	d008      	beq.n	8004f10 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8004efe:	6878      	ldr	r0, [r7, #4]
 8004f00:	f000 f969 	bl	80051d6 <UART_EndTransmit_IT>
    return;
 8004f04:	e004      	b.n	8004f10 <HAL_UART_IRQHandler+0x514>
    return;
 8004f06:	bf00      	nop
 8004f08:	e002      	b.n	8004f10 <HAL_UART_IRQHandler+0x514>
      return;
 8004f0a:	bf00      	nop
 8004f0c:	e000      	b.n	8004f10 <HAL_UART_IRQHandler+0x514>
      return;
 8004f0e:	bf00      	nop
  }
}
 8004f10:	37e8      	adds	r7, #232	; 0xe8
 8004f12:	46bd      	mov	sp, r7
 8004f14:	bd80      	pop	{r7, pc}
 8004f16:	bf00      	nop

08004f18 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004f18:	b480      	push	{r7}
 8004f1a:	b083      	sub	sp, #12
 8004f1c:	af00      	add	r7, sp, #0
 8004f1e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8004f20:	bf00      	nop
 8004f22:	370c      	adds	r7, #12
 8004f24:	46bd      	mov	sp, r7
 8004f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f2a:	4770      	bx	lr

08004f2c <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8004f2c:	b480      	push	{r7}
 8004f2e:	b083      	sub	sp, #12
 8004f30:	af00      	add	r7, sp, #0
 8004f32:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8004f34:	bf00      	nop
 8004f36:	370c      	adds	r7, #12
 8004f38:	46bd      	mov	sp, r7
 8004f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f3e:	4770      	bx	lr

08004f40 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004f40:	b480      	push	{r7}
 8004f42:	b083      	sub	sp, #12
 8004f44:	af00      	add	r7, sp, #0
 8004f46:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8004f48:	bf00      	nop
 8004f4a:	370c      	adds	r7, #12
 8004f4c:	46bd      	mov	sp, r7
 8004f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f52:	4770      	bx	lr

08004f54 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004f54:	b480      	push	{r7}
 8004f56:	b083      	sub	sp, #12
 8004f58:	af00      	add	r7, sp, #0
 8004f5a:	6078      	str	r0, [r7, #4]
 8004f5c:	460b      	mov	r3, r1
 8004f5e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004f60:	bf00      	nop
 8004f62:	370c      	adds	r7, #12
 8004f64:	46bd      	mov	sp, r7
 8004f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f6a:	4770      	bx	lr

08004f6c <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8004f6c:	b580      	push	{r7, lr}
 8004f6e:	b090      	sub	sp, #64	; 0x40
 8004f70:	af00      	add	r7, sp, #0
 8004f72:	60f8      	str	r0, [r7, #12]
 8004f74:	60b9      	str	r1, [r7, #8]
 8004f76:	603b      	str	r3, [r7, #0]
 8004f78:	4613      	mov	r3, r2
 8004f7a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004f7c:	e050      	b.n	8005020 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004f7e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004f80:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f84:	d04c      	beq.n	8005020 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8004f86:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004f88:	2b00      	cmp	r3, #0
 8004f8a:	d007      	beq.n	8004f9c <UART_WaitOnFlagUntilTimeout+0x30>
 8004f8c:	f7fc f84e 	bl	800102c <HAL_GetTick>
 8004f90:	4602      	mov	r2, r0
 8004f92:	683b      	ldr	r3, [r7, #0]
 8004f94:	1ad3      	subs	r3, r2, r3
 8004f96:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004f98:	429a      	cmp	r2, r3
 8004f9a:	d241      	bcs.n	8005020 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004f9c:	68fb      	ldr	r3, [r7, #12]
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	330c      	adds	r3, #12
 8004fa2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004fa4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004fa6:	e853 3f00 	ldrex	r3, [r3]
 8004faa:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004fac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fae:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004fb2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004fb4:	68fb      	ldr	r3, [r7, #12]
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	330c      	adds	r3, #12
 8004fba:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004fbc:	637a      	str	r2, [r7, #52]	; 0x34
 8004fbe:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004fc0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004fc2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004fc4:	e841 2300 	strex	r3, r2, [r1]
 8004fc8:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004fca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004fcc:	2b00      	cmp	r3, #0
 8004fce:	d1e5      	bne.n	8004f9c <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004fd0:	68fb      	ldr	r3, [r7, #12]
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	3314      	adds	r3, #20
 8004fd6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004fd8:	697b      	ldr	r3, [r7, #20]
 8004fda:	e853 3f00 	ldrex	r3, [r3]
 8004fde:	613b      	str	r3, [r7, #16]
   return(result);
 8004fe0:	693b      	ldr	r3, [r7, #16]
 8004fe2:	f023 0301 	bic.w	r3, r3, #1
 8004fe6:	63bb      	str	r3, [r7, #56]	; 0x38
 8004fe8:	68fb      	ldr	r3, [r7, #12]
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	3314      	adds	r3, #20
 8004fee:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004ff0:	623a      	str	r2, [r7, #32]
 8004ff2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ff4:	69f9      	ldr	r1, [r7, #28]
 8004ff6:	6a3a      	ldr	r2, [r7, #32]
 8004ff8:	e841 2300 	strex	r3, r2, [r1]
 8004ffc:	61bb      	str	r3, [r7, #24]
   return(result);
 8004ffe:	69bb      	ldr	r3, [r7, #24]
 8005000:	2b00      	cmp	r3, #0
 8005002:	d1e5      	bne.n	8004fd0 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8005004:	68fb      	ldr	r3, [r7, #12]
 8005006:	2220      	movs	r2, #32
 8005008:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800500c:	68fb      	ldr	r3, [r7, #12]
 800500e:	2220      	movs	r2, #32
 8005010:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8005014:	68fb      	ldr	r3, [r7, #12]
 8005016:	2200      	movs	r2, #0
 8005018:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800501c:	2303      	movs	r3, #3
 800501e:	e00f      	b.n	8005040 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005020:	68fb      	ldr	r3, [r7, #12]
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	681a      	ldr	r2, [r3, #0]
 8005026:	68bb      	ldr	r3, [r7, #8]
 8005028:	4013      	ands	r3, r2
 800502a:	68ba      	ldr	r2, [r7, #8]
 800502c:	429a      	cmp	r2, r3
 800502e:	bf0c      	ite	eq
 8005030:	2301      	moveq	r3, #1
 8005032:	2300      	movne	r3, #0
 8005034:	b2db      	uxtb	r3, r3
 8005036:	461a      	mov	r2, r3
 8005038:	79fb      	ldrb	r3, [r7, #7]
 800503a:	429a      	cmp	r2, r3
 800503c:	d09f      	beq.n	8004f7e <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800503e:	2300      	movs	r3, #0
}
 8005040:	4618      	mov	r0, r3
 8005042:	3740      	adds	r7, #64	; 0x40
 8005044:	46bd      	mov	sp, r7
 8005046:	bd80      	pop	{r7, pc}

08005048 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005048:	b480      	push	{r7}
 800504a:	b095      	sub	sp, #84	; 0x54
 800504c:	af00      	add	r7, sp, #0
 800504e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	330c      	adds	r3, #12
 8005056:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005058:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800505a:	e853 3f00 	ldrex	r3, [r3]
 800505e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005060:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005062:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005066:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	330c      	adds	r3, #12
 800506e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005070:	643a      	str	r2, [r7, #64]	; 0x40
 8005072:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005074:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005076:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005078:	e841 2300 	strex	r3, r2, [r1]
 800507c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800507e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005080:	2b00      	cmp	r3, #0
 8005082:	d1e5      	bne.n	8005050 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	3314      	adds	r3, #20
 800508a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800508c:	6a3b      	ldr	r3, [r7, #32]
 800508e:	e853 3f00 	ldrex	r3, [r3]
 8005092:	61fb      	str	r3, [r7, #28]
   return(result);
 8005094:	69fb      	ldr	r3, [r7, #28]
 8005096:	f023 0301 	bic.w	r3, r3, #1
 800509a:	64bb      	str	r3, [r7, #72]	; 0x48
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	3314      	adds	r3, #20
 80050a2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80050a4:	62fa      	str	r2, [r7, #44]	; 0x2c
 80050a6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80050a8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80050aa:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80050ac:	e841 2300 	strex	r3, r2, [r1]
 80050b0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80050b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050b4:	2b00      	cmp	r3, #0
 80050b6:	d1e5      	bne.n	8005084 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80050bc:	2b01      	cmp	r3, #1
 80050be:	d119      	bne.n	80050f4 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	330c      	adds	r3, #12
 80050c6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80050c8:	68fb      	ldr	r3, [r7, #12]
 80050ca:	e853 3f00 	ldrex	r3, [r3]
 80050ce:	60bb      	str	r3, [r7, #8]
   return(result);
 80050d0:	68bb      	ldr	r3, [r7, #8]
 80050d2:	f023 0310 	bic.w	r3, r3, #16
 80050d6:	647b      	str	r3, [r7, #68]	; 0x44
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	330c      	adds	r3, #12
 80050de:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80050e0:	61ba      	str	r2, [r7, #24]
 80050e2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80050e4:	6979      	ldr	r1, [r7, #20]
 80050e6:	69ba      	ldr	r2, [r7, #24]
 80050e8:	e841 2300 	strex	r3, r2, [r1]
 80050ec:	613b      	str	r3, [r7, #16]
   return(result);
 80050ee:	693b      	ldr	r3, [r7, #16]
 80050f0:	2b00      	cmp	r3, #0
 80050f2:	d1e5      	bne.n	80050c0 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	2220      	movs	r2, #32
 80050f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	2200      	movs	r2, #0
 8005100:	631a      	str	r2, [r3, #48]	; 0x30
}
 8005102:	bf00      	nop
 8005104:	3754      	adds	r7, #84	; 0x54
 8005106:	46bd      	mov	sp, r7
 8005108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800510c:	4770      	bx	lr

0800510e <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800510e:	b580      	push	{r7, lr}
 8005110:	b084      	sub	sp, #16
 8005112:	af00      	add	r7, sp, #0
 8005114:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800511a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800511c:	68fb      	ldr	r3, [r7, #12]
 800511e:	2200      	movs	r2, #0
 8005120:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8005122:	68fb      	ldr	r3, [r7, #12]
 8005124:	2200      	movs	r2, #0
 8005126:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005128:	68f8      	ldr	r0, [r7, #12]
 800512a:	f7ff ff09 	bl	8004f40 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800512e:	bf00      	nop
 8005130:	3710      	adds	r7, #16
 8005132:	46bd      	mov	sp, r7
 8005134:	bd80      	pop	{r7, pc}

08005136 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8005136:	b480      	push	{r7}
 8005138:	b085      	sub	sp, #20
 800513a:	af00      	add	r7, sp, #0
 800513c:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005144:	b2db      	uxtb	r3, r3
 8005146:	2b21      	cmp	r3, #33	; 0x21
 8005148:	d13e      	bne.n	80051c8 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	689b      	ldr	r3, [r3, #8]
 800514e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005152:	d114      	bne.n	800517e <UART_Transmit_IT+0x48>
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	691b      	ldr	r3, [r3, #16]
 8005158:	2b00      	cmp	r3, #0
 800515a:	d110      	bne.n	800517e <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	6a1b      	ldr	r3, [r3, #32]
 8005160:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8005162:	68fb      	ldr	r3, [r7, #12]
 8005164:	881b      	ldrh	r3, [r3, #0]
 8005166:	461a      	mov	r2, r3
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005170:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	6a1b      	ldr	r3, [r3, #32]
 8005176:	1c9a      	adds	r2, r3, #2
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	621a      	str	r2, [r3, #32]
 800517c:	e008      	b.n	8005190 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	6a1b      	ldr	r3, [r3, #32]
 8005182:	1c59      	adds	r1, r3, #1
 8005184:	687a      	ldr	r2, [r7, #4]
 8005186:	6211      	str	r1, [r2, #32]
 8005188:	781a      	ldrb	r2, [r3, #0]
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005194:	b29b      	uxth	r3, r3
 8005196:	3b01      	subs	r3, #1
 8005198:	b29b      	uxth	r3, r3
 800519a:	687a      	ldr	r2, [r7, #4]
 800519c:	4619      	mov	r1, r3
 800519e:	84d1      	strh	r1, [r2, #38]	; 0x26
 80051a0:	2b00      	cmp	r3, #0
 80051a2:	d10f      	bne.n	80051c4 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	68da      	ldr	r2, [r3, #12]
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80051b2:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	68da      	ldr	r2, [r3, #12]
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80051c2:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80051c4:	2300      	movs	r3, #0
 80051c6:	e000      	b.n	80051ca <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80051c8:	2302      	movs	r3, #2
  }
}
 80051ca:	4618      	mov	r0, r3
 80051cc:	3714      	adds	r7, #20
 80051ce:	46bd      	mov	sp, r7
 80051d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051d4:	4770      	bx	lr

080051d6 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80051d6:	b580      	push	{r7, lr}
 80051d8:	b082      	sub	sp, #8
 80051da:	af00      	add	r7, sp, #0
 80051dc:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	68da      	ldr	r2, [r3, #12]
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80051ec:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	2220      	movs	r2, #32
 80051f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80051f6:	6878      	ldr	r0, [r7, #4]
 80051f8:	f7ff fe8e 	bl	8004f18 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80051fc:	2300      	movs	r3, #0
}
 80051fe:	4618      	mov	r0, r3
 8005200:	3708      	adds	r7, #8
 8005202:	46bd      	mov	sp, r7
 8005204:	bd80      	pop	{r7, pc}

08005206 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8005206:	b580      	push	{r7, lr}
 8005208:	b08c      	sub	sp, #48	; 0x30
 800520a:	af00      	add	r7, sp, #0
 800520c:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005214:	b2db      	uxtb	r3, r3
 8005216:	2b22      	cmp	r3, #34	; 0x22
 8005218:	f040 80ab 	bne.w	8005372 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	689b      	ldr	r3, [r3, #8]
 8005220:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005224:	d117      	bne.n	8005256 <UART_Receive_IT+0x50>
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	691b      	ldr	r3, [r3, #16]
 800522a:	2b00      	cmp	r3, #0
 800522c:	d113      	bne.n	8005256 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800522e:	2300      	movs	r3, #0
 8005230:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005236:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	685b      	ldr	r3, [r3, #4]
 800523e:	b29b      	uxth	r3, r3
 8005240:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005244:	b29a      	uxth	r2, r3
 8005246:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005248:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800524e:	1c9a      	adds	r2, r3, #2
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	629a      	str	r2, [r3, #40]	; 0x28
 8005254:	e026      	b.n	80052a4 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800525a:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 800525c:	2300      	movs	r3, #0
 800525e:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	689b      	ldr	r3, [r3, #8]
 8005264:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005268:	d007      	beq.n	800527a <UART_Receive_IT+0x74>
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	689b      	ldr	r3, [r3, #8]
 800526e:	2b00      	cmp	r3, #0
 8005270:	d10a      	bne.n	8005288 <UART_Receive_IT+0x82>
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	691b      	ldr	r3, [r3, #16]
 8005276:	2b00      	cmp	r3, #0
 8005278:	d106      	bne.n	8005288 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	685b      	ldr	r3, [r3, #4]
 8005280:	b2da      	uxtb	r2, r3
 8005282:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005284:	701a      	strb	r2, [r3, #0]
 8005286:	e008      	b.n	800529a <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	685b      	ldr	r3, [r3, #4]
 800528e:	b2db      	uxtb	r3, r3
 8005290:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005294:	b2da      	uxtb	r2, r3
 8005296:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005298:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800529e:	1c5a      	adds	r2, r3, #1
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80052a8:	b29b      	uxth	r3, r3
 80052aa:	3b01      	subs	r3, #1
 80052ac:	b29b      	uxth	r3, r3
 80052ae:	687a      	ldr	r2, [r7, #4]
 80052b0:	4619      	mov	r1, r3
 80052b2:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80052b4:	2b00      	cmp	r3, #0
 80052b6:	d15a      	bne.n	800536e <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	68da      	ldr	r2, [r3, #12]
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	f022 0220 	bic.w	r2, r2, #32
 80052c6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	68da      	ldr	r2, [r3, #12]
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80052d6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	695a      	ldr	r2, [r3, #20]
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	f022 0201 	bic.w	r2, r2, #1
 80052e6:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	2220      	movs	r2, #32
 80052ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80052f4:	2b01      	cmp	r3, #1
 80052f6:	d135      	bne.n	8005364 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	2200      	movs	r2, #0
 80052fc:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	330c      	adds	r3, #12
 8005304:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005306:	697b      	ldr	r3, [r7, #20]
 8005308:	e853 3f00 	ldrex	r3, [r3]
 800530c:	613b      	str	r3, [r7, #16]
   return(result);
 800530e:	693b      	ldr	r3, [r7, #16]
 8005310:	f023 0310 	bic.w	r3, r3, #16
 8005314:	627b      	str	r3, [r7, #36]	; 0x24
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	330c      	adds	r3, #12
 800531c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800531e:	623a      	str	r2, [r7, #32]
 8005320:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005322:	69f9      	ldr	r1, [r7, #28]
 8005324:	6a3a      	ldr	r2, [r7, #32]
 8005326:	e841 2300 	strex	r3, r2, [r1]
 800532a:	61bb      	str	r3, [r7, #24]
   return(result);
 800532c:	69bb      	ldr	r3, [r7, #24]
 800532e:	2b00      	cmp	r3, #0
 8005330:	d1e5      	bne.n	80052fe <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	f003 0310 	and.w	r3, r3, #16
 800533c:	2b10      	cmp	r3, #16
 800533e:	d10a      	bne.n	8005356 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005340:	2300      	movs	r3, #0
 8005342:	60fb      	str	r3, [r7, #12]
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	60fb      	str	r3, [r7, #12]
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	685b      	ldr	r3, [r3, #4]
 8005352:	60fb      	str	r3, [r7, #12]
 8005354:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800535a:	4619      	mov	r1, r3
 800535c:	6878      	ldr	r0, [r7, #4]
 800535e:	f7ff fdf9 	bl	8004f54 <HAL_UARTEx_RxEventCallback>
 8005362:	e002      	b.n	800536a <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8005364:	6878      	ldr	r0, [r7, #4]
 8005366:	f7ff fde1 	bl	8004f2c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800536a:	2300      	movs	r3, #0
 800536c:	e002      	b.n	8005374 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 800536e:	2300      	movs	r3, #0
 8005370:	e000      	b.n	8005374 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8005372:	2302      	movs	r3, #2
  }
}
 8005374:	4618      	mov	r0, r3
 8005376:	3730      	adds	r7, #48	; 0x30
 8005378:	46bd      	mov	sp, r7
 800537a:	bd80      	pop	{r7, pc}

0800537c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800537c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005380:	b0c0      	sub	sp, #256	; 0x100
 8005382:	af00      	add	r7, sp, #0
 8005384:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005388:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	691b      	ldr	r3, [r3, #16]
 8005390:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8005394:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005398:	68d9      	ldr	r1, [r3, #12]
 800539a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800539e:	681a      	ldr	r2, [r3, #0]
 80053a0:	ea40 0301 	orr.w	r3, r0, r1
 80053a4:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80053a6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80053aa:	689a      	ldr	r2, [r3, #8]
 80053ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80053b0:	691b      	ldr	r3, [r3, #16]
 80053b2:	431a      	orrs	r2, r3
 80053b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80053b8:	695b      	ldr	r3, [r3, #20]
 80053ba:	431a      	orrs	r2, r3
 80053bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80053c0:	69db      	ldr	r3, [r3, #28]
 80053c2:	4313      	orrs	r3, r2
 80053c4:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80053c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	68db      	ldr	r3, [r3, #12]
 80053d0:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80053d4:	f021 010c 	bic.w	r1, r1, #12
 80053d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80053dc:	681a      	ldr	r2, [r3, #0]
 80053de:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80053e2:	430b      	orrs	r3, r1
 80053e4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80053e6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	695b      	ldr	r3, [r3, #20]
 80053ee:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80053f2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80053f6:	6999      	ldr	r1, [r3, #24]
 80053f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80053fc:	681a      	ldr	r2, [r3, #0]
 80053fe:	ea40 0301 	orr.w	r3, r0, r1
 8005402:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005404:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005408:	681a      	ldr	r2, [r3, #0]
 800540a:	4b8f      	ldr	r3, [pc, #572]	; (8005648 <UART_SetConfig+0x2cc>)
 800540c:	429a      	cmp	r2, r3
 800540e:	d005      	beq.n	800541c <UART_SetConfig+0xa0>
 8005410:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005414:	681a      	ldr	r2, [r3, #0]
 8005416:	4b8d      	ldr	r3, [pc, #564]	; (800564c <UART_SetConfig+0x2d0>)
 8005418:	429a      	cmp	r2, r3
 800541a:	d104      	bne.n	8005426 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800541c:	f7ff f832 	bl	8004484 <HAL_RCC_GetPCLK2Freq>
 8005420:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8005424:	e003      	b.n	800542e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8005426:	f7ff f819 	bl	800445c <HAL_RCC_GetPCLK1Freq>
 800542a:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800542e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005432:	69db      	ldr	r3, [r3, #28]
 8005434:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005438:	f040 810c 	bne.w	8005654 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800543c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005440:	2200      	movs	r2, #0
 8005442:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8005446:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800544a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800544e:	4622      	mov	r2, r4
 8005450:	462b      	mov	r3, r5
 8005452:	1891      	adds	r1, r2, r2
 8005454:	65b9      	str	r1, [r7, #88]	; 0x58
 8005456:	415b      	adcs	r3, r3
 8005458:	65fb      	str	r3, [r7, #92]	; 0x5c
 800545a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800545e:	4621      	mov	r1, r4
 8005460:	eb12 0801 	adds.w	r8, r2, r1
 8005464:	4629      	mov	r1, r5
 8005466:	eb43 0901 	adc.w	r9, r3, r1
 800546a:	f04f 0200 	mov.w	r2, #0
 800546e:	f04f 0300 	mov.w	r3, #0
 8005472:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005476:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800547a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800547e:	4690      	mov	r8, r2
 8005480:	4699      	mov	r9, r3
 8005482:	4623      	mov	r3, r4
 8005484:	eb18 0303 	adds.w	r3, r8, r3
 8005488:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800548c:	462b      	mov	r3, r5
 800548e:	eb49 0303 	adc.w	r3, r9, r3
 8005492:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8005496:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800549a:	685b      	ldr	r3, [r3, #4]
 800549c:	2200      	movs	r2, #0
 800549e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80054a2:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80054a6:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80054aa:	460b      	mov	r3, r1
 80054ac:	18db      	adds	r3, r3, r3
 80054ae:	653b      	str	r3, [r7, #80]	; 0x50
 80054b0:	4613      	mov	r3, r2
 80054b2:	eb42 0303 	adc.w	r3, r2, r3
 80054b6:	657b      	str	r3, [r7, #84]	; 0x54
 80054b8:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80054bc:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80054c0:	f7fa fed6 	bl	8000270 <__aeabi_uldivmod>
 80054c4:	4602      	mov	r2, r0
 80054c6:	460b      	mov	r3, r1
 80054c8:	4b61      	ldr	r3, [pc, #388]	; (8005650 <UART_SetConfig+0x2d4>)
 80054ca:	fba3 2302 	umull	r2, r3, r3, r2
 80054ce:	095b      	lsrs	r3, r3, #5
 80054d0:	011c      	lsls	r4, r3, #4
 80054d2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80054d6:	2200      	movs	r2, #0
 80054d8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80054dc:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80054e0:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80054e4:	4642      	mov	r2, r8
 80054e6:	464b      	mov	r3, r9
 80054e8:	1891      	adds	r1, r2, r2
 80054ea:	64b9      	str	r1, [r7, #72]	; 0x48
 80054ec:	415b      	adcs	r3, r3
 80054ee:	64fb      	str	r3, [r7, #76]	; 0x4c
 80054f0:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80054f4:	4641      	mov	r1, r8
 80054f6:	eb12 0a01 	adds.w	sl, r2, r1
 80054fa:	4649      	mov	r1, r9
 80054fc:	eb43 0b01 	adc.w	fp, r3, r1
 8005500:	f04f 0200 	mov.w	r2, #0
 8005504:	f04f 0300 	mov.w	r3, #0
 8005508:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800550c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8005510:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005514:	4692      	mov	sl, r2
 8005516:	469b      	mov	fp, r3
 8005518:	4643      	mov	r3, r8
 800551a:	eb1a 0303 	adds.w	r3, sl, r3
 800551e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005522:	464b      	mov	r3, r9
 8005524:	eb4b 0303 	adc.w	r3, fp, r3
 8005528:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800552c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005530:	685b      	ldr	r3, [r3, #4]
 8005532:	2200      	movs	r2, #0
 8005534:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005538:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 800553c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8005540:	460b      	mov	r3, r1
 8005542:	18db      	adds	r3, r3, r3
 8005544:	643b      	str	r3, [r7, #64]	; 0x40
 8005546:	4613      	mov	r3, r2
 8005548:	eb42 0303 	adc.w	r3, r2, r3
 800554c:	647b      	str	r3, [r7, #68]	; 0x44
 800554e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8005552:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8005556:	f7fa fe8b 	bl	8000270 <__aeabi_uldivmod>
 800555a:	4602      	mov	r2, r0
 800555c:	460b      	mov	r3, r1
 800555e:	4611      	mov	r1, r2
 8005560:	4b3b      	ldr	r3, [pc, #236]	; (8005650 <UART_SetConfig+0x2d4>)
 8005562:	fba3 2301 	umull	r2, r3, r3, r1
 8005566:	095b      	lsrs	r3, r3, #5
 8005568:	2264      	movs	r2, #100	; 0x64
 800556a:	fb02 f303 	mul.w	r3, r2, r3
 800556e:	1acb      	subs	r3, r1, r3
 8005570:	00db      	lsls	r3, r3, #3
 8005572:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8005576:	4b36      	ldr	r3, [pc, #216]	; (8005650 <UART_SetConfig+0x2d4>)
 8005578:	fba3 2302 	umull	r2, r3, r3, r2
 800557c:	095b      	lsrs	r3, r3, #5
 800557e:	005b      	lsls	r3, r3, #1
 8005580:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005584:	441c      	add	r4, r3
 8005586:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800558a:	2200      	movs	r2, #0
 800558c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005590:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8005594:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8005598:	4642      	mov	r2, r8
 800559a:	464b      	mov	r3, r9
 800559c:	1891      	adds	r1, r2, r2
 800559e:	63b9      	str	r1, [r7, #56]	; 0x38
 80055a0:	415b      	adcs	r3, r3
 80055a2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80055a4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80055a8:	4641      	mov	r1, r8
 80055aa:	1851      	adds	r1, r2, r1
 80055ac:	6339      	str	r1, [r7, #48]	; 0x30
 80055ae:	4649      	mov	r1, r9
 80055b0:	414b      	adcs	r3, r1
 80055b2:	637b      	str	r3, [r7, #52]	; 0x34
 80055b4:	f04f 0200 	mov.w	r2, #0
 80055b8:	f04f 0300 	mov.w	r3, #0
 80055bc:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80055c0:	4659      	mov	r1, fp
 80055c2:	00cb      	lsls	r3, r1, #3
 80055c4:	4651      	mov	r1, sl
 80055c6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80055ca:	4651      	mov	r1, sl
 80055cc:	00ca      	lsls	r2, r1, #3
 80055ce:	4610      	mov	r0, r2
 80055d0:	4619      	mov	r1, r3
 80055d2:	4603      	mov	r3, r0
 80055d4:	4642      	mov	r2, r8
 80055d6:	189b      	adds	r3, r3, r2
 80055d8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80055dc:	464b      	mov	r3, r9
 80055de:	460a      	mov	r2, r1
 80055e0:	eb42 0303 	adc.w	r3, r2, r3
 80055e4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80055e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80055ec:	685b      	ldr	r3, [r3, #4]
 80055ee:	2200      	movs	r2, #0
 80055f0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80055f4:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80055f8:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80055fc:	460b      	mov	r3, r1
 80055fe:	18db      	adds	r3, r3, r3
 8005600:	62bb      	str	r3, [r7, #40]	; 0x28
 8005602:	4613      	mov	r3, r2
 8005604:	eb42 0303 	adc.w	r3, r2, r3
 8005608:	62fb      	str	r3, [r7, #44]	; 0x2c
 800560a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800560e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8005612:	f7fa fe2d 	bl	8000270 <__aeabi_uldivmod>
 8005616:	4602      	mov	r2, r0
 8005618:	460b      	mov	r3, r1
 800561a:	4b0d      	ldr	r3, [pc, #52]	; (8005650 <UART_SetConfig+0x2d4>)
 800561c:	fba3 1302 	umull	r1, r3, r3, r2
 8005620:	095b      	lsrs	r3, r3, #5
 8005622:	2164      	movs	r1, #100	; 0x64
 8005624:	fb01 f303 	mul.w	r3, r1, r3
 8005628:	1ad3      	subs	r3, r2, r3
 800562a:	00db      	lsls	r3, r3, #3
 800562c:	3332      	adds	r3, #50	; 0x32
 800562e:	4a08      	ldr	r2, [pc, #32]	; (8005650 <UART_SetConfig+0x2d4>)
 8005630:	fba2 2303 	umull	r2, r3, r2, r3
 8005634:	095b      	lsrs	r3, r3, #5
 8005636:	f003 0207 	and.w	r2, r3, #7
 800563a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	4422      	add	r2, r4
 8005642:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8005644:	e105      	b.n	8005852 <UART_SetConfig+0x4d6>
 8005646:	bf00      	nop
 8005648:	40011000 	.word	0x40011000
 800564c:	40011400 	.word	0x40011400
 8005650:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005654:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005658:	2200      	movs	r2, #0
 800565a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800565e:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8005662:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8005666:	4642      	mov	r2, r8
 8005668:	464b      	mov	r3, r9
 800566a:	1891      	adds	r1, r2, r2
 800566c:	6239      	str	r1, [r7, #32]
 800566e:	415b      	adcs	r3, r3
 8005670:	627b      	str	r3, [r7, #36]	; 0x24
 8005672:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005676:	4641      	mov	r1, r8
 8005678:	1854      	adds	r4, r2, r1
 800567a:	4649      	mov	r1, r9
 800567c:	eb43 0501 	adc.w	r5, r3, r1
 8005680:	f04f 0200 	mov.w	r2, #0
 8005684:	f04f 0300 	mov.w	r3, #0
 8005688:	00eb      	lsls	r3, r5, #3
 800568a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800568e:	00e2      	lsls	r2, r4, #3
 8005690:	4614      	mov	r4, r2
 8005692:	461d      	mov	r5, r3
 8005694:	4643      	mov	r3, r8
 8005696:	18e3      	adds	r3, r4, r3
 8005698:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800569c:	464b      	mov	r3, r9
 800569e:	eb45 0303 	adc.w	r3, r5, r3
 80056a2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80056a6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80056aa:	685b      	ldr	r3, [r3, #4]
 80056ac:	2200      	movs	r2, #0
 80056ae:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80056b2:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80056b6:	f04f 0200 	mov.w	r2, #0
 80056ba:	f04f 0300 	mov.w	r3, #0
 80056be:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80056c2:	4629      	mov	r1, r5
 80056c4:	008b      	lsls	r3, r1, #2
 80056c6:	4621      	mov	r1, r4
 80056c8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80056cc:	4621      	mov	r1, r4
 80056ce:	008a      	lsls	r2, r1, #2
 80056d0:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80056d4:	f7fa fdcc 	bl	8000270 <__aeabi_uldivmod>
 80056d8:	4602      	mov	r2, r0
 80056da:	460b      	mov	r3, r1
 80056dc:	4b60      	ldr	r3, [pc, #384]	; (8005860 <UART_SetConfig+0x4e4>)
 80056de:	fba3 2302 	umull	r2, r3, r3, r2
 80056e2:	095b      	lsrs	r3, r3, #5
 80056e4:	011c      	lsls	r4, r3, #4
 80056e6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80056ea:	2200      	movs	r2, #0
 80056ec:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80056f0:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80056f4:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80056f8:	4642      	mov	r2, r8
 80056fa:	464b      	mov	r3, r9
 80056fc:	1891      	adds	r1, r2, r2
 80056fe:	61b9      	str	r1, [r7, #24]
 8005700:	415b      	adcs	r3, r3
 8005702:	61fb      	str	r3, [r7, #28]
 8005704:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005708:	4641      	mov	r1, r8
 800570a:	1851      	adds	r1, r2, r1
 800570c:	6139      	str	r1, [r7, #16]
 800570e:	4649      	mov	r1, r9
 8005710:	414b      	adcs	r3, r1
 8005712:	617b      	str	r3, [r7, #20]
 8005714:	f04f 0200 	mov.w	r2, #0
 8005718:	f04f 0300 	mov.w	r3, #0
 800571c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005720:	4659      	mov	r1, fp
 8005722:	00cb      	lsls	r3, r1, #3
 8005724:	4651      	mov	r1, sl
 8005726:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800572a:	4651      	mov	r1, sl
 800572c:	00ca      	lsls	r2, r1, #3
 800572e:	4610      	mov	r0, r2
 8005730:	4619      	mov	r1, r3
 8005732:	4603      	mov	r3, r0
 8005734:	4642      	mov	r2, r8
 8005736:	189b      	adds	r3, r3, r2
 8005738:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800573c:	464b      	mov	r3, r9
 800573e:	460a      	mov	r2, r1
 8005740:	eb42 0303 	adc.w	r3, r2, r3
 8005744:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8005748:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800574c:	685b      	ldr	r3, [r3, #4]
 800574e:	2200      	movs	r2, #0
 8005750:	67bb      	str	r3, [r7, #120]	; 0x78
 8005752:	67fa      	str	r2, [r7, #124]	; 0x7c
 8005754:	f04f 0200 	mov.w	r2, #0
 8005758:	f04f 0300 	mov.w	r3, #0
 800575c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8005760:	4649      	mov	r1, r9
 8005762:	008b      	lsls	r3, r1, #2
 8005764:	4641      	mov	r1, r8
 8005766:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800576a:	4641      	mov	r1, r8
 800576c:	008a      	lsls	r2, r1, #2
 800576e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8005772:	f7fa fd7d 	bl	8000270 <__aeabi_uldivmod>
 8005776:	4602      	mov	r2, r0
 8005778:	460b      	mov	r3, r1
 800577a:	4b39      	ldr	r3, [pc, #228]	; (8005860 <UART_SetConfig+0x4e4>)
 800577c:	fba3 1302 	umull	r1, r3, r3, r2
 8005780:	095b      	lsrs	r3, r3, #5
 8005782:	2164      	movs	r1, #100	; 0x64
 8005784:	fb01 f303 	mul.w	r3, r1, r3
 8005788:	1ad3      	subs	r3, r2, r3
 800578a:	011b      	lsls	r3, r3, #4
 800578c:	3332      	adds	r3, #50	; 0x32
 800578e:	4a34      	ldr	r2, [pc, #208]	; (8005860 <UART_SetConfig+0x4e4>)
 8005790:	fba2 2303 	umull	r2, r3, r2, r3
 8005794:	095b      	lsrs	r3, r3, #5
 8005796:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800579a:	441c      	add	r4, r3
 800579c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80057a0:	2200      	movs	r2, #0
 80057a2:	673b      	str	r3, [r7, #112]	; 0x70
 80057a4:	677a      	str	r2, [r7, #116]	; 0x74
 80057a6:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80057aa:	4642      	mov	r2, r8
 80057ac:	464b      	mov	r3, r9
 80057ae:	1891      	adds	r1, r2, r2
 80057b0:	60b9      	str	r1, [r7, #8]
 80057b2:	415b      	adcs	r3, r3
 80057b4:	60fb      	str	r3, [r7, #12]
 80057b6:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80057ba:	4641      	mov	r1, r8
 80057bc:	1851      	adds	r1, r2, r1
 80057be:	6039      	str	r1, [r7, #0]
 80057c0:	4649      	mov	r1, r9
 80057c2:	414b      	adcs	r3, r1
 80057c4:	607b      	str	r3, [r7, #4]
 80057c6:	f04f 0200 	mov.w	r2, #0
 80057ca:	f04f 0300 	mov.w	r3, #0
 80057ce:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80057d2:	4659      	mov	r1, fp
 80057d4:	00cb      	lsls	r3, r1, #3
 80057d6:	4651      	mov	r1, sl
 80057d8:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80057dc:	4651      	mov	r1, sl
 80057de:	00ca      	lsls	r2, r1, #3
 80057e0:	4610      	mov	r0, r2
 80057e2:	4619      	mov	r1, r3
 80057e4:	4603      	mov	r3, r0
 80057e6:	4642      	mov	r2, r8
 80057e8:	189b      	adds	r3, r3, r2
 80057ea:	66bb      	str	r3, [r7, #104]	; 0x68
 80057ec:	464b      	mov	r3, r9
 80057ee:	460a      	mov	r2, r1
 80057f0:	eb42 0303 	adc.w	r3, r2, r3
 80057f4:	66fb      	str	r3, [r7, #108]	; 0x6c
 80057f6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80057fa:	685b      	ldr	r3, [r3, #4]
 80057fc:	2200      	movs	r2, #0
 80057fe:	663b      	str	r3, [r7, #96]	; 0x60
 8005800:	667a      	str	r2, [r7, #100]	; 0x64
 8005802:	f04f 0200 	mov.w	r2, #0
 8005806:	f04f 0300 	mov.w	r3, #0
 800580a:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800580e:	4649      	mov	r1, r9
 8005810:	008b      	lsls	r3, r1, #2
 8005812:	4641      	mov	r1, r8
 8005814:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005818:	4641      	mov	r1, r8
 800581a:	008a      	lsls	r2, r1, #2
 800581c:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8005820:	f7fa fd26 	bl	8000270 <__aeabi_uldivmod>
 8005824:	4602      	mov	r2, r0
 8005826:	460b      	mov	r3, r1
 8005828:	4b0d      	ldr	r3, [pc, #52]	; (8005860 <UART_SetConfig+0x4e4>)
 800582a:	fba3 1302 	umull	r1, r3, r3, r2
 800582e:	095b      	lsrs	r3, r3, #5
 8005830:	2164      	movs	r1, #100	; 0x64
 8005832:	fb01 f303 	mul.w	r3, r1, r3
 8005836:	1ad3      	subs	r3, r2, r3
 8005838:	011b      	lsls	r3, r3, #4
 800583a:	3332      	adds	r3, #50	; 0x32
 800583c:	4a08      	ldr	r2, [pc, #32]	; (8005860 <UART_SetConfig+0x4e4>)
 800583e:	fba2 2303 	umull	r2, r3, r2, r3
 8005842:	095b      	lsrs	r3, r3, #5
 8005844:	f003 020f 	and.w	r2, r3, #15
 8005848:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	4422      	add	r2, r4
 8005850:	609a      	str	r2, [r3, #8]
}
 8005852:	bf00      	nop
 8005854:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8005858:	46bd      	mov	sp, r7
 800585a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800585e:	bf00      	nop
 8005860:	51eb851f 	.word	0x51eb851f

08005864 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005864:	b084      	sub	sp, #16
 8005866:	b580      	push	{r7, lr}
 8005868:	b084      	sub	sp, #16
 800586a:	af00      	add	r7, sp, #0
 800586c:	6078      	str	r0, [r7, #4]
 800586e:	f107 001c 	add.w	r0, r7, #28
 8005872:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005876:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005878:	2b01      	cmp	r3, #1
 800587a:	d122      	bne.n	80058c2 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005880:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	68db      	ldr	r3, [r3, #12]
 800588c:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8005890:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005894:	687a      	ldr	r2, [r7, #4]
 8005896:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	68db      	ldr	r3, [r3, #12]
 800589c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80058a4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80058a6:	2b01      	cmp	r3, #1
 80058a8:	d105      	bne.n	80058b6 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	68db      	ldr	r3, [r3, #12]
 80058ae:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80058b6:	6878      	ldr	r0, [r7, #4]
 80058b8:	f000 f9c0 	bl	8005c3c <USB_CoreReset>
 80058bc:	4603      	mov	r3, r0
 80058be:	73fb      	strb	r3, [r7, #15]
 80058c0:	e01a      	b.n	80058f8 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	68db      	ldr	r3, [r3, #12]
 80058c6:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80058ce:	6878      	ldr	r0, [r7, #4]
 80058d0:	f000 f9b4 	bl	8005c3c <USB_CoreReset>
 80058d4:	4603      	mov	r3, r0
 80058d6:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80058d8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80058da:	2b00      	cmp	r3, #0
 80058dc:	d106      	bne.n	80058ec <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80058e2:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	639a      	str	r2, [r3, #56]	; 0x38
 80058ea:	e005      	b.n	80058f8 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80058f0:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80058f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80058fa:	2b01      	cmp	r3, #1
 80058fc:	d10b      	bne.n	8005916 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	689b      	ldr	r3, [r3, #8]
 8005902:	f043 0206 	orr.w	r2, r3, #6
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	689b      	ldr	r3, [r3, #8]
 800590e:	f043 0220 	orr.w	r2, r3, #32
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8005916:	7bfb      	ldrb	r3, [r7, #15]
}
 8005918:	4618      	mov	r0, r3
 800591a:	3710      	adds	r7, #16
 800591c:	46bd      	mov	sp, r7
 800591e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005922:	b004      	add	sp, #16
 8005924:	4770      	bx	lr

08005926 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005926:	b480      	push	{r7}
 8005928:	b083      	sub	sp, #12
 800592a:	af00      	add	r7, sp, #0
 800592c:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	689b      	ldr	r3, [r3, #8]
 8005932:	f043 0201 	orr.w	r2, r3, #1
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800593a:	2300      	movs	r3, #0
}
 800593c:	4618      	mov	r0, r3
 800593e:	370c      	adds	r7, #12
 8005940:	46bd      	mov	sp, r7
 8005942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005946:	4770      	bx	lr

08005948 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005948:	b480      	push	{r7}
 800594a:	b083      	sub	sp, #12
 800594c:	af00      	add	r7, sp, #0
 800594e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	689b      	ldr	r3, [r3, #8]
 8005954:	f023 0201 	bic.w	r2, r3, #1
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800595c:	2300      	movs	r3, #0
}
 800595e:	4618      	mov	r0, r3
 8005960:	370c      	adds	r7, #12
 8005962:	46bd      	mov	sp, r7
 8005964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005968:	4770      	bx	lr

0800596a <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800596a:	b580      	push	{r7, lr}
 800596c:	b084      	sub	sp, #16
 800596e:	af00      	add	r7, sp, #0
 8005970:	6078      	str	r0, [r7, #4]
 8005972:	460b      	mov	r3, r1
 8005974:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8005976:	2300      	movs	r3, #0
 8005978:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	68db      	ldr	r3, [r3, #12]
 800597e:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8005986:	78fb      	ldrb	r3, [r7, #3]
 8005988:	2b01      	cmp	r3, #1
 800598a:	d115      	bne.n	80059b8 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	68db      	ldr	r3, [r3, #12]
 8005990:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8005998:	2001      	movs	r0, #1
 800599a:	f7fb fb53 	bl	8001044 <HAL_Delay>
      ms++;
 800599e:	68fb      	ldr	r3, [r7, #12]
 80059a0:	3301      	adds	r3, #1
 80059a2:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 80059a4:	6878      	ldr	r0, [r7, #4]
 80059a6:	f000 f93a 	bl	8005c1e <USB_GetMode>
 80059aa:	4603      	mov	r3, r0
 80059ac:	2b01      	cmp	r3, #1
 80059ae:	d01e      	beq.n	80059ee <USB_SetCurrentMode+0x84>
 80059b0:	68fb      	ldr	r3, [r7, #12]
 80059b2:	2b31      	cmp	r3, #49	; 0x31
 80059b4:	d9f0      	bls.n	8005998 <USB_SetCurrentMode+0x2e>
 80059b6:	e01a      	b.n	80059ee <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80059b8:	78fb      	ldrb	r3, [r7, #3]
 80059ba:	2b00      	cmp	r3, #0
 80059bc:	d115      	bne.n	80059ea <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	68db      	ldr	r3, [r3, #12]
 80059c2:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80059ca:	2001      	movs	r0, #1
 80059cc:	f7fb fb3a 	bl	8001044 <HAL_Delay>
      ms++;
 80059d0:	68fb      	ldr	r3, [r7, #12]
 80059d2:	3301      	adds	r3, #1
 80059d4:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 80059d6:	6878      	ldr	r0, [r7, #4]
 80059d8:	f000 f921 	bl	8005c1e <USB_GetMode>
 80059dc:	4603      	mov	r3, r0
 80059de:	2b00      	cmp	r3, #0
 80059e0:	d005      	beq.n	80059ee <USB_SetCurrentMode+0x84>
 80059e2:	68fb      	ldr	r3, [r7, #12]
 80059e4:	2b31      	cmp	r3, #49	; 0x31
 80059e6:	d9f0      	bls.n	80059ca <USB_SetCurrentMode+0x60>
 80059e8:	e001      	b.n	80059ee <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80059ea:	2301      	movs	r3, #1
 80059ec:	e005      	b.n	80059fa <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 80059ee:	68fb      	ldr	r3, [r7, #12]
 80059f0:	2b32      	cmp	r3, #50	; 0x32
 80059f2:	d101      	bne.n	80059f8 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80059f4:	2301      	movs	r3, #1
 80059f6:	e000      	b.n	80059fa <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80059f8:	2300      	movs	r3, #0
}
 80059fa:	4618      	mov	r0, r3
 80059fc:	3710      	adds	r7, #16
 80059fe:	46bd      	mov	sp, r7
 8005a00:	bd80      	pop	{r7, pc}
	...

08005a04 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8005a04:	b480      	push	{r7}
 8005a06:	b085      	sub	sp, #20
 8005a08:	af00      	add	r7, sp, #0
 8005a0a:	6078      	str	r0, [r7, #4]
 8005a0c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8005a0e:	2300      	movs	r3, #0
 8005a10:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005a12:	68fb      	ldr	r3, [r7, #12]
 8005a14:	3301      	adds	r3, #1
 8005a16:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005a18:	68fb      	ldr	r3, [r7, #12]
 8005a1a:	4a13      	ldr	r2, [pc, #76]	; (8005a68 <USB_FlushTxFifo+0x64>)
 8005a1c:	4293      	cmp	r3, r2
 8005a1e:	d901      	bls.n	8005a24 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8005a20:	2303      	movs	r3, #3
 8005a22:	e01b      	b.n	8005a5c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	691b      	ldr	r3, [r3, #16]
 8005a28:	2b00      	cmp	r3, #0
 8005a2a:	daf2      	bge.n	8005a12 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8005a2c:	2300      	movs	r3, #0
 8005a2e:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8005a30:	683b      	ldr	r3, [r7, #0]
 8005a32:	019b      	lsls	r3, r3, #6
 8005a34:	f043 0220 	orr.w	r2, r3, #32
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005a3c:	68fb      	ldr	r3, [r7, #12]
 8005a3e:	3301      	adds	r3, #1
 8005a40:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005a42:	68fb      	ldr	r3, [r7, #12]
 8005a44:	4a08      	ldr	r2, [pc, #32]	; (8005a68 <USB_FlushTxFifo+0x64>)
 8005a46:	4293      	cmp	r3, r2
 8005a48:	d901      	bls.n	8005a4e <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8005a4a:	2303      	movs	r3, #3
 8005a4c:	e006      	b.n	8005a5c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	691b      	ldr	r3, [r3, #16]
 8005a52:	f003 0320 	and.w	r3, r3, #32
 8005a56:	2b20      	cmp	r3, #32
 8005a58:	d0f0      	beq.n	8005a3c <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8005a5a:	2300      	movs	r3, #0
}
 8005a5c:	4618      	mov	r0, r3
 8005a5e:	3714      	adds	r7, #20
 8005a60:	46bd      	mov	sp, r7
 8005a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a66:	4770      	bx	lr
 8005a68:	00030d40 	.word	0x00030d40

08005a6c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8005a6c:	b480      	push	{r7}
 8005a6e:	b085      	sub	sp, #20
 8005a70:	af00      	add	r7, sp, #0
 8005a72:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005a74:	2300      	movs	r3, #0
 8005a76:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005a78:	68fb      	ldr	r3, [r7, #12]
 8005a7a:	3301      	adds	r3, #1
 8005a7c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005a7e:	68fb      	ldr	r3, [r7, #12]
 8005a80:	4a11      	ldr	r2, [pc, #68]	; (8005ac8 <USB_FlushRxFifo+0x5c>)
 8005a82:	4293      	cmp	r3, r2
 8005a84:	d901      	bls.n	8005a8a <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8005a86:	2303      	movs	r3, #3
 8005a88:	e018      	b.n	8005abc <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	691b      	ldr	r3, [r3, #16]
 8005a8e:	2b00      	cmp	r3, #0
 8005a90:	daf2      	bge.n	8005a78 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8005a92:	2300      	movs	r3, #0
 8005a94:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	2210      	movs	r2, #16
 8005a9a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005a9c:	68fb      	ldr	r3, [r7, #12]
 8005a9e:	3301      	adds	r3, #1
 8005aa0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005aa2:	68fb      	ldr	r3, [r7, #12]
 8005aa4:	4a08      	ldr	r2, [pc, #32]	; (8005ac8 <USB_FlushRxFifo+0x5c>)
 8005aa6:	4293      	cmp	r3, r2
 8005aa8:	d901      	bls.n	8005aae <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8005aaa:	2303      	movs	r3, #3
 8005aac:	e006      	b.n	8005abc <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	691b      	ldr	r3, [r3, #16]
 8005ab2:	f003 0310 	and.w	r3, r3, #16
 8005ab6:	2b10      	cmp	r3, #16
 8005ab8:	d0f0      	beq.n	8005a9c <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8005aba:	2300      	movs	r3, #0
}
 8005abc:	4618      	mov	r0, r3
 8005abe:	3714      	adds	r7, #20
 8005ac0:	46bd      	mov	sp, r7
 8005ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ac6:	4770      	bx	lr
 8005ac8:	00030d40 	.word	0x00030d40

08005acc <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8005acc:	b480      	push	{r7}
 8005ace:	b089      	sub	sp, #36	; 0x24
 8005ad0:	af00      	add	r7, sp, #0
 8005ad2:	60f8      	str	r0, [r7, #12]
 8005ad4:	60b9      	str	r1, [r7, #8]
 8005ad6:	4611      	mov	r1, r2
 8005ad8:	461a      	mov	r2, r3
 8005ada:	460b      	mov	r3, r1
 8005adc:	71fb      	strb	r3, [r7, #7]
 8005ade:	4613      	mov	r3, r2
 8005ae0:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005ae2:	68fb      	ldr	r3, [r7, #12]
 8005ae4:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8005ae6:	68bb      	ldr	r3, [r7, #8]
 8005ae8:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8005aea:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8005aee:	2b00      	cmp	r3, #0
 8005af0:	d123      	bne.n	8005b3a <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8005af2:	88bb      	ldrh	r3, [r7, #4]
 8005af4:	3303      	adds	r3, #3
 8005af6:	089b      	lsrs	r3, r3, #2
 8005af8:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8005afa:	2300      	movs	r3, #0
 8005afc:	61bb      	str	r3, [r7, #24]
 8005afe:	e018      	b.n	8005b32 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8005b00:	79fb      	ldrb	r3, [r7, #7]
 8005b02:	031a      	lsls	r2, r3, #12
 8005b04:	697b      	ldr	r3, [r7, #20]
 8005b06:	4413      	add	r3, r2
 8005b08:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005b0c:	461a      	mov	r2, r3
 8005b0e:	69fb      	ldr	r3, [r7, #28]
 8005b10:	681b      	ldr	r3, [r3, #0]
 8005b12:	6013      	str	r3, [r2, #0]
      pSrc++;
 8005b14:	69fb      	ldr	r3, [r7, #28]
 8005b16:	3301      	adds	r3, #1
 8005b18:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005b1a:	69fb      	ldr	r3, [r7, #28]
 8005b1c:	3301      	adds	r3, #1
 8005b1e:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005b20:	69fb      	ldr	r3, [r7, #28]
 8005b22:	3301      	adds	r3, #1
 8005b24:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005b26:	69fb      	ldr	r3, [r7, #28]
 8005b28:	3301      	adds	r3, #1
 8005b2a:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8005b2c:	69bb      	ldr	r3, [r7, #24]
 8005b2e:	3301      	adds	r3, #1
 8005b30:	61bb      	str	r3, [r7, #24]
 8005b32:	69ba      	ldr	r2, [r7, #24]
 8005b34:	693b      	ldr	r3, [r7, #16]
 8005b36:	429a      	cmp	r2, r3
 8005b38:	d3e2      	bcc.n	8005b00 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8005b3a:	2300      	movs	r3, #0
}
 8005b3c:	4618      	mov	r0, r3
 8005b3e:	3724      	adds	r7, #36	; 0x24
 8005b40:	46bd      	mov	sp, r7
 8005b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b46:	4770      	bx	lr

08005b48 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8005b48:	b480      	push	{r7}
 8005b4a:	b08b      	sub	sp, #44	; 0x2c
 8005b4c:	af00      	add	r7, sp, #0
 8005b4e:	60f8      	str	r0, [r7, #12]
 8005b50:	60b9      	str	r1, [r7, #8]
 8005b52:	4613      	mov	r3, r2
 8005b54:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005b56:	68fb      	ldr	r3, [r7, #12]
 8005b58:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8005b5a:	68bb      	ldr	r3, [r7, #8]
 8005b5c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8005b5e:	88fb      	ldrh	r3, [r7, #6]
 8005b60:	089b      	lsrs	r3, r3, #2
 8005b62:	b29b      	uxth	r3, r3
 8005b64:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8005b66:	88fb      	ldrh	r3, [r7, #6]
 8005b68:	f003 0303 	and.w	r3, r3, #3
 8005b6c:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8005b6e:	2300      	movs	r3, #0
 8005b70:	623b      	str	r3, [r7, #32]
 8005b72:	e014      	b.n	8005b9e <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8005b74:	69bb      	ldr	r3, [r7, #24]
 8005b76:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005b7a:	681a      	ldr	r2, [r3, #0]
 8005b7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b7e:	601a      	str	r2, [r3, #0]
    pDest++;
 8005b80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b82:	3301      	adds	r3, #1
 8005b84:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8005b86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b88:	3301      	adds	r3, #1
 8005b8a:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8005b8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b8e:	3301      	adds	r3, #1
 8005b90:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8005b92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b94:	3301      	adds	r3, #1
 8005b96:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8005b98:	6a3b      	ldr	r3, [r7, #32]
 8005b9a:	3301      	adds	r3, #1
 8005b9c:	623b      	str	r3, [r7, #32]
 8005b9e:	6a3a      	ldr	r2, [r7, #32]
 8005ba0:	697b      	ldr	r3, [r7, #20]
 8005ba2:	429a      	cmp	r2, r3
 8005ba4:	d3e6      	bcc.n	8005b74 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8005ba6:	8bfb      	ldrh	r3, [r7, #30]
 8005ba8:	2b00      	cmp	r3, #0
 8005baa:	d01e      	beq.n	8005bea <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8005bac:	2300      	movs	r3, #0
 8005bae:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8005bb0:	69bb      	ldr	r3, [r7, #24]
 8005bb2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005bb6:	461a      	mov	r2, r3
 8005bb8:	f107 0310 	add.w	r3, r7, #16
 8005bbc:	6812      	ldr	r2, [r2, #0]
 8005bbe:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8005bc0:	693a      	ldr	r2, [r7, #16]
 8005bc2:	6a3b      	ldr	r3, [r7, #32]
 8005bc4:	b2db      	uxtb	r3, r3
 8005bc6:	00db      	lsls	r3, r3, #3
 8005bc8:	fa22 f303 	lsr.w	r3, r2, r3
 8005bcc:	b2da      	uxtb	r2, r3
 8005bce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bd0:	701a      	strb	r2, [r3, #0]
      i++;
 8005bd2:	6a3b      	ldr	r3, [r7, #32]
 8005bd4:	3301      	adds	r3, #1
 8005bd6:	623b      	str	r3, [r7, #32]
      pDest++;
 8005bd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bda:	3301      	adds	r3, #1
 8005bdc:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8005bde:	8bfb      	ldrh	r3, [r7, #30]
 8005be0:	3b01      	subs	r3, #1
 8005be2:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8005be4:	8bfb      	ldrh	r3, [r7, #30]
 8005be6:	2b00      	cmp	r3, #0
 8005be8:	d1ea      	bne.n	8005bc0 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8005bea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8005bec:	4618      	mov	r0, r3
 8005bee:	372c      	adds	r7, #44	; 0x2c
 8005bf0:	46bd      	mov	sp, r7
 8005bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bf6:	4770      	bx	lr

08005bf8 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8005bf8:	b480      	push	{r7}
 8005bfa:	b085      	sub	sp, #20
 8005bfc:	af00      	add	r7, sp, #0
 8005bfe:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	695b      	ldr	r3, [r3, #20]
 8005c04:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	699b      	ldr	r3, [r3, #24]
 8005c0a:	68fa      	ldr	r2, [r7, #12]
 8005c0c:	4013      	ands	r3, r2
 8005c0e:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8005c10:	68fb      	ldr	r3, [r7, #12]
}
 8005c12:	4618      	mov	r0, r3
 8005c14:	3714      	adds	r7, #20
 8005c16:	46bd      	mov	sp, r7
 8005c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c1c:	4770      	bx	lr

08005c1e <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8005c1e:	b480      	push	{r7}
 8005c20:	b083      	sub	sp, #12
 8005c22:	af00      	add	r7, sp, #0
 8005c24:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	695b      	ldr	r3, [r3, #20]
 8005c2a:	f003 0301 	and.w	r3, r3, #1
}
 8005c2e:	4618      	mov	r0, r3
 8005c30:	370c      	adds	r7, #12
 8005c32:	46bd      	mov	sp, r7
 8005c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c38:	4770      	bx	lr
	...

08005c3c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8005c3c:	b480      	push	{r7}
 8005c3e:	b085      	sub	sp, #20
 8005c40:	af00      	add	r7, sp, #0
 8005c42:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005c44:	2300      	movs	r3, #0
 8005c46:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005c48:	68fb      	ldr	r3, [r7, #12]
 8005c4a:	3301      	adds	r3, #1
 8005c4c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005c4e:	68fb      	ldr	r3, [r7, #12]
 8005c50:	4a13      	ldr	r2, [pc, #76]	; (8005ca0 <USB_CoreReset+0x64>)
 8005c52:	4293      	cmp	r3, r2
 8005c54:	d901      	bls.n	8005c5a <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8005c56:	2303      	movs	r3, #3
 8005c58:	e01b      	b.n	8005c92 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	691b      	ldr	r3, [r3, #16]
 8005c5e:	2b00      	cmp	r3, #0
 8005c60:	daf2      	bge.n	8005c48 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8005c62:	2300      	movs	r3, #0
 8005c64:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	691b      	ldr	r3, [r3, #16]
 8005c6a:	f043 0201 	orr.w	r2, r3, #1
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005c72:	68fb      	ldr	r3, [r7, #12]
 8005c74:	3301      	adds	r3, #1
 8005c76:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005c78:	68fb      	ldr	r3, [r7, #12]
 8005c7a:	4a09      	ldr	r2, [pc, #36]	; (8005ca0 <USB_CoreReset+0x64>)
 8005c7c:	4293      	cmp	r3, r2
 8005c7e:	d901      	bls.n	8005c84 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8005c80:	2303      	movs	r3, #3
 8005c82:	e006      	b.n	8005c92 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	691b      	ldr	r3, [r3, #16]
 8005c88:	f003 0301 	and.w	r3, r3, #1
 8005c8c:	2b01      	cmp	r3, #1
 8005c8e:	d0f0      	beq.n	8005c72 <USB_CoreReset+0x36>

  return HAL_OK;
 8005c90:	2300      	movs	r3, #0
}
 8005c92:	4618      	mov	r0, r3
 8005c94:	3714      	adds	r7, #20
 8005c96:	46bd      	mov	sp, r7
 8005c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c9c:	4770      	bx	lr
 8005c9e:	bf00      	nop
 8005ca0:	00030d40 	.word	0x00030d40

08005ca4 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005ca4:	b084      	sub	sp, #16
 8005ca6:	b580      	push	{r7, lr}
 8005ca8:	b086      	sub	sp, #24
 8005caa:	af00      	add	r7, sp, #0
 8005cac:	6078      	str	r0, [r7, #4]
 8005cae:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8005cb2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8005cb6:	2300      	movs	r3, #0
 8005cb8:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8005cbe:	68fb      	ldr	r3, [r7, #12]
 8005cc0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005cc4:	461a      	mov	r2, r3
 8005cc6:	2300      	movs	r3, #0
 8005cc8:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005cce:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005cda:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ce6:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	639a      	str	r2, [r3, #56]	; 0x38
#if defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->CID & (0x1U << 8)) != 0U)
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005cf2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005cf6:	2b00      	cmp	r3, #0
 8005cf8:	d018      	beq.n	8005d2c <USB_HostInit+0x88>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 8005cfa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005cfc:	2b01      	cmp	r3, #1
 8005cfe:	d10a      	bne.n	8005d16 <USB_HostInit+0x72>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 8005d00:	68fb      	ldr	r3, [r7, #12]
 8005d02:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	68fa      	ldr	r2, [r7, #12]
 8005d0a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005d0e:	f043 0304 	orr.w	r3, r3, #4
 8005d12:	6013      	str	r3, [r2, #0]
 8005d14:	e014      	b.n	8005d40 <USB_HostInit+0x9c>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8005d16:	68fb      	ldr	r3, [r7, #12]
 8005d18:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005d1c:	681b      	ldr	r3, [r3, #0]
 8005d1e:	68fa      	ldr	r2, [r7, #12]
 8005d20:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005d24:	f023 0304 	bic.w	r3, r3, #4
 8005d28:	6013      	str	r3, [r2, #0]
 8005d2a:	e009      	b.n	8005d40 <USB_HostInit+0x9c>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8005d2c:	68fb      	ldr	r3, [r7, #12]
 8005d2e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	68fa      	ldr	r2, [r7, #12]
 8005d36:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005d3a:	f023 0304 	bic.w	r3, r3, #4
 8005d3e:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8005d40:	2110      	movs	r1, #16
 8005d42:	6878      	ldr	r0, [r7, #4]
 8005d44:	f7ff fe5e 	bl	8005a04 <USB_FlushTxFifo>
 8005d48:	4603      	mov	r3, r0
 8005d4a:	2b00      	cmp	r3, #0
 8005d4c:	d001      	beq.n	8005d52 <USB_HostInit+0xae>
  {
    ret = HAL_ERROR;
 8005d4e:	2301      	movs	r3, #1
 8005d50:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8005d52:	6878      	ldr	r0, [r7, #4]
 8005d54:	f7ff fe8a 	bl	8005a6c <USB_FlushRxFifo>
 8005d58:	4603      	mov	r3, r0
 8005d5a:	2b00      	cmp	r3, #0
 8005d5c:	d001      	beq.n	8005d62 <USB_HostInit+0xbe>
  {
    ret = HAL_ERROR;
 8005d5e:	2301      	movs	r3, #1
 8005d60:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 8005d62:	2300      	movs	r3, #0
 8005d64:	613b      	str	r3, [r7, #16]
 8005d66:	e015      	b.n	8005d94 <USB_HostInit+0xf0>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 8005d68:	693b      	ldr	r3, [r7, #16]
 8005d6a:	015a      	lsls	r2, r3, #5
 8005d6c:	68fb      	ldr	r3, [r7, #12]
 8005d6e:	4413      	add	r3, r2
 8005d70:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005d74:	461a      	mov	r2, r3
 8005d76:	f04f 33ff 	mov.w	r3, #4294967295
 8005d7a:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 8005d7c:	693b      	ldr	r3, [r7, #16]
 8005d7e:	015a      	lsls	r2, r3, #5
 8005d80:	68fb      	ldr	r3, [r7, #12]
 8005d82:	4413      	add	r3, r2
 8005d84:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005d88:	461a      	mov	r2, r3
 8005d8a:	2300      	movs	r3, #0
 8005d8c:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 8005d8e:	693b      	ldr	r3, [r7, #16]
 8005d90:	3301      	adds	r3, #1
 8005d92:	613b      	str	r3, [r7, #16]
 8005d94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d96:	693a      	ldr	r2, [r7, #16]
 8005d98:	429a      	cmp	r2, r3
 8005d9a:	d3e5      	bcc.n	8005d68 <USB_HostInit+0xc4>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	2200      	movs	r2, #0
 8005da0:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	f04f 32ff 	mov.w	r2, #4294967295
 8005da8:	615a      	str	r2, [r3, #20]

  if ((USBx->CID & (0x1U << 8)) != 0U)
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005dae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005db2:	2b00      	cmp	r3, #0
 8005db4:	d00b      	beq.n	8005dce <USB_HostInit+0x12a>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005dbc:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	4a13      	ldr	r2, [pc, #76]	; (8005e10 <USB_HostInit+0x16c>)
 8005dc2:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	4a13      	ldr	r2, [pc, #76]	; (8005e14 <USB_HostInit+0x170>)
 8005dc8:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 8005dcc:	e009      	b.n	8005de2 <USB_HostInit+0x13e>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	2280      	movs	r2, #128	; 0x80
 8005dd2:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	4a10      	ldr	r2, [pc, #64]	; (8005e18 <USB_HostInit+0x174>)
 8005dd8:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	4a0f      	ldr	r2, [pc, #60]	; (8005e1c <USB_HostInit+0x178>)
 8005dde:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8005de2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005de4:	2b00      	cmp	r3, #0
 8005de6:	d105      	bne.n	8005df4 <USB_HostInit+0x150>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	699b      	ldr	r3, [r3, #24]
 8005dec:	f043 0210 	orr.w	r2, r3, #16
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	699a      	ldr	r2, [r3, #24]
 8005df8:	4b09      	ldr	r3, [pc, #36]	; (8005e20 <USB_HostInit+0x17c>)
 8005dfa:	4313      	orrs	r3, r2
 8005dfc:	687a      	ldr	r2, [r7, #4]
 8005dfe:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return ret;
 8005e00:	7dfb      	ldrb	r3, [r7, #23]
}
 8005e02:	4618      	mov	r0, r3
 8005e04:	3718      	adds	r7, #24
 8005e06:	46bd      	mov	sp, r7
 8005e08:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005e0c:	b004      	add	sp, #16
 8005e0e:	4770      	bx	lr
 8005e10:	01000200 	.word	0x01000200
 8005e14:	00e00300 	.word	0x00e00300
 8005e18:	00600080 	.word	0x00600080
 8005e1c:	004000e0 	.word	0x004000e0
 8005e20:	a3200008 	.word	0xa3200008

08005e24 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 8005e24:	b480      	push	{r7}
 8005e26:	b085      	sub	sp, #20
 8005e28:	af00      	add	r7, sp, #0
 8005e2a:	6078      	str	r0, [r7, #4]
 8005e2c:	460b      	mov	r3, r1
 8005e2e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8005e34:	68fb      	ldr	r3, [r7, #12]
 8005e36:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	68fa      	ldr	r2, [r7, #12]
 8005e3e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005e42:	f023 0303 	bic.w	r3, r3, #3
 8005e46:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 8005e48:	68fb      	ldr	r3, [r7, #12]
 8005e4a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005e4e:	681a      	ldr	r2, [r3, #0]
 8005e50:	78fb      	ldrb	r3, [r7, #3]
 8005e52:	f003 0303 	and.w	r3, r3, #3
 8005e56:	68f9      	ldr	r1, [r7, #12]
 8005e58:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8005e5c:	4313      	orrs	r3, r2
 8005e5e:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 8005e60:	78fb      	ldrb	r3, [r7, #3]
 8005e62:	2b01      	cmp	r3, #1
 8005e64:	d107      	bne.n	8005e76 <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 8005e66:	68fb      	ldr	r3, [r7, #12]
 8005e68:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005e6c:	461a      	mov	r2, r3
 8005e6e:	f64b 3380 	movw	r3, #48000	; 0xbb80
 8005e72:	6053      	str	r3, [r2, #4]
 8005e74:	e009      	b.n	8005e8a <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 8005e76:	78fb      	ldrb	r3, [r7, #3]
 8005e78:	2b02      	cmp	r3, #2
 8005e7a:	d106      	bne.n	8005e8a <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 8005e7c:	68fb      	ldr	r3, [r7, #12]
 8005e7e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005e82:	461a      	mov	r2, r3
 8005e84:	f241 7370 	movw	r3, #6000	; 0x1770
 8005e88:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 8005e8a:	2300      	movs	r3, #0
}
 8005e8c:	4618      	mov	r0, r3
 8005e8e:	3714      	adds	r7, #20
 8005e90:	46bd      	mov	sp, r7
 8005e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e96:	4770      	bx	lr

08005e98 <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(USB_OTG_GlobalTypeDef *USBx)
{
 8005e98:	b580      	push	{r7, lr}
 8005e9a:	b084      	sub	sp, #16
 8005e9c:	af00      	add	r7, sp, #0
 8005e9e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 8005ea4:	2300      	movs	r3, #0
 8005ea6:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8005ea8:	68fb      	ldr	r3, [r7, #12]
 8005eaa:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8005eb2:	68bb      	ldr	r3, [r7, #8]
 8005eb4:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8005eb8:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 8005eba:	68bb      	ldr	r3, [r7, #8]
 8005ebc:	68fa      	ldr	r2, [r7, #12]
 8005ebe:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8005ec2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005ec6:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 8005ec8:	2064      	movs	r0, #100	; 0x64
 8005eca:	f7fb f8bb 	bl	8001044 <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 8005ece:	68bb      	ldr	r3, [r7, #8]
 8005ed0:	68fa      	ldr	r2, [r7, #12]
 8005ed2:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8005ed6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005eda:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 8005edc:	200a      	movs	r0, #10
 8005ede:	f7fb f8b1 	bl	8001044 <HAL_Delay>

  return HAL_OK;
 8005ee2:	2300      	movs	r3, #0
}
 8005ee4:	4618      	mov	r0, r3
 8005ee6:	3710      	adds	r7, #16
 8005ee8:	46bd      	mov	sp, r7
 8005eea:	bd80      	pop	{r7, pc}

08005eec <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 8005eec:	b480      	push	{r7}
 8005eee:	b085      	sub	sp, #20
 8005ef0:	af00      	add	r7, sp, #0
 8005ef2:	6078      	str	r0, [r7, #4]
 8005ef4:	460b      	mov	r3, r1
 8005ef6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8005efc:	2300      	movs	r3, #0
 8005efe:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8005f00:	68fb      	ldr	r3, [r7, #12]
 8005f02:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8005f06:	681b      	ldr	r3, [r3, #0]
 8005f08:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8005f0a:	68bb      	ldr	r3, [r7, #8]
 8005f0c:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8005f10:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 8005f12:	68bb      	ldr	r3, [r7, #8]
 8005f14:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005f18:	2b00      	cmp	r3, #0
 8005f1a:	d109      	bne.n	8005f30 <USB_DriveVbus+0x44>
 8005f1c:	78fb      	ldrb	r3, [r7, #3]
 8005f1e:	2b01      	cmp	r3, #1
 8005f20:	d106      	bne.n	8005f30 <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 8005f22:	68bb      	ldr	r3, [r7, #8]
 8005f24:	68fa      	ldr	r2, [r7, #12]
 8005f26:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8005f2a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8005f2e:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 8005f30:	68bb      	ldr	r3, [r7, #8]
 8005f32:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005f36:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005f3a:	d109      	bne.n	8005f50 <USB_DriveVbus+0x64>
 8005f3c:	78fb      	ldrb	r3, [r7, #3]
 8005f3e:	2b00      	cmp	r3, #0
 8005f40:	d106      	bne.n	8005f50 <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 8005f42:	68bb      	ldr	r3, [r7, #8]
 8005f44:	68fa      	ldr	r2, [r7, #12]
 8005f46:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8005f4a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005f4e:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 8005f50:	2300      	movs	r3, #0
}
 8005f52:	4618      	mov	r0, r3
 8005f54:	3714      	adds	r7, #20
 8005f56:	46bd      	mov	sp, r7
 8005f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f5c:	4770      	bx	lr

08005f5e <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8005f5e:	b480      	push	{r7}
 8005f60:	b085      	sub	sp, #20
 8005f62:	af00      	add	r7, sp, #0
 8005f64:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8005f6a:	2300      	movs	r3, #0
 8005f6c:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8005f6e:	68fb      	ldr	r3, [r7, #12]
 8005f70:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8005f74:	681b      	ldr	r3, [r3, #0]
 8005f76:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 8005f78:	68bb      	ldr	r3, [r7, #8]
 8005f7a:	0c5b      	lsrs	r3, r3, #17
 8005f7c:	f003 0303 	and.w	r3, r3, #3
}
 8005f80:	4618      	mov	r0, r3
 8005f82:	3714      	adds	r7, #20
 8005f84:	46bd      	mov	sp, r7
 8005f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f8a:	4770      	bx	lr

08005f8c <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
 8005f8c:	b480      	push	{r7}
 8005f8e:	b085      	sub	sp, #20
 8005f90:	af00      	add	r7, sp, #0
 8005f92:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 8005f98:	68fb      	ldr	r3, [r7, #12]
 8005f9a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005f9e:	689b      	ldr	r3, [r3, #8]
 8005fa0:	b29b      	uxth	r3, r3
}
 8005fa2:	4618      	mov	r0, r3
 8005fa4:	3714      	adds	r7, #20
 8005fa6:	46bd      	mov	sp, r7
 8005fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fac:	4770      	bx	lr
	...

08005fb0 <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 8005fb0:	b580      	push	{r7, lr}
 8005fb2:	b088      	sub	sp, #32
 8005fb4:	af00      	add	r7, sp, #0
 8005fb6:	6078      	str	r0, [r7, #4]
 8005fb8:	4608      	mov	r0, r1
 8005fba:	4611      	mov	r1, r2
 8005fbc:	461a      	mov	r2, r3
 8005fbe:	4603      	mov	r3, r0
 8005fc0:	70fb      	strb	r3, [r7, #3]
 8005fc2:	460b      	mov	r3, r1
 8005fc4:	70bb      	strb	r3, [r7, #2]
 8005fc6:	4613      	mov	r3, r2
 8005fc8:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 8005fca:	2300      	movs	r3, #0
 8005fcc:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir;
  uint32_t HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 8005fd2:	78fb      	ldrb	r3, [r7, #3]
 8005fd4:	015a      	lsls	r2, r3, #5
 8005fd6:	693b      	ldr	r3, [r7, #16]
 8005fd8:	4413      	add	r3, r2
 8005fda:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005fde:	461a      	mov	r2, r3
 8005fe0:	f04f 33ff 	mov.w	r3, #4294967295
 8005fe4:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 8005fe6:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8005fea:	2b03      	cmp	r3, #3
 8005fec:	d87e      	bhi.n	80060ec <USB_HC_Init+0x13c>
 8005fee:	a201      	add	r2, pc, #4	; (adr r2, 8005ff4 <USB_HC_Init+0x44>)
 8005ff0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ff4:	08006005 	.word	0x08006005
 8005ff8:	080060af 	.word	0x080060af
 8005ffc:	08006005 	.word	0x08006005
 8006000:	08006071 	.word	0x08006071
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8006004:	78fb      	ldrb	r3, [r7, #3]
 8006006:	015a      	lsls	r2, r3, #5
 8006008:	693b      	ldr	r3, [r7, #16]
 800600a:	4413      	add	r3, r2
 800600c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006010:	461a      	mov	r2, r3
 8006012:	f240 439d 	movw	r3, #1181	; 0x49d
 8006016:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 8006018:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800601c:	2b00      	cmp	r3, #0
 800601e:	da10      	bge.n	8006042 <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8006020:	78fb      	ldrb	r3, [r7, #3]
 8006022:	015a      	lsls	r2, r3, #5
 8006024:	693b      	ldr	r3, [r7, #16]
 8006026:	4413      	add	r3, r2
 8006028:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800602c:	68db      	ldr	r3, [r3, #12]
 800602e:	78fa      	ldrb	r2, [r7, #3]
 8006030:	0151      	lsls	r1, r2, #5
 8006032:	693a      	ldr	r2, [r7, #16]
 8006034:	440a      	add	r2, r1
 8006036:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800603a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800603e:	60d3      	str	r3, [r2, #12]
        {
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
      }
      break;
 8006040:	e057      	b.n	80060f2 <USB_HC_Init+0x142>
        if ((USBx->CID & (0x1U << 8)) != 0U)
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006046:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800604a:	2b00      	cmp	r3, #0
 800604c:	d051      	beq.n	80060f2 <USB_HC_Init+0x142>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
 800604e:	78fb      	ldrb	r3, [r7, #3]
 8006050:	015a      	lsls	r2, r3, #5
 8006052:	693b      	ldr	r3, [r7, #16]
 8006054:	4413      	add	r3, r2
 8006056:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800605a:	68db      	ldr	r3, [r3, #12]
 800605c:	78fa      	ldrb	r2, [r7, #3]
 800605e:	0151      	lsls	r1, r2, #5
 8006060:	693a      	ldr	r2, [r7, #16]
 8006062:	440a      	add	r2, r1
 8006064:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006068:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800606c:	60d3      	str	r3, [r2, #12]
      break;
 800606e:	e040      	b.n	80060f2 <USB_HC_Init+0x142>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8006070:	78fb      	ldrb	r3, [r7, #3]
 8006072:	015a      	lsls	r2, r3, #5
 8006074:	693b      	ldr	r3, [r7, #16]
 8006076:	4413      	add	r3, r2
 8006078:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800607c:	461a      	mov	r2, r3
 800607e:	f240 639d 	movw	r3, #1693	; 0x69d
 8006082:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8006084:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8006088:	2b00      	cmp	r3, #0
 800608a:	da34      	bge.n	80060f6 <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 800608c:	78fb      	ldrb	r3, [r7, #3]
 800608e:	015a      	lsls	r2, r3, #5
 8006090:	693b      	ldr	r3, [r7, #16]
 8006092:	4413      	add	r3, r2
 8006094:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006098:	68db      	ldr	r3, [r3, #12]
 800609a:	78fa      	ldrb	r2, [r7, #3]
 800609c:	0151      	lsls	r1, r2, #5
 800609e:	693a      	ldr	r2, [r7, #16]
 80060a0:	440a      	add	r2, r1
 80060a2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80060a6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80060aa:	60d3      	str	r3, [r2, #12]
      }

      break;
 80060ac:	e023      	b.n	80060f6 <USB_HC_Init+0x146>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 80060ae:	78fb      	ldrb	r3, [r7, #3]
 80060b0:	015a      	lsls	r2, r3, #5
 80060b2:	693b      	ldr	r3, [r7, #16]
 80060b4:	4413      	add	r3, r2
 80060b6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80060ba:	461a      	mov	r2, r3
 80060bc:	f240 2325 	movw	r3, #549	; 0x225
 80060c0:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 80060c2:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80060c6:	2b00      	cmp	r3, #0
 80060c8:	da17      	bge.n	80060fa <USB_HC_Init+0x14a>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 80060ca:	78fb      	ldrb	r3, [r7, #3]
 80060cc:	015a      	lsls	r2, r3, #5
 80060ce:	693b      	ldr	r3, [r7, #16]
 80060d0:	4413      	add	r3, r2
 80060d2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80060d6:	68db      	ldr	r3, [r3, #12]
 80060d8:	78fa      	ldrb	r2, [r7, #3]
 80060da:	0151      	lsls	r1, r2, #5
 80060dc:	693a      	ldr	r2, [r7, #16]
 80060de:	440a      	add	r2, r1
 80060e0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80060e4:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 80060e8:	60d3      	str	r3, [r2, #12]
      }
      break;
 80060ea:	e006      	b.n	80060fa <USB_HC_Init+0x14a>

    default:
      ret = HAL_ERROR;
 80060ec:	2301      	movs	r3, #1
 80060ee:	77fb      	strb	r3, [r7, #31]
      break;
 80060f0:	e004      	b.n	80060fc <USB_HC_Init+0x14c>
      break;
 80060f2:	bf00      	nop
 80060f4:	e002      	b.n	80060fc <USB_HC_Init+0x14c>
      break;
 80060f6:	bf00      	nop
 80060f8:	e000      	b.n	80060fc <USB_HC_Init+0x14c>
      break;
 80060fa:	bf00      	nop
  }

  /* Enable host channel Halt interrupt */
  USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_CHHM;
 80060fc:	78fb      	ldrb	r3, [r7, #3]
 80060fe:	015a      	lsls	r2, r3, #5
 8006100:	693b      	ldr	r3, [r7, #16]
 8006102:	4413      	add	r3, r2
 8006104:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006108:	68db      	ldr	r3, [r3, #12]
 800610a:	78fa      	ldrb	r2, [r7, #3]
 800610c:	0151      	lsls	r1, r2, #5
 800610e:	693a      	ldr	r2, [r7, #16]
 8006110:	440a      	add	r2, r1
 8006112:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006116:	f043 0302 	orr.w	r3, r3, #2
 800611a:	60d3      	str	r3, [r2, #12]

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 800611c:	693b      	ldr	r3, [r7, #16]
 800611e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006122:	699a      	ldr	r2, [r3, #24]
 8006124:	78fb      	ldrb	r3, [r7, #3]
 8006126:	f003 030f 	and.w	r3, r3, #15
 800612a:	2101      	movs	r1, #1
 800612c:	fa01 f303 	lsl.w	r3, r1, r3
 8006130:	6939      	ldr	r1, [r7, #16]
 8006132:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8006136:	4313      	orrs	r3, r2
 8006138:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	699b      	ldr	r3, [r3, #24]
 800613e:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 8006146:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800614a:	2b00      	cmp	r3, #0
 800614c:	da03      	bge.n	8006156 <USB_HC_Init+0x1a6>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 800614e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006152:	61bb      	str	r3, [r7, #24]
 8006154:	e001      	b.n	800615a <USB_HC_Init+0x1aa>
  }
  else
  {
    HCcharEpDir = 0U;
 8006156:	2300      	movs	r3, #0
 8006158:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 800615a:	6878      	ldr	r0, [r7, #4]
 800615c:	f7ff feff 	bl	8005f5e <USB_GetHostSpeed>
 8006160:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 8006162:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8006166:	2b02      	cmp	r3, #2
 8006168:	d106      	bne.n	8006178 <USB_HC_Init+0x1c8>
 800616a:	68fb      	ldr	r3, [r7, #12]
 800616c:	2b02      	cmp	r3, #2
 800616e:	d003      	beq.n	8006178 <USB_HC_Init+0x1c8>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 8006170:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8006174:	617b      	str	r3, [r7, #20]
 8006176:	e001      	b.n	800617c <USB_HC_Init+0x1cc>
  }
  else
  {
    HCcharLowSpeed = 0U;
 8006178:	2300      	movs	r3, #0
 800617a:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800617c:	787b      	ldrb	r3, [r7, #1]
 800617e:	059b      	lsls	r3, r3, #22
 8006180:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8006184:	78bb      	ldrb	r3, [r7, #2]
 8006186:	02db      	lsls	r3, r3, #11
 8006188:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800618c:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 800618e:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8006192:	049b      	lsls	r3, r3, #18
 8006194:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8006198:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 800619a:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 800619c:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 80061a0:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 80061a2:	69bb      	ldr	r3, [r7, #24]
 80061a4:	431a      	orrs	r2, r3
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80061a6:	78fb      	ldrb	r3, [r7, #3]
 80061a8:	0159      	lsls	r1, r3, #5
 80061aa:	693b      	ldr	r3, [r7, #16]
 80061ac:	440b      	add	r3, r1
 80061ae:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80061b2:	4619      	mov	r1, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 80061b4:	697b      	ldr	r3, [r7, #20]
 80061b6:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80061b8:	600b      	str	r3, [r1, #0]

  if ((ep_type == EP_TYPE_INTR) || (ep_type == EP_TYPE_ISOC))
 80061ba:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80061be:	2b03      	cmp	r3, #3
 80061c0:	d003      	beq.n	80061ca <USB_HC_Init+0x21a>
 80061c2:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80061c6:	2b01      	cmp	r3, #1
 80061c8:	d10f      	bne.n	80061ea <USB_HC_Init+0x23a>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 80061ca:	78fb      	ldrb	r3, [r7, #3]
 80061cc:	015a      	lsls	r2, r3, #5
 80061ce:	693b      	ldr	r3, [r7, #16]
 80061d0:	4413      	add	r3, r2
 80061d2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80061d6:	681b      	ldr	r3, [r3, #0]
 80061d8:	78fa      	ldrb	r2, [r7, #3]
 80061da:	0151      	lsls	r1, r2, #5
 80061dc:	693a      	ldr	r2, [r7, #16]
 80061de:	440a      	add	r2, r1
 80061e0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80061e4:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80061e8:	6013      	str	r3, [r2, #0]
  }

  return ret;
 80061ea:	7ffb      	ldrb	r3, [r7, #31]
}
 80061ec:	4618      	mov	r0, r3
 80061ee:	3720      	adds	r7, #32
 80061f0:	46bd      	mov	sp, r7
 80061f2:	bd80      	pop	{r7, pc}

080061f4 <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 80061f4:	b580      	push	{r7, lr}
 80061f6:	b08c      	sub	sp, #48	; 0x30
 80061f8:	af02      	add	r7, sp, #8
 80061fa:	60f8      	str	r0, [r7, #12]
 80061fc:	60b9      	str	r1, [r7, #8]
 80061fe:	4613      	mov	r3, r2
 8006200:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006202:	68fb      	ldr	r3, [r7, #12]
 8006204:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 8006206:	68bb      	ldr	r3, [r7, #8]
 8006208:	785b      	ldrb	r3, [r3, #1]
 800620a:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = 256U;
 800620c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006210:	837b      	strh	r3, [r7, #26]

  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USBH_HS_SPEED))
 8006212:	68fb      	ldr	r3, [r7, #12]
 8006214:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006216:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800621a:	2b00      	cmp	r3, #0
 800621c:	d02d      	beq.n	800627a <USB_HC_StartXfer+0x86>
 800621e:	68bb      	ldr	r3, [r7, #8]
 8006220:	791b      	ldrb	r3, [r3, #4]
 8006222:	2b00      	cmp	r3, #0
 8006224:	d129      	bne.n	800627a <USB_HC_StartXfer+0x86>
  {
    /* in DMA mode host Core automatically issues ping  in case of NYET/NAK */
    if ((dma == 1U) && ((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)))
 8006226:	79fb      	ldrb	r3, [r7, #7]
 8006228:	2b01      	cmp	r3, #1
 800622a:	d117      	bne.n	800625c <USB_HC_StartXfer+0x68>
 800622c:	68bb      	ldr	r3, [r7, #8]
 800622e:	79db      	ldrb	r3, [r3, #7]
 8006230:	2b00      	cmp	r3, #0
 8006232:	d003      	beq.n	800623c <USB_HC_StartXfer+0x48>
 8006234:	68bb      	ldr	r3, [r7, #8]
 8006236:	79db      	ldrb	r3, [r3, #7]
 8006238:	2b02      	cmp	r3, #2
 800623a:	d10f      	bne.n	800625c <USB_HC_StartXfer+0x68>
    {
      USBx_HC((uint32_t)ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET |
 800623c:	69fb      	ldr	r3, [r7, #28]
 800623e:	015a      	lsls	r2, r3, #5
 8006240:	6a3b      	ldr	r3, [r7, #32]
 8006242:	4413      	add	r3, r2
 8006244:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006248:	68db      	ldr	r3, [r3, #12]
 800624a:	69fa      	ldr	r2, [r7, #28]
 800624c:	0151      	lsls	r1, r2, #5
 800624e:	6a3a      	ldr	r2, [r7, #32]
 8006250:	440a      	add	r2, r1
 8006252:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006256:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800625a:	60d3      	str	r3, [r2, #12]
                                               USB_OTG_HCINTMSK_ACKM |
                                               USB_OTG_HCINTMSK_NAKM);
    }

    if ((dma == 0U) && (hc->do_ping == 1U))
 800625c:	79fb      	ldrb	r3, [r7, #7]
 800625e:	2b00      	cmp	r3, #0
 8006260:	d10b      	bne.n	800627a <USB_HC_StartXfer+0x86>
 8006262:	68bb      	ldr	r3, [r7, #8]
 8006264:	795b      	ldrb	r3, [r3, #5]
 8006266:	2b01      	cmp	r3, #1
 8006268:	d107      	bne.n	800627a <USB_HC_StartXfer+0x86>
    {
      (void)USB_DoPing(USBx, hc->ch_num);
 800626a:	68bb      	ldr	r3, [r7, #8]
 800626c:	785b      	ldrb	r3, [r3, #1]
 800626e:	4619      	mov	r1, r3
 8006270:	68f8      	ldr	r0, [r7, #12]
 8006272:	f000 fa0f 	bl	8006694 <USB_DoPing>
      return HAL_OK;
 8006276:	2300      	movs	r3, #0
 8006278:	e0f8      	b.n	800646c <USB_HC_StartXfer+0x278>
    }

  }

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 800627a:	68bb      	ldr	r3, [r7, #8]
 800627c:	695b      	ldr	r3, [r3, #20]
 800627e:	2b00      	cmp	r3, #0
 8006280:	d018      	beq.n	80062b4 <USB_HC_StartXfer+0xc0>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 8006282:	68bb      	ldr	r3, [r7, #8]
 8006284:	695b      	ldr	r3, [r3, #20]
 8006286:	68ba      	ldr	r2, [r7, #8]
 8006288:	8912      	ldrh	r2, [r2, #8]
 800628a:	4413      	add	r3, r2
 800628c:	3b01      	subs	r3, #1
 800628e:	68ba      	ldr	r2, [r7, #8]
 8006290:	8912      	ldrh	r2, [r2, #8]
 8006292:	fbb3 f3f2 	udiv	r3, r3, r2
 8006296:	84fb      	strh	r3, [r7, #38]	; 0x26

    if (num_packets > max_hc_pkt_count)
 8006298:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800629a:	8b7b      	ldrh	r3, [r7, #26]
 800629c:	429a      	cmp	r2, r3
 800629e:	d90b      	bls.n	80062b8 <USB_HC_StartXfer+0xc4>
    {
      num_packets = max_hc_pkt_count;
 80062a0:	8b7b      	ldrh	r3, [r7, #26]
 80062a2:	84fb      	strh	r3, [r7, #38]	; 0x26
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 80062a4:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80062a6:	68ba      	ldr	r2, [r7, #8]
 80062a8:	8912      	ldrh	r2, [r2, #8]
 80062aa:	fb03 f202 	mul.w	r2, r3, r2
 80062ae:	68bb      	ldr	r3, [r7, #8]
 80062b0:	611a      	str	r2, [r3, #16]
 80062b2:	e001      	b.n	80062b8 <USB_HC_StartXfer+0xc4>
    }
  }
  else
  {
    num_packets = 1U;
 80062b4:	2301      	movs	r3, #1
 80062b6:	84fb      	strh	r3, [r7, #38]	; 0x26

  /*
   * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
   * max_packet size.
   */
  if (hc->ep_is_in != 0U)
 80062b8:	68bb      	ldr	r3, [r7, #8]
 80062ba:	78db      	ldrb	r3, [r3, #3]
 80062bc:	2b00      	cmp	r3, #0
 80062be:	d007      	beq.n	80062d0 <USB_HC_StartXfer+0xdc>
  {
    hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 80062c0:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80062c2:	68ba      	ldr	r2, [r7, #8]
 80062c4:	8912      	ldrh	r2, [r2, #8]
 80062c6:	fb03 f202 	mul.w	r2, r3, r2
 80062ca:	68bb      	ldr	r3, [r7, #8]
 80062cc:	611a      	str	r2, [r3, #16]
 80062ce:	e003      	b.n	80062d8 <USB_HC_StartXfer+0xe4>
  }
  else
  {
    hc->XferSize = hc->xfer_len;
 80062d0:	68bb      	ldr	r3, [r7, #8]
 80062d2:	695a      	ldr	r2, [r3, #20]
 80062d4:	68bb      	ldr	r3, [r7, #8]
 80062d6:	611a      	str	r2, [r3, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 80062d8:	68bb      	ldr	r3, [r7, #8]
 80062da:	691b      	ldr	r3, [r3, #16]
 80062dc:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 80062e0:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80062e2:	04d9      	lsls	r1, r3, #19
 80062e4:	4b63      	ldr	r3, [pc, #396]	; (8006474 <USB_HC_StartXfer+0x280>)
 80062e6:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 80062e8:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 80062ea:	68bb      	ldr	r3, [r7, #8]
 80062ec:	7a9b      	ldrb	r3, [r3, #10]
 80062ee:	075b      	lsls	r3, r3, #29
 80062f0:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 80062f4:	69f9      	ldr	r1, [r7, #28]
 80062f6:	0148      	lsls	r0, r1, #5
 80062f8:	6a39      	ldr	r1, [r7, #32]
 80062fa:	4401      	add	r1, r0
 80062fc:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8006300:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8006302:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 8006304:	79fb      	ldrb	r3, [r7, #7]
 8006306:	2b00      	cmp	r3, #0
 8006308:	d009      	beq.n	800631e <USB_HC_StartXfer+0x12a>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 800630a:	68bb      	ldr	r3, [r7, #8]
 800630c:	68d9      	ldr	r1, [r3, #12]
 800630e:	69fb      	ldr	r3, [r7, #28]
 8006310:	015a      	lsls	r2, r3, #5
 8006312:	6a3b      	ldr	r3, [r7, #32]
 8006314:	4413      	add	r3, r2
 8006316:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800631a:	460a      	mov	r2, r1
 800631c:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 800631e:	6a3b      	ldr	r3, [r7, #32]
 8006320:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006324:	689b      	ldr	r3, [r3, #8]
 8006326:	f003 0301 	and.w	r3, r3, #1
 800632a:	2b00      	cmp	r3, #0
 800632c:	bf0c      	ite	eq
 800632e:	2301      	moveq	r3, #1
 8006330:	2300      	movne	r3, #0
 8006332:	b2db      	uxtb	r3, r3
 8006334:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 8006336:	69fb      	ldr	r3, [r7, #28]
 8006338:	015a      	lsls	r2, r3, #5
 800633a:	6a3b      	ldr	r3, [r7, #32]
 800633c:	4413      	add	r3, r2
 800633e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006342:	681b      	ldr	r3, [r3, #0]
 8006344:	69fa      	ldr	r2, [r7, #28]
 8006346:	0151      	lsls	r1, r2, #5
 8006348:	6a3a      	ldr	r2, [r7, #32]
 800634a:	440a      	add	r2, r1
 800634c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006350:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8006354:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 8006356:	69fb      	ldr	r3, [r7, #28]
 8006358:	015a      	lsls	r2, r3, #5
 800635a:	6a3b      	ldr	r3, [r7, #32]
 800635c:	4413      	add	r3, r2
 800635e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006362:	681a      	ldr	r2, [r3, #0]
 8006364:	7e7b      	ldrb	r3, [r7, #25]
 8006366:	075b      	lsls	r3, r3, #29
 8006368:	69f9      	ldr	r1, [r7, #28]
 800636a:	0148      	lsls	r0, r1, #5
 800636c:	6a39      	ldr	r1, [r7, #32]
 800636e:	4401      	add	r1, r0
 8006370:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 8006374:	4313      	orrs	r3, r2
 8006376:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 8006378:	69fb      	ldr	r3, [r7, #28]
 800637a:	015a      	lsls	r2, r3, #5
 800637c:	6a3b      	ldr	r3, [r7, #32]
 800637e:	4413      	add	r3, r2
 8006380:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006384:	681b      	ldr	r3, [r3, #0]
 8006386:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8006388:	693b      	ldr	r3, [r7, #16]
 800638a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800638e:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 8006390:	68bb      	ldr	r3, [r7, #8]
 8006392:	78db      	ldrb	r3, [r3, #3]
 8006394:	2b00      	cmp	r3, #0
 8006396:	d004      	beq.n	80063a2 <USB_HC_StartXfer+0x1ae>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 8006398:	693b      	ldr	r3, [r7, #16]
 800639a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800639e:	613b      	str	r3, [r7, #16]
 80063a0:	e003      	b.n	80063aa <USB_HC_StartXfer+0x1b6>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 80063a2:	693b      	ldr	r3, [r7, #16]
 80063a4:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80063a8:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 80063aa:	693b      	ldr	r3, [r7, #16]
 80063ac:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80063b0:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 80063b2:	69fb      	ldr	r3, [r7, #28]
 80063b4:	015a      	lsls	r2, r3, #5
 80063b6:	6a3b      	ldr	r3, [r7, #32]
 80063b8:	4413      	add	r3, r2
 80063ba:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80063be:	461a      	mov	r2, r3
 80063c0:	693b      	ldr	r3, [r7, #16]
 80063c2:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 80063c4:	79fb      	ldrb	r3, [r7, #7]
 80063c6:	2b00      	cmp	r3, #0
 80063c8:	d001      	beq.n	80063ce <USB_HC_StartXfer+0x1da>
  {
    return HAL_OK;
 80063ca:	2300      	movs	r3, #0
 80063cc:	e04e      	b.n	800646c <USB_HC_StartXfer+0x278>
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 80063ce:	68bb      	ldr	r3, [r7, #8]
 80063d0:	78db      	ldrb	r3, [r3, #3]
 80063d2:	2b00      	cmp	r3, #0
 80063d4:	d149      	bne.n	800646a <USB_HC_StartXfer+0x276>
 80063d6:	68bb      	ldr	r3, [r7, #8]
 80063d8:	695b      	ldr	r3, [r3, #20]
 80063da:	2b00      	cmp	r3, #0
 80063dc:	d045      	beq.n	800646a <USB_HC_StartXfer+0x276>
  {
    switch (hc->ep_type)
 80063de:	68bb      	ldr	r3, [r7, #8]
 80063e0:	79db      	ldrb	r3, [r3, #7]
 80063e2:	2b03      	cmp	r3, #3
 80063e4:	d830      	bhi.n	8006448 <USB_HC_StartXfer+0x254>
 80063e6:	a201      	add	r2, pc, #4	; (adr r2, 80063ec <USB_HC_StartXfer+0x1f8>)
 80063e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80063ec:	080063fd 	.word	0x080063fd
 80063f0:	08006421 	.word	0x08006421
 80063f4:	080063fd 	.word	0x080063fd
 80063f8:	08006421 	.word	0x08006421
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 80063fc:	68bb      	ldr	r3, [r7, #8]
 80063fe:	695b      	ldr	r3, [r3, #20]
 8006400:	3303      	adds	r3, #3
 8006402:	089b      	lsrs	r3, r3, #2
 8006404:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 8006406:	8afa      	ldrh	r2, [r7, #22]
 8006408:	68fb      	ldr	r3, [r7, #12]
 800640a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800640c:	b29b      	uxth	r3, r3
 800640e:	429a      	cmp	r2, r3
 8006410:	d91c      	bls.n	800644c <USB_HC_StartXfer+0x258>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 8006412:	68fb      	ldr	r3, [r7, #12]
 8006414:	699b      	ldr	r3, [r3, #24]
 8006416:	f043 0220 	orr.w	r2, r3, #32
 800641a:	68fb      	ldr	r3, [r7, #12]
 800641c:	619a      	str	r2, [r3, #24]
        }
        break;
 800641e:	e015      	b.n	800644c <USB_HC_StartXfer+0x258>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8006420:	68bb      	ldr	r3, [r7, #8]
 8006422:	695b      	ldr	r3, [r3, #20]
 8006424:	3303      	adds	r3, #3
 8006426:	089b      	lsrs	r3, r3, #2
 8006428:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 800642a:	8afa      	ldrh	r2, [r7, #22]
 800642c:	6a3b      	ldr	r3, [r7, #32]
 800642e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006432:	691b      	ldr	r3, [r3, #16]
 8006434:	b29b      	uxth	r3, r3
 8006436:	429a      	cmp	r2, r3
 8006438:	d90a      	bls.n	8006450 <USB_HC_StartXfer+0x25c>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 800643a:	68fb      	ldr	r3, [r7, #12]
 800643c:	699b      	ldr	r3, [r3, #24]
 800643e:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 8006442:	68fb      	ldr	r3, [r7, #12]
 8006444:	619a      	str	r2, [r3, #24]
        }
        break;
 8006446:	e003      	b.n	8006450 <USB_HC_StartXfer+0x25c>

      default:
        break;
 8006448:	bf00      	nop
 800644a:	e002      	b.n	8006452 <USB_HC_StartXfer+0x25e>
        break;
 800644c:	bf00      	nop
 800644e:	e000      	b.n	8006452 <USB_HC_StartXfer+0x25e>
        break;
 8006450:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 8006452:	68bb      	ldr	r3, [r7, #8]
 8006454:	68d9      	ldr	r1, [r3, #12]
 8006456:	68bb      	ldr	r3, [r7, #8]
 8006458:	785a      	ldrb	r2, [r3, #1]
 800645a:	68bb      	ldr	r3, [r7, #8]
 800645c:	695b      	ldr	r3, [r3, #20]
 800645e:	b29b      	uxth	r3, r3
 8006460:	2000      	movs	r0, #0
 8006462:	9000      	str	r0, [sp, #0]
 8006464:	68f8      	ldr	r0, [r7, #12]
 8006466:	f7ff fb31 	bl	8005acc <USB_WritePacket>
  }

  return HAL_OK;
 800646a:	2300      	movs	r3, #0
}
 800646c:	4618      	mov	r0, r3
 800646e:	3728      	adds	r7, #40	; 0x28
 8006470:	46bd      	mov	sp, r7
 8006472:	bd80      	pop	{r7, pc}
 8006474:	1ff80000 	.word	0x1ff80000

08006478 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8006478:	b480      	push	{r7}
 800647a:	b085      	sub	sp, #20
 800647c:	af00      	add	r7, sp, #0
 800647e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 8006484:	68fb      	ldr	r3, [r7, #12]
 8006486:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800648a:	695b      	ldr	r3, [r3, #20]
 800648c:	b29b      	uxth	r3, r3
}
 800648e:	4618      	mov	r0, r3
 8006490:	3714      	adds	r7, #20
 8006492:	46bd      	mov	sp, r7
 8006494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006498:	4770      	bx	lr

0800649a <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 800649a:	b480      	push	{r7}
 800649c:	b089      	sub	sp, #36	; 0x24
 800649e:	af00      	add	r7, sp, #0
 80064a0:	6078      	str	r0, [r7, #4]
 80064a2:	460b      	mov	r3, r1
 80064a4:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	61fb      	str	r3, [r7, #28]
  uint32_t hcnum = (uint32_t)hc_num;
 80064aa:	78fb      	ldrb	r3, [r7, #3]
 80064ac:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
 80064ae:	2300      	movs	r3, #0
 80064b0:	60fb      	str	r3, [r7, #12]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 80064b2:	69bb      	ldr	r3, [r7, #24]
 80064b4:	015a      	lsls	r2, r3, #5
 80064b6:	69fb      	ldr	r3, [r7, #28]
 80064b8:	4413      	add	r3, r2
 80064ba:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80064be:	681b      	ldr	r3, [r3, #0]
 80064c0:	0c9b      	lsrs	r3, r3, #18
 80064c2:	f003 0303 	and.w	r3, r3, #3
 80064c6:	617b      	str	r3, [r7, #20]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 80064c8:	69bb      	ldr	r3, [r7, #24]
 80064ca:	015a      	lsls	r2, r3, #5
 80064cc:	69fb      	ldr	r3, [r7, #28]
 80064ce:	4413      	add	r3, r2
 80064d0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80064d4:	681b      	ldr	r3, [r3, #0]
 80064d6:	0fdb      	lsrs	r3, r3, #31
 80064d8:	f003 0301 	and.w	r3, r3, #1
 80064dc:	613b      	str	r3, [r7, #16]

  if (((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) &&
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	689b      	ldr	r3, [r3, #8]
 80064e2:	f003 0320 	and.w	r3, r3, #32
 80064e6:	2b20      	cmp	r3, #32
 80064e8:	d104      	bne.n	80064f4 <USB_HC_Halt+0x5a>
 80064ea:	693b      	ldr	r3, [r7, #16]
 80064ec:	2b00      	cmp	r3, #0
 80064ee:	d101      	bne.n	80064f4 <USB_HC_Halt+0x5a>
      (ChannelEna == 0U))
  {
    return HAL_OK;
 80064f0:	2300      	movs	r3, #0
 80064f2:	e0c8      	b.n	8006686 <USB_HC_Halt+0x1ec>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 80064f4:	697b      	ldr	r3, [r7, #20]
 80064f6:	2b00      	cmp	r3, #0
 80064f8:	d002      	beq.n	8006500 <USB_HC_Halt+0x66>
 80064fa:	697b      	ldr	r3, [r7, #20]
 80064fc:	2b02      	cmp	r3, #2
 80064fe:	d163      	bne.n	80065c8 <USB_HC_Halt+0x12e>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8006500:	69bb      	ldr	r3, [r7, #24]
 8006502:	015a      	lsls	r2, r3, #5
 8006504:	69fb      	ldr	r3, [r7, #28]
 8006506:	4413      	add	r3, r2
 8006508:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800650c:	681b      	ldr	r3, [r3, #0]
 800650e:	69ba      	ldr	r2, [r7, #24]
 8006510:	0151      	lsls	r1, r2, #5
 8006512:	69fa      	ldr	r2, [r7, #28]
 8006514:	440a      	add	r2, r1
 8006516:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800651a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800651e:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	689b      	ldr	r3, [r3, #8]
 8006524:	f003 0320 	and.w	r3, r3, #32
 8006528:	2b00      	cmp	r3, #0
 800652a:	f040 80ab 	bne.w	8006684 <USB_HC_Halt+0x1ea>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006532:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8006536:	2b00      	cmp	r3, #0
 8006538:	d133      	bne.n	80065a2 <USB_HC_Halt+0x108>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 800653a:	69bb      	ldr	r3, [r7, #24]
 800653c:	015a      	lsls	r2, r3, #5
 800653e:	69fb      	ldr	r3, [r7, #28]
 8006540:	4413      	add	r3, r2
 8006542:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006546:	681b      	ldr	r3, [r3, #0]
 8006548:	69ba      	ldr	r2, [r7, #24]
 800654a:	0151      	lsls	r1, r2, #5
 800654c:	69fa      	ldr	r2, [r7, #28]
 800654e:	440a      	add	r2, r1
 8006550:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006554:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006558:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800655a:	69bb      	ldr	r3, [r7, #24]
 800655c:	015a      	lsls	r2, r3, #5
 800655e:	69fb      	ldr	r3, [r7, #28]
 8006560:	4413      	add	r3, r2
 8006562:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006566:	681b      	ldr	r3, [r3, #0]
 8006568:	69ba      	ldr	r2, [r7, #24]
 800656a:	0151      	lsls	r1, r2, #5
 800656c:	69fa      	ldr	r2, [r7, #28]
 800656e:	440a      	add	r2, r1
 8006570:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006574:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006578:	6013      	str	r3, [r2, #0]
        do
        {
          count++;
 800657a:	68fb      	ldr	r3, [r7, #12]
 800657c:	3301      	adds	r3, #1
 800657e:	60fb      	str	r3, [r7, #12]

          if (count > 1000U)
 8006580:	68fb      	ldr	r3, [r7, #12]
 8006582:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006586:	d81d      	bhi.n	80065c4 <USB_HC_Halt+0x12a>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8006588:	69bb      	ldr	r3, [r7, #24]
 800658a:	015a      	lsls	r2, r3, #5
 800658c:	69fb      	ldr	r3, [r7, #28]
 800658e:	4413      	add	r3, r2
 8006590:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006594:	681b      	ldr	r3, [r3, #0]
 8006596:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800659a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800659e:	d0ec      	beq.n	800657a <USB_HC_Halt+0xe0>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80065a0:	e070      	b.n	8006684 <USB_HC_Halt+0x1ea>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80065a2:	69bb      	ldr	r3, [r7, #24]
 80065a4:	015a      	lsls	r2, r3, #5
 80065a6:	69fb      	ldr	r3, [r7, #28]
 80065a8:	4413      	add	r3, r2
 80065aa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80065ae:	681b      	ldr	r3, [r3, #0]
 80065b0:	69ba      	ldr	r2, [r7, #24]
 80065b2:	0151      	lsls	r1, r2, #5
 80065b4:	69fa      	ldr	r2, [r7, #28]
 80065b6:	440a      	add	r2, r1
 80065b8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80065bc:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80065c0:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80065c2:	e05f      	b.n	8006684 <USB_HC_Halt+0x1ea>
            break;
 80065c4:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80065c6:	e05d      	b.n	8006684 <USB_HC_Halt+0x1ea>
      }
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 80065c8:	69bb      	ldr	r3, [r7, #24]
 80065ca:	015a      	lsls	r2, r3, #5
 80065cc:	69fb      	ldr	r3, [r7, #28]
 80065ce:	4413      	add	r3, r2
 80065d0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80065d4:	681b      	ldr	r3, [r3, #0]
 80065d6:	69ba      	ldr	r2, [r7, #24]
 80065d8:	0151      	lsls	r1, r2, #5
 80065da:	69fa      	ldr	r2, [r7, #28]
 80065dc:	440a      	add	r2, r1
 80065de:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80065e2:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80065e6:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 80065e8:	69fb      	ldr	r3, [r7, #28]
 80065ea:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80065ee:	691b      	ldr	r3, [r3, #16]
 80065f0:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80065f4:	2b00      	cmp	r3, #0
 80065f6:	d133      	bne.n	8006660 <USB_HC_Halt+0x1c6>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 80065f8:	69bb      	ldr	r3, [r7, #24]
 80065fa:	015a      	lsls	r2, r3, #5
 80065fc:	69fb      	ldr	r3, [r7, #28]
 80065fe:	4413      	add	r3, r2
 8006600:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006604:	681b      	ldr	r3, [r3, #0]
 8006606:	69ba      	ldr	r2, [r7, #24]
 8006608:	0151      	lsls	r1, r2, #5
 800660a:	69fa      	ldr	r2, [r7, #28]
 800660c:	440a      	add	r2, r1
 800660e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006612:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006616:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8006618:	69bb      	ldr	r3, [r7, #24]
 800661a:	015a      	lsls	r2, r3, #5
 800661c:	69fb      	ldr	r3, [r7, #28]
 800661e:	4413      	add	r3, r2
 8006620:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006624:	681b      	ldr	r3, [r3, #0]
 8006626:	69ba      	ldr	r2, [r7, #24]
 8006628:	0151      	lsls	r1, r2, #5
 800662a:	69fa      	ldr	r2, [r7, #28]
 800662c:	440a      	add	r2, r1
 800662e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006632:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006636:	6013      	str	r3, [r2, #0]
      do
      {
        count++;
 8006638:	68fb      	ldr	r3, [r7, #12]
 800663a:	3301      	adds	r3, #1
 800663c:	60fb      	str	r3, [r7, #12]

        if (count > 1000U)
 800663e:	68fb      	ldr	r3, [r7, #12]
 8006640:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006644:	d81d      	bhi.n	8006682 <USB_HC_Halt+0x1e8>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8006646:	69bb      	ldr	r3, [r7, #24]
 8006648:	015a      	lsls	r2, r3, #5
 800664a:	69fb      	ldr	r3, [r7, #28]
 800664c:	4413      	add	r3, r2
 800664e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006652:	681b      	ldr	r3, [r3, #0]
 8006654:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006658:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800665c:	d0ec      	beq.n	8006638 <USB_HC_Halt+0x19e>
 800665e:	e011      	b.n	8006684 <USB_HC_Halt+0x1ea>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8006660:	69bb      	ldr	r3, [r7, #24]
 8006662:	015a      	lsls	r2, r3, #5
 8006664:	69fb      	ldr	r3, [r7, #28]
 8006666:	4413      	add	r3, r2
 8006668:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800666c:	681b      	ldr	r3, [r3, #0]
 800666e:	69ba      	ldr	r2, [r7, #24]
 8006670:	0151      	lsls	r1, r2, #5
 8006672:	69fa      	ldr	r2, [r7, #28]
 8006674:	440a      	add	r2, r1
 8006676:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800667a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800667e:	6013      	str	r3, [r2, #0]
 8006680:	e000      	b.n	8006684 <USB_HC_Halt+0x1ea>
          break;
 8006682:	bf00      	nop
    }
  }

  return HAL_OK;
 8006684:	2300      	movs	r3, #0
}
 8006686:	4618      	mov	r0, r3
 8006688:	3724      	adds	r7, #36	; 0x24
 800668a:	46bd      	mov	sp, r7
 800668c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006690:	4770      	bx	lr
	...

08006694 <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 8006694:	b480      	push	{r7}
 8006696:	b087      	sub	sp, #28
 8006698:	af00      	add	r7, sp, #0
 800669a:	6078      	str	r0, [r7, #4]
 800669c:	460b      	mov	r3, r1
 800669e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 80066a4:	78fb      	ldrb	r3, [r7, #3]
 80066a6:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 80066a8:	2301      	movs	r3, #1
 80066aa:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 80066ac:	68fb      	ldr	r3, [r7, #12]
 80066ae:	04da      	lsls	r2, r3, #19
 80066b0:	4b15      	ldr	r3, [pc, #84]	; (8006708 <USB_DoPing+0x74>)
 80066b2:	4013      	ands	r3, r2
 80066b4:	693a      	ldr	r2, [r7, #16]
 80066b6:	0151      	lsls	r1, r2, #5
 80066b8:	697a      	ldr	r2, [r7, #20]
 80066ba:	440a      	add	r2, r1
 80066bc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80066c0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80066c4:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 80066c6:	693b      	ldr	r3, [r7, #16]
 80066c8:	015a      	lsls	r2, r3, #5
 80066ca:	697b      	ldr	r3, [r7, #20]
 80066cc:	4413      	add	r3, r2
 80066ce:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80066d2:	681b      	ldr	r3, [r3, #0]
 80066d4:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80066d6:	68bb      	ldr	r3, [r7, #8]
 80066d8:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80066dc:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 80066de:	68bb      	ldr	r3, [r7, #8]
 80066e0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80066e4:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 80066e6:	693b      	ldr	r3, [r7, #16]
 80066e8:	015a      	lsls	r2, r3, #5
 80066ea:	697b      	ldr	r3, [r7, #20]
 80066ec:	4413      	add	r3, r2
 80066ee:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80066f2:	461a      	mov	r2, r3
 80066f4:	68bb      	ldr	r3, [r7, #8]
 80066f6:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 80066f8:	2300      	movs	r3, #0
}
 80066fa:	4618      	mov	r0, r3
 80066fc:	371c      	adds	r7, #28
 80066fe:	46bd      	mov	sp, r7
 8006700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006704:	4770      	bx	lr
 8006706:	bf00      	nop
 8006708:	1ff80000 	.word	0x1ff80000

0800670c <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 800670c:	b580      	push	{r7, lr}
 800670e:	b088      	sub	sp, #32
 8006710:	af00      	add	r7, sp, #0
 8006712:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 8006714:	2300      	movs	r3, #0
 8006716:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	617b      	str	r3, [r7, #20]
  __IO uint32_t count = 0U;
 800671c:	2300      	movs	r3, #0
 800671e:	60fb      	str	r3, [r7, #12]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 8006720:	6878      	ldr	r0, [r7, #4]
 8006722:	f7ff f911 	bl	8005948 <USB_DisableGlobalInt>

  /* Flush USB FIFO */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8006726:	2110      	movs	r1, #16
 8006728:	6878      	ldr	r0, [r7, #4]
 800672a:	f7ff f96b 	bl	8005a04 <USB_FlushTxFifo>
 800672e:	4603      	mov	r3, r0
 8006730:	2b00      	cmp	r3, #0
 8006732:	d001      	beq.n	8006738 <USB_StopHost+0x2c>
  {
    ret = HAL_ERROR;
 8006734:	2301      	movs	r3, #1
 8006736:	77fb      	strb	r3, [r7, #31]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8006738:	6878      	ldr	r0, [r7, #4]
 800673a:	f7ff f997 	bl	8005a6c <USB_FlushRxFifo>
 800673e:	4603      	mov	r3, r0
 8006740:	2b00      	cmp	r3, #0
 8006742:	d001      	beq.n	8006748 <USB_StopHost+0x3c>
  {
    ret = HAL_ERROR;
 8006744:	2301      	movs	r3, #1
 8006746:	77fb      	strb	r3, [r7, #31]
  }

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 8006748:	2300      	movs	r3, #0
 800674a:	61bb      	str	r3, [r7, #24]
 800674c:	e01f      	b.n	800678e <USB_StopHost+0x82>
  {
    value = USBx_HC(i)->HCCHAR;
 800674e:	69bb      	ldr	r3, [r7, #24]
 8006750:	015a      	lsls	r2, r3, #5
 8006752:	697b      	ldr	r3, [r7, #20]
 8006754:	4413      	add	r3, r2
 8006756:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800675a:	681b      	ldr	r3, [r3, #0]
 800675c:	613b      	str	r3, [r7, #16]
    value |=  USB_OTG_HCCHAR_CHDIS;
 800675e:	693b      	ldr	r3, [r7, #16]
 8006760:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006764:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_CHENA;
 8006766:	693b      	ldr	r3, [r7, #16]
 8006768:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800676c:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800676e:	693b      	ldr	r3, [r7, #16]
 8006770:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006774:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 8006776:	69bb      	ldr	r3, [r7, #24]
 8006778:	015a      	lsls	r2, r3, #5
 800677a:	697b      	ldr	r3, [r7, #20]
 800677c:	4413      	add	r3, r2
 800677e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006782:	461a      	mov	r2, r3
 8006784:	693b      	ldr	r3, [r7, #16]
 8006786:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 8006788:	69bb      	ldr	r3, [r7, #24]
 800678a:	3301      	adds	r3, #1
 800678c:	61bb      	str	r3, [r7, #24]
 800678e:	69bb      	ldr	r3, [r7, #24]
 8006790:	2b0f      	cmp	r3, #15
 8006792:	d9dc      	bls.n	800674e <USB_StopHost+0x42>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 8006794:	2300      	movs	r3, #0
 8006796:	61bb      	str	r3, [r7, #24]
 8006798:	e034      	b.n	8006804 <USB_StopHost+0xf8>
  {
    value = USBx_HC(i)->HCCHAR;
 800679a:	69bb      	ldr	r3, [r7, #24]
 800679c:	015a      	lsls	r2, r3, #5
 800679e:	697b      	ldr	r3, [r7, #20]
 80067a0:	4413      	add	r3, r2
 80067a2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80067a6:	681b      	ldr	r3, [r3, #0]
 80067a8:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHDIS;
 80067aa:	693b      	ldr	r3, [r7, #16]
 80067ac:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80067b0:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHENA;
 80067b2:	693b      	ldr	r3, [r7, #16]
 80067b4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80067b8:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 80067ba:	693b      	ldr	r3, [r7, #16]
 80067bc:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80067c0:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 80067c2:	69bb      	ldr	r3, [r7, #24]
 80067c4:	015a      	lsls	r2, r3, #5
 80067c6:	697b      	ldr	r3, [r7, #20]
 80067c8:	4413      	add	r3, r2
 80067ca:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80067ce:	461a      	mov	r2, r3
 80067d0:	693b      	ldr	r3, [r7, #16]
 80067d2:	6013      	str	r3, [r2, #0]

    do
    {
      count++;
 80067d4:	68fb      	ldr	r3, [r7, #12]
 80067d6:	3301      	adds	r3, #1
 80067d8:	60fb      	str	r3, [r7, #12]

      if (count > 1000U)
 80067da:	68fb      	ldr	r3, [r7, #12]
 80067dc:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80067e0:	d80c      	bhi.n	80067fc <USB_StopHost+0xf0>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 80067e2:	69bb      	ldr	r3, [r7, #24]
 80067e4:	015a      	lsls	r2, r3, #5
 80067e6:	697b      	ldr	r3, [r7, #20]
 80067e8:	4413      	add	r3, r2
 80067ea:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80067ee:	681b      	ldr	r3, [r3, #0]
 80067f0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80067f4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80067f8:	d0ec      	beq.n	80067d4 <USB_StopHost+0xc8>
 80067fa:	e000      	b.n	80067fe <USB_StopHost+0xf2>
        break;
 80067fc:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 80067fe:	69bb      	ldr	r3, [r7, #24]
 8006800:	3301      	adds	r3, #1
 8006802:	61bb      	str	r3, [r7, #24]
 8006804:	69bb      	ldr	r3, [r7, #24]
 8006806:	2b0f      	cmp	r3, #15
 8006808:	d9c7      	bls.n	800679a <USB_StopHost+0x8e>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 800680a:	697b      	ldr	r3, [r7, #20]
 800680c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006810:	461a      	mov	r2, r3
 8006812:	f04f 33ff 	mov.w	r3, #4294967295
 8006816:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	f04f 32ff 	mov.w	r2, #4294967295
 800681e:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 8006820:	6878      	ldr	r0, [r7, #4]
 8006822:	f7ff f880 	bl	8005926 <USB_EnableGlobalInt>

  return ret;
 8006826:	7ffb      	ldrb	r3, [r7, #31]
}
 8006828:	4618      	mov	r0, r3
 800682a:	3720      	adds	r7, #32
 800682c:	46bd      	mov	sp, r7
 800682e:	bd80      	pop	{r7, pc}

08006830 <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 8006830:	b590      	push	{r4, r7, lr}
 8006832:	b089      	sub	sp, #36	; 0x24
 8006834:	af04      	add	r7, sp, #16
 8006836:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status;
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost, COMMUNICATION_INTERFACE_CLASS_CODE,
 8006838:	2301      	movs	r3, #1
 800683a:	2202      	movs	r2, #2
 800683c:	2102      	movs	r1, #2
 800683e:	6878      	ldr	r0, [r7, #4]
 8006840:	f000 fc66 	bl	8007110 <USBH_FindInterface>
 8006844:	4603      	mov	r3, r0
 8006846:	73fb      	strb	r3, [r7, #15]
                                   ABSTRACT_CONTROL_MODEL, COMMON_AT_COMMAND);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8006848:	7bfb      	ldrb	r3, [r7, #15]
 800684a:	2bff      	cmp	r3, #255	; 0xff
 800684c:	d002      	beq.n	8006854 <USBH_CDC_InterfaceInit+0x24>
 800684e:	7bfb      	ldrb	r3, [r7, #15]
 8006850:	2b01      	cmp	r3, #1
 8006852:	d901      	bls.n	8006858 <USBH_CDC_InterfaceInit+0x28>
  {
    USBH_DbgLog("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8006854:	2302      	movs	r3, #2
 8006856:	e13d      	b.n	8006ad4 <USBH_CDC_InterfaceInit+0x2a4>
  }

  status = USBH_SelectInterface(phost, interface);
 8006858:	7bfb      	ldrb	r3, [r7, #15]
 800685a:	4619      	mov	r1, r3
 800685c:	6878      	ldr	r0, [r7, #4]
 800685e:	f000 fc3b 	bl	80070d8 <USBH_SelectInterface>
 8006862:	4603      	mov	r3, r0
 8006864:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 8006866:	7bbb      	ldrb	r3, [r7, #14]
 8006868:	2b00      	cmp	r3, #0
 800686a:	d001      	beq.n	8006870 <USBH_CDC_InterfaceInit+0x40>
  {
    return USBH_FAIL;
 800686c:	2302      	movs	r3, #2
 800686e:	e131      	b.n	8006ad4 <USBH_CDC_InterfaceInit+0x2a4>
  }

  phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc(sizeof(CDC_HandleTypeDef));
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	f8d3 437c 	ldr.w	r4, [r3, #892]	; 0x37c
 8006876:	2050      	movs	r0, #80	; 0x50
 8006878:	f002 fafa 	bl	8008e70 <malloc>
 800687c:	4603      	mov	r3, r0
 800687e:	61e3      	str	r3, [r4, #28]
  CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006886:	69db      	ldr	r3, [r3, #28]
 8006888:	60bb      	str	r3, [r7, #8]

  if (CDC_Handle == NULL)
 800688a:	68bb      	ldr	r3, [r7, #8]
 800688c:	2b00      	cmp	r3, #0
 800688e:	d101      	bne.n	8006894 <USBH_CDC_InterfaceInit+0x64>
  {
    USBH_DbgLog("Cannot allocate memory for CDC Handle");
    return USBH_FAIL;
 8006890:	2302      	movs	r3, #2
 8006892:	e11f      	b.n	8006ad4 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /* Initialize cdc handler */
  (void)USBH_memset(CDC_Handle, 0, sizeof(CDC_HandleTypeDef));
 8006894:	2250      	movs	r2, #80	; 0x50
 8006896:	2100      	movs	r1, #0
 8006898:	68b8      	ldr	r0, [r7, #8]
 800689a:	f002 faf9 	bl	8008e90 <memset>

  /*Collect the notification endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 800689e:	7bfb      	ldrb	r3, [r7, #15]
 80068a0:	687a      	ldr	r2, [r7, #4]
 80068a2:	211a      	movs	r1, #26
 80068a4:	fb01 f303 	mul.w	r3, r1, r3
 80068a8:	4413      	add	r3, r2
 80068aa:	f203 334e 	addw	r3, r3, #846	; 0x34e
 80068ae:	781b      	ldrb	r3, [r3, #0]
 80068b0:	b25b      	sxtb	r3, r3
 80068b2:	2b00      	cmp	r3, #0
 80068b4:	da15      	bge.n	80068e2 <USBH_CDC_InterfaceInit+0xb2>
  {
    CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 80068b6:	7bfb      	ldrb	r3, [r7, #15]
 80068b8:	687a      	ldr	r2, [r7, #4]
 80068ba:	211a      	movs	r1, #26
 80068bc:	fb01 f303 	mul.w	r3, r1, r3
 80068c0:	4413      	add	r3, r2
 80068c2:	f203 334e 	addw	r3, r3, #846	; 0x34e
 80068c6:	781a      	ldrb	r2, [r3, #0]
 80068c8:	68bb      	ldr	r3, [r7, #8]
 80068ca:	705a      	strb	r2, [r3, #1]
    CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 80068cc:	7bfb      	ldrb	r3, [r7, #15]
 80068ce:	687a      	ldr	r2, [r7, #4]
 80068d0:	211a      	movs	r1, #26
 80068d2:	fb01 f303 	mul.w	r3, r1, r3
 80068d6:	4413      	add	r3, r2
 80068d8:	f503 7354 	add.w	r3, r3, #848	; 0x350
 80068dc:	881a      	ldrh	r2, [r3, #0]
 80068de:	68bb      	ldr	r3, [r7, #8]
 80068e0:	815a      	strh	r2, [r3, #10]
  }

  /*Allocate the length for host channel number in*/
  CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 80068e2:	68bb      	ldr	r3, [r7, #8]
 80068e4:	785b      	ldrb	r3, [r3, #1]
 80068e6:	4619      	mov	r1, r3
 80068e8:	6878      	ldr	r0, [r7, #4]
 80068ea:	f001 ff2c 	bl	8008746 <USBH_AllocPipe>
 80068ee:	4603      	mov	r3, r0
 80068f0:	461a      	mov	r2, r3
 80068f2:	68bb      	ldr	r3, [r7, #8]
 80068f4:	701a      	strb	r2, [r3, #0]

  /* Open pipe for Notification endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->CommItf.NotifPipe, CDC_Handle->CommItf.NotifEp,
 80068f6:	68bb      	ldr	r3, [r7, #8]
 80068f8:	7819      	ldrb	r1, [r3, #0]
 80068fa:	68bb      	ldr	r3, [r7, #8]
 80068fc:	7858      	ldrb	r0, [r3, #1]
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800690a:	68ba      	ldr	r2, [r7, #8]
 800690c:	8952      	ldrh	r2, [r2, #10]
 800690e:	9202      	str	r2, [sp, #8]
 8006910:	2203      	movs	r2, #3
 8006912:	9201      	str	r2, [sp, #4]
 8006914:	9300      	str	r3, [sp, #0]
 8006916:	4623      	mov	r3, r4
 8006918:	4602      	mov	r2, r0
 800691a:	6878      	ldr	r0, [r7, #4]
 800691c:	f001 fee4 	bl	80086e8 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_INTR,
                      CDC_Handle->CommItf.NotifEpSize);

  (void)USBH_LL_SetToggle(phost, CDC_Handle->CommItf.NotifPipe, 0U);
 8006920:	68bb      	ldr	r3, [r7, #8]
 8006922:	781b      	ldrb	r3, [r3, #0]
 8006924:	2200      	movs	r2, #0
 8006926:	4619      	mov	r1, r3
 8006928:	6878      	ldr	r0, [r7, #4]
 800692a:	f002 f9f3 	bl	8008d14 <USBH_LL_SetToggle>

  interface = USBH_FindInterface(phost, DATA_INTERFACE_CLASS_CODE,
 800692e:	2300      	movs	r3, #0
 8006930:	2200      	movs	r2, #0
 8006932:	210a      	movs	r1, #10
 8006934:	6878      	ldr	r0, [r7, #4]
 8006936:	f000 fbeb 	bl	8007110 <USBH_FindInterface>
 800693a:	4603      	mov	r3, r0
 800693c:	73fb      	strb	r3, [r7, #15]
                                   RESERVED, NO_CLASS_SPECIFIC_PROTOCOL_CODE);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 800693e:	7bfb      	ldrb	r3, [r7, #15]
 8006940:	2bff      	cmp	r3, #255	; 0xff
 8006942:	d002      	beq.n	800694a <USBH_CDC_InterfaceInit+0x11a>
 8006944:	7bfb      	ldrb	r3, [r7, #15]
 8006946:	2b01      	cmp	r3, #1
 8006948:	d901      	bls.n	800694e <USBH_CDC_InterfaceInit+0x11e>
  {
    USBH_DbgLog("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 800694a:	2302      	movs	r3, #2
 800694c:	e0c2      	b.n	8006ad4 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /*Collect the class specific endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 800694e:	7bfb      	ldrb	r3, [r7, #15]
 8006950:	687a      	ldr	r2, [r7, #4]
 8006952:	211a      	movs	r1, #26
 8006954:	fb01 f303 	mul.w	r3, r1, r3
 8006958:	4413      	add	r3, r2
 800695a:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800695e:	781b      	ldrb	r3, [r3, #0]
 8006960:	b25b      	sxtb	r3, r3
 8006962:	2b00      	cmp	r3, #0
 8006964:	da16      	bge.n	8006994 <USBH_CDC_InterfaceInit+0x164>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8006966:	7bfb      	ldrb	r3, [r7, #15]
 8006968:	687a      	ldr	r2, [r7, #4]
 800696a:	211a      	movs	r1, #26
 800696c:	fb01 f303 	mul.w	r3, r1, r3
 8006970:	4413      	add	r3, r2
 8006972:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8006976:	781a      	ldrb	r2, [r3, #0]
 8006978:	68bb      	ldr	r3, [r7, #8]
 800697a:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800697c:	7bfb      	ldrb	r3, [r7, #15]
 800697e:	687a      	ldr	r2, [r7, #4]
 8006980:	211a      	movs	r1, #26
 8006982:	fb01 f303 	mul.w	r3, r1, r3
 8006986:	4413      	add	r3, r2
 8006988:	f503 7354 	add.w	r3, r3, #848	; 0x350
 800698c:	881a      	ldrh	r2, [r3, #0]
 800698e:	68bb      	ldr	r3, [r7, #8]
 8006990:	835a      	strh	r2, [r3, #26]
 8006992:	e015      	b.n	80069c0 <USBH_CDC_InterfaceInit+0x190>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8006994:	7bfb      	ldrb	r3, [r7, #15]
 8006996:	687a      	ldr	r2, [r7, #4]
 8006998:	211a      	movs	r1, #26
 800699a:	fb01 f303 	mul.w	r3, r1, r3
 800699e:	4413      	add	r3, r2
 80069a0:	f203 334e 	addw	r3, r3, #846	; 0x34e
 80069a4:	781a      	ldrb	r2, [r3, #0]
 80069a6:	68bb      	ldr	r3, [r7, #8]
 80069a8:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 80069aa:	7bfb      	ldrb	r3, [r7, #15]
 80069ac:	687a      	ldr	r2, [r7, #4]
 80069ae:	211a      	movs	r1, #26
 80069b0:	fb01 f303 	mul.w	r3, r1, r3
 80069b4:	4413      	add	r3, r2
 80069b6:	f503 7354 	add.w	r3, r3, #848	; 0x350
 80069ba:	881a      	ldrh	r2, [r3, #0]
 80069bc:	68bb      	ldr	r3, [r7, #8]
 80069be:	831a      	strh	r2, [r3, #24]
  }

  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U) != 0U)
 80069c0:	7bfb      	ldrb	r3, [r7, #15]
 80069c2:	687a      	ldr	r2, [r7, #4]
 80069c4:	211a      	movs	r1, #26
 80069c6:	fb01 f303 	mul.w	r3, r1, r3
 80069ca:	4413      	add	r3, r2
 80069cc:	f203 3356 	addw	r3, r3, #854	; 0x356
 80069d0:	781b      	ldrb	r3, [r3, #0]
 80069d2:	b25b      	sxtb	r3, r3
 80069d4:	2b00      	cmp	r3, #0
 80069d6:	da16      	bge.n	8006a06 <USBH_CDC_InterfaceInit+0x1d6>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 80069d8:	7bfb      	ldrb	r3, [r7, #15]
 80069da:	687a      	ldr	r2, [r7, #4]
 80069dc:	211a      	movs	r1, #26
 80069de:	fb01 f303 	mul.w	r3, r1, r3
 80069e2:	4413      	add	r3, r2
 80069e4:	f203 3356 	addw	r3, r3, #854	; 0x356
 80069e8:	781a      	ldrb	r2, [r3, #0]
 80069ea:	68bb      	ldr	r3, [r7, #8]
 80069ec:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 80069ee:	7bfb      	ldrb	r3, [r7, #15]
 80069f0:	687a      	ldr	r2, [r7, #4]
 80069f2:	211a      	movs	r1, #26
 80069f4:	fb01 f303 	mul.w	r3, r1, r3
 80069f8:	4413      	add	r3, r2
 80069fa:	f503 7356 	add.w	r3, r3, #856	; 0x358
 80069fe:	881a      	ldrh	r2, [r3, #0]
 8006a00:	68bb      	ldr	r3, [r7, #8]
 8006a02:	835a      	strh	r2, [r3, #26]
 8006a04:	e015      	b.n	8006a32 <USBH_CDC_InterfaceInit+0x202>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8006a06:	7bfb      	ldrb	r3, [r7, #15]
 8006a08:	687a      	ldr	r2, [r7, #4]
 8006a0a:	211a      	movs	r1, #26
 8006a0c:	fb01 f303 	mul.w	r3, r1, r3
 8006a10:	4413      	add	r3, r2
 8006a12:	f203 3356 	addw	r3, r3, #854	; 0x356
 8006a16:	781a      	ldrb	r2, [r3, #0]
 8006a18:	68bb      	ldr	r3, [r7, #8]
 8006a1a:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8006a1c:	7bfb      	ldrb	r3, [r7, #15]
 8006a1e:	687a      	ldr	r2, [r7, #4]
 8006a20:	211a      	movs	r1, #26
 8006a22:	fb01 f303 	mul.w	r3, r1, r3
 8006a26:	4413      	add	r3, r2
 8006a28:	f503 7356 	add.w	r3, r3, #856	; 0x358
 8006a2c:	881a      	ldrh	r2, [r3, #0]
 8006a2e:	68bb      	ldr	r3, [r7, #8]
 8006a30:	831a      	strh	r2, [r3, #24]
  }

  /*Allocate the length for host channel number out*/
  CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 8006a32:	68bb      	ldr	r3, [r7, #8]
 8006a34:	7b9b      	ldrb	r3, [r3, #14]
 8006a36:	4619      	mov	r1, r3
 8006a38:	6878      	ldr	r0, [r7, #4]
 8006a3a:	f001 fe84 	bl	8008746 <USBH_AllocPipe>
 8006a3e:	4603      	mov	r3, r0
 8006a40:	461a      	mov	r2, r3
 8006a42:	68bb      	ldr	r3, [r7, #8]
 8006a44:	735a      	strb	r2, [r3, #13]

  /*Allocate the length for host channel number in*/
  CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 8006a46:	68bb      	ldr	r3, [r7, #8]
 8006a48:	7bdb      	ldrb	r3, [r3, #15]
 8006a4a:	4619      	mov	r1, r3
 8006a4c:	6878      	ldr	r0, [r7, #4]
 8006a4e:	f001 fe7a 	bl	8008746 <USBH_AllocPipe>
 8006a52:	4603      	mov	r3, r0
 8006a54:	461a      	mov	r2, r3
 8006a56:	68bb      	ldr	r3, [r7, #8]
 8006a58:	731a      	strb	r2, [r3, #12]

  /* Open channel for OUT endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.OutPipe, CDC_Handle->DataItf.OutEp,
 8006a5a:	68bb      	ldr	r3, [r7, #8]
 8006a5c:	7b59      	ldrb	r1, [r3, #13]
 8006a5e:	68bb      	ldr	r3, [r7, #8]
 8006a60:	7b98      	ldrb	r0, [r3, #14]
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8006a6e:	68ba      	ldr	r2, [r7, #8]
 8006a70:	8b12      	ldrh	r2, [r2, #24]
 8006a72:	9202      	str	r2, [sp, #8]
 8006a74:	2202      	movs	r2, #2
 8006a76:	9201      	str	r2, [sp, #4]
 8006a78:	9300      	str	r3, [sp, #0]
 8006a7a:	4623      	mov	r3, r4
 8006a7c:	4602      	mov	r2, r0
 8006a7e:	6878      	ldr	r0, [r7, #4]
 8006a80:	f001 fe32 	bl	80086e8 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.OutEpSize);

  /* Open channel for IN endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.InPipe, CDC_Handle->DataItf.InEp,
 8006a84:	68bb      	ldr	r3, [r7, #8]
 8006a86:	7b19      	ldrb	r1, [r3, #12]
 8006a88:	68bb      	ldr	r3, [r7, #8]
 8006a8a:	7bd8      	ldrb	r0, [r3, #15]
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8006a98:	68ba      	ldr	r2, [r7, #8]
 8006a9a:	8b52      	ldrh	r2, [r2, #26]
 8006a9c:	9202      	str	r2, [sp, #8]
 8006a9e:	2202      	movs	r2, #2
 8006aa0:	9201      	str	r2, [sp, #4]
 8006aa2:	9300      	str	r3, [sp, #0]
 8006aa4:	4623      	mov	r3, r4
 8006aa6:	4602      	mov	r2, r0
 8006aa8:	6878      	ldr	r0, [r7, #4]
 8006aaa:	f001 fe1d 	bl	80086e8 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.InEpSize);

  CDC_Handle->state = CDC_IDLE_STATE;
 8006aae:	68bb      	ldr	r3, [r7, #8]
 8006ab0:	2200      	movs	r2, #0
 8006ab2:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.OutPipe, 0U);
 8006ab6:	68bb      	ldr	r3, [r7, #8]
 8006ab8:	7b5b      	ldrb	r3, [r3, #13]
 8006aba:	2200      	movs	r2, #0
 8006abc:	4619      	mov	r1, r3
 8006abe:	6878      	ldr	r0, [r7, #4]
 8006ac0:	f002 f928 	bl	8008d14 <USBH_LL_SetToggle>
  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.InPipe, 0U);
 8006ac4:	68bb      	ldr	r3, [r7, #8]
 8006ac6:	7b1b      	ldrb	r3, [r3, #12]
 8006ac8:	2200      	movs	r2, #0
 8006aca:	4619      	mov	r1, r3
 8006acc:	6878      	ldr	r0, [r7, #4]
 8006ace:	f002 f921 	bl	8008d14 <USBH_LL_SetToggle>

  return USBH_OK;
 8006ad2:	2300      	movs	r3, #0
}
 8006ad4:	4618      	mov	r0, r3
 8006ad6:	3714      	adds	r7, #20
 8006ad8:	46bd      	mov	sp, r7
 8006ada:	bd90      	pop	{r4, r7, pc}

08006adc <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 8006adc:	b580      	push	{r7, lr}
 8006ade:	b084      	sub	sp, #16
 8006ae0:	af00      	add	r7, sp, #0
 8006ae2:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006aea:	69db      	ldr	r3, [r3, #28]
 8006aec:	60fb      	str	r3, [r7, #12]

  if ((CDC_Handle->CommItf.NotifPipe) != 0U)
 8006aee:	68fb      	ldr	r3, [r7, #12]
 8006af0:	781b      	ldrb	r3, [r3, #0]
 8006af2:	2b00      	cmp	r3, #0
 8006af4:	d00e      	beq.n	8006b14 <USBH_CDC_InterfaceDeInit+0x38>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 8006af6:	68fb      	ldr	r3, [r7, #12]
 8006af8:	781b      	ldrb	r3, [r3, #0]
 8006afa:	4619      	mov	r1, r3
 8006afc:	6878      	ldr	r0, [r7, #4]
 8006afe:	f001 fe12 	bl	8008726 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->CommItf.NotifPipe);
 8006b02:	68fb      	ldr	r3, [r7, #12]
 8006b04:	781b      	ldrb	r3, [r3, #0]
 8006b06:	4619      	mov	r1, r3
 8006b08:	6878      	ldr	r0, [r7, #4]
 8006b0a:	f001 fe3d 	bl	8008788 <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 8006b0e:	68fb      	ldr	r3, [r7, #12]
 8006b10:	2200      	movs	r2, #0
 8006b12:	701a      	strb	r2, [r3, #0]
  }

  if ((CDC_Handle->DataItf.InPipe) != 0U)
 8006b14:	68fb      	ldr	r3, [r7, #12]
 8006b16:	7b1b      	ldrb	r3, [r3, #12]
 8006b18:	2b00      	cmp	r3, #0
 8006b1a:	d00e      	beq.n	8006b3a <USBH_CDC_InterfaceDeInit+0x5e>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 8006b1c:	68fb      	ldr	r3, [r7, #12]
 8006b1e:	7b1b      	ldrb	r3, [r3, #12]
 8006b20:	4619      	mov	r1, r3
 8006b22:	6878      	ldr	r0, [r7, #4]
 8006b24:	f001 fdff 	bl	8008726 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.InPipe);
 8006b28:	68fb      	ldr	r3, [r7, #12]
 8006b2a:	7b1b      	ldrb	r3, [r3, #12]
 8006b2c:	4619      	mov	r1, r3
 8006b2e:	6878      	ldr	r0, [r7, #4]
 8006b30:	f001 fe2a 	bl	8008788 <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 8006b34:	68fb      	ldr	r3, [r7, #12]
 8006b36:	2200      	movs	r2, #0
 8006b38:	731a      	strb	r2, [r3, #12]
  }

  if ((CDC_Handle->DataItf.OutPipe) != 0U)
 8006b3a:	68fb      	ldr	r3, [r7, #12]
 8006b3c:	7b5b      	ldrb	r3, [r3, #13]
 8006b3e:	2b00      	cmp	r3, #0
 8006b40:	d00e      	beq.n	8006b60 <USBH_CDC_InterfaceDeInit+0x84>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 8006b42:	68fb      	ldr	r3, [r7, #12]
 8006b44:	7b5b      	ldrb	r3, [r3, #13]
 8006b46:	4619      	mov	r1, r3
 8006b48:	6878      	ldr	r0, [r7, #4]
 8006b4a:	f001 fdec 	bl	8008726 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.OutPipe);
 8006b4e:	68fb      	ldr	r3, [r7, #12]
 8006b50:	7b5b      	ldrb	r3, [r3, #13]
 8006b52:	4619      	mov	r1, r3
 8006b54:	6878      	ldr	r0, [r7, #4]
 8006b56:	f001 fe17 	bl	8008788 <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 8006b5a:	68fb      	ldr	r3, [r7, #12]
 8006b5c:	2200      	movs	r2, #0
 8006b5e:	735a      	strb	r2, [r3, #13]
  }

  if ((phost->pActiveClass->pData) != NULL)
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006b66:	69db      	ldr	r3, [r3, #28]
 8006b68:	2b00      	cmp	r3, #0
 8006b6a:	d00b      	beq.n	8006b84 <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free(phost->pActiveClass->pData);
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006b72:	69db      	ldr	r3, [r3, #28]
 8006b74:	4618      	mov	r0, r3
 8006b76:	f002 f983 	bl	8008e80 <free>
    phost->pActiveClass->pData = 0U;
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006b80:	2200      	movs	r2, #0
 8006b82:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 8006b84:	2300      	movs	r3, #0
}
 8006b86:	4618      	mov	r0, r3
 8006b88:	3710      	adds	r7, #16
 8006b8a:	46bd      	mov	sp, r7
 8006b8c:	bd80      	pop	{r7, pc}

08006b8e <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest(USBH_HandleTypeDef *phost)
{
 8006b8e:	b580      	push	{r7, lr}
 8006b90:	b084      	sub	sp, #16
 8006b92:	af00      	add	r7, sp, #0
 8006b94:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006b9c:	69db      	ldr	r3, [r3, #28]
 8006b9e:	60fb      	str	r3, [r7, #12]

  /* Issue the get line coding request */
  status = GetLineCoding(phost, &CDC_Handle->LineCoding);
 8006ba0:	68fb      	ldr	r3, [r7, #12]
 8006ba2:	3340      	adds	r3, #64	; 0x40
 8006ba4:	4619      	mov	r1, r3
 8006ba6:	6878      	ldr	r0, [r7, #4]
 8006ba8:	f000 f8b1 	bl	8006d0e <GetLineCoding>
 8006bac:	4603      	mov	r3, r0
 8006bae:	72fb      	strb	r3, [r7, #11]
  if (status == USBH_OK)
 8006bb0:	7afb      	ldrb	r3, [r7, #11]
 8006bb2:	2b00      	cmp	r3, #0
 8006bb4:	d105      	bne.n	8006bc2 <USBH_CDC_ClassRequest+0x34>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8006bbc:	2102      	movs	r1, #2
 8006bbe:	6878      	ldr	r0, [r7, #4]
 8006bc0:	4798      	blx	r3
  else
  {
    /* .. */
  }

  return status;
 8006bc2:	7afb      	ldrb	r3, [r7, #11]
}
 8006bc4:	4618      	mov	r0, r3
 8006bc6:	3710      	adds	r7, #16
 8006bc8:	46bd      	mov	sp, r7
 8006bca:	bd80      	pop	{r7, pc}

08006bcc <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process(USBH_HandleTypeDef *phost)
{
 8006bcc:	b580      	push	{r7, lr}
 8006bce:	b084      	sub	sp, #16
 8006bd0:	af00      	add	r7, sp, #0
 8006bd2:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 8006bd4:	2301      	movs	r3, #1
 8006bd6:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 8006bd8:	2300      	movs	r3, #0
 8006bda:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006be2:	69db      	ldr	r3, [r3, #28]
 8006be4:	60bb      	str	r3, [r7, #8]

  switch (CDC_Handle->state)
 8006be6:	68bb      	ldr	r3, [r7, #8]
 8006be8:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8006bec:	2b04      	cmp	r3, #4
 8006bee:	d877      	bhi.n	8006ce0 <USBH_CDC_Process+0x114>
 8006bf0:	a201      	add	r2, pc, #4	; (adr r2, 8006bf8 <USBH_CDC_Process+0x2c>)
 8006bf2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006bf6:	bf00      	nop
 8006bf8:	08006c0d 	.word	0x08006c0d
 8006bfc:	08006c13 	.word	0x08006c13
 8006c00:	08006c43 	.word	0x08006c43
 8006c04:	08006cb7 	.word	0x08006cb7
 8006c08:	08006cc5 	.word	0x08006cc5
  {

    case CDC_IDLE_STATE:
      status = USBH_OK;
 8006c0c:	2300      	movs	r3, #0
 8006c0e:	73fb      	strb	r3, [r7, #15]
      break;
 8006c10:	e06d      	b.n	8006cee <USBH_CDC_Process+0x122>

    case CDC_SET_LINE_CODING_STATE:
      req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 8006c12:	68bb      	ldr	r3, [r7, #8]
 8006c14:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006c16:	4619      	mov	r1, r3
 8006c18:	6878      	ldr	r0, [r7, #4]
 8006c1a:	f000 f897 	bl	8006d4c <SetLineCoding>
 8006c1e:	4603      	mov	r3, r0
 8006c20:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8006c22:	7bbb      	ldrb	r3, [r7, #14]
 8006c24:	2b00      	cmp	r3, #0
 8006c26:	d104      	bne.n	8006c32 <USBH_CDC_Process+0x66>
      {
        CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 8006c28:	68bb      	ldr	r3, [r7, #8]
 8006c2a:	2202      	movs	r2, #2
 8006c2c:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8006c30:	e058      	b.n	8006ce4 <USBH_CDC_Process+0x118>
        if (req_status != USBH_BUSY)
 8006c32:	7bbb      	ldrb	r3, [r7, #14]
 8006c34:	2b01      	cmp	r3, #1
 8006c36:	d055      	beq.n	8006ce4 <USBH_CDC_Process+0x118>
          CDC_Handle->state = CDC_ERROR_STATE;
 8006c38:	68bb      	ldr	r3, [r7, #8]
 8006c3a:	2204      	movs	r2, #4
 8006c3c:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 8006c40:	e050      	b.n	8006ce4 <USBH_CDC_Process+0x118>


    case CDC_GET_LAST_LINE_CODING_STATE:
      req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 8006c42:	68bb      	ldr	r3, [r7, #8]
 8006c44:	3340      	adds	r3, #64	; 0x40
 8006c46:	4619      	mov	r1, r3
 8006c48:	6878      	ldr	r0, [r7, #4]
 8006c4a:	f000 f860 	bl	8006d0e <GetLineCoding>
 8006c4e:	4603      	mov	r3, r0
 8006c50:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8006c52:	7bbb      	ldrb	r3, [r7, #14]
 8006c54:	2b00      	cmp	r3, #0
 8006c56:	d126      	bne.n	8006ca6 <USBH_CDC_Process+0xda>
      {
        CDC_Handle->state = CDC_IDLE_STATE;
 8006c58:	68bb      	ldr	r3, [r7, #8]
 8006c5a:	2200      	movs	r2, #0
 8006c5c:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8006c60:	68bb      	ldr	r3, [r7, #8]
 8006c62:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 8006c66:	68bb      	ldr	r3, [r7, #8]
 8006c68:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006c6a:	791b      	ldrb	r3, [r3, #4]
 8006c6c:	429a      	cmp	r2, r3
 8006c6e:	d13b      	bne.n	8006ce8 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8006c70:	68bb      	ldr	r3, [r7, #8]
 8006c72:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
 8006c76:	68bb      	ldr	r3, [r7, #8]
 8006c78:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006c7a:	799b      	ldrb	r3, [r3, #6]
        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8006c7c:	429a      	cmp	r2, r3
 8006c7e:	d133      	bne.n	8006ce8 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8006c80:	68bb      	ldr	r3, [r7, #8]
 8006c82:	f893 2045 	ldrb.w	r2, [r3, #69]	; 0x45
 8006c86:	68bb      	ldr	r3, [r7, #8]
 8006c88:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006c8a:	795b      	ldrb	r3, [r3, #5]
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8006c8c:	429a      	cmp	r2, r3
 8006c8e:	d12b      	bne.n	8006ce8 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 8006c90:	68bb      	ldr	r3, [r7, #8]
 8006c92:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006c94:	68bb      	ldr	r3, [r7, #8]
 8006c96:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006c98:	681b      	ldr	r3, [r3, #0]
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8006c9a:	429a      	cmp	r2, r3
 8006c9c:	d124      	bne.n	8006ce8 <USBH_CDC_Process+0x11c>
        {
          USBH_CDC_LineCodingChanged(phost);
 8006c9e:	6878      	ldr	r0, [r7, #4]
 8006ca0:	f000 f958 	bl	8006f54 <USBH_CDC_LineCodingChanged>
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8006ca4:	e020      	b.n	8006ce8 <USBH_CDC_Process+0x11c>
        if (req_status != USBH_BUSY)
 8006ca6:	7bbb      	ldrb	r3, [r7, #14]
 8006ca8:	2b01      	cmp	r3, #1
 8006caa:	d01d      	beq.n	8006ce8 <USBH_CDC_Process+0x11c>
          CDC_Handle->state = CDC_ERROR_STATE;
 8006cac:	68bb      	ldr	r3, [r7, #8]
 8006cae:	2204      	movs	r2, #4
 8006cb0:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 8006cb4:	e018      	b.n	8006ce8 <USBH_CDC_Process+0x11c>

    case CDC_TRANSFER_DATA:
      CDC_ProcessTransmission(phost);
 8006cb6:	6878      	ldr	r0, [r7, #4]
 8006cb8:	f000 f867 	bl	8006d8a <CDC_ProcessTransmission>
      CDC_ProcessReception(phost);
 8006cbc:	6878      	ldr	r0, [r7, #4]
 8006cbe:	f000 f8da 	bl	8006e76 <CDC_ProcessReception>
      break;
 8006cc2:	e014      	b.n	8006cee <USBH_CDC_Process+0x122>

    case CDC_ERROR_STATE:
      req_status = USBH_ClrFeature(phost, 0x00U);
 8006cc4:	2100      	movs	r1, #0
 8006cc6:	6878      	ldr	r0, [r7, #4]
 8006cc8:	f000 ffef 	bl	8007caa <USBH_ClrFeature>
 8006ccc:	4603      	mov	r3, r0
 8006cce:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8006cd0:	7bbb      	ldrb	r3, [r7, #14]
 8006cd2:	2b00      	cmp	r3, #0
 8006cd4:	d10a      	bne.n	8006cec <USBH_CDC_Process+0x120>
      {
        /*Change the state to waiting*/
        CDC_Handle->state = CDC_IDLE_STATE;
 8006cd6:	68bb      	ldr	r3, [r7, #8]
 8006cd8:	2200      	movs	r2, #0
 8006cda:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      }
      break;
 8006cde:	e005      	b.n	8006cec <USBH_CDC_Process+0x120>

    default:
      break;
 8006ce0:	bf00      	nop
 8006ce2:	e004      	b.n	8006cee <USBH_CDC_Process+0x122>
      break;
 8006ce4:	bf00      	nop
 8006ce6:	e002      	b.n	8006cee <USBH_CDC_Process+0x122>
      break;
 8006ce8:	bf00      	nop
 8006cea:	e000      	b.n	8006cee <USBH_CDC_Process+0x122>
      break;
 8006cec:	bf00      	nop

  }

  return status;
 8006cee:	7bfb      	ldrb	r3, [r7, #15]
}
 8006cf0:	4618      	mov	r0, r3
 8006cf2:	3710      	adds	r7, #16
 8006cf4:	46bd      	mov	sp, r7
 8006cf6:	bd80      	pop	{r7, pc}

08006cf8 <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess(USBH_HandleTypeDef *phost)
{
 8006cf8:	b480      	push	{r7}
 8006cfa:	b083      	sub	sp, #12
 8006cfc:	af00      	add	r7, sp, #0
 8006cfe:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 8006d00:	2300      	movs	r3, #0
}
 8006d02:	4618      	mov	r0, r3
 8006d04:	370c      	adds	r7, #12
 8006d06:	46bd      	mov	sp, r7
 8006d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d0c:	4770      	bx	lr

08006d0e <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 8006d0e:	b580      	push	{r7, lr}
 8006d10:	b082      	sub	sp, #8
 8006d12:	af00      	add	r7, sp, #0
 8006d14:	6078      	str	r0, [r7, #4]
 8006d16:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	22a1      	movs	r2, #161	; 0xa1
 8006d1c:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	2221      	movs	r2, #33	; 0x21
 8006d22:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	2200      	movs	r2, #0
 8006d28:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	2200      	movs	r2, #0
 8006d2e:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	2207      	movs	r2, #7
 8006d34:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8006d36:	683b      	ldr	r3, [r7, #0]
 8006d38:	2207      	movs	r2, #7
 8006d3a:	4619      	mov	r1, r3
 8006d3c:	6878      	ldr	r0, [r7, #4]
 8006d3e:	f001 fa81 	bl	8008244 <USBH_CtlReq>
 8006d42:	4603      	mov	r3, r0
}
 8006d44:	4618      	mov	r0, r3
 8006d46:	3708      	adds	r7, #8
 8006d48:	46bd      	mov	sp, r7
 8006d4a:	bd80      	pop	{r7, pc}

08006d4c <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 8006d4c:	b580      	push	{r7, lr}
 8006d4e:	b082      	sub	sp, #8
 8006d50:	af00      	add	r7, sp, #0
 8006d52:	6078      	str	r0, [r7, #4]
 8006d54:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	2221      	movs	r2, #33	; 0x21
 8006d5a:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	2220      	movs	r2, #32
 8006d60:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	2200      	movs	r2, #0
 8006d66:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	2200      	movs	r2, #0
 8006d6c:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	2207      	movs	r2, #7
 8006d72:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8006d74:	683b      	ldr	r3, [r7, #0]
 8006d76:	2207      	movs	r2, #7
 8006d78:	4619      	mov	r1, r3
 8006d7a:	6878      	ldr	r0, [r7, #4]
 8006d7c:	f001 fa62 	bl	8008244 <USBH_CtlReq>
 8006d80:	4603      	mov	r3, r0
}
 8006d82:	4618      	mov	r0, r3
 8006d84:	3708      	adds	r7, #8
 8006d86:	46bd      	mov	sp, r7
 8006d88:	bd80      	pop	{r7, pc}

08006d8a <CDC_ProcessTransmission>:
  * @brief  The function is responsible for sending data to the device
  *  @param  pdev: Selected device
  * @retval None
  */
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 8006d8a:	b580      	push	{r7, lr}
 8006d8c:	b086      	sub	sp, #24
 8006d8e:	af02      	add	r7, sp, #8
 8006d90:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006d98:	69db      	ldr	r3, [r3, #28]
 8006d9a:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8006d9c:	2300      	movs	r3, #0
 8006d9e:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 8006da0:	68fb      	ldr	r3, [r7, #12]
 8006da2:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 8006da6:	2b01      	cmp	r3, #1
 8006da8:	d002      	beq.n	8006db0 <CDC_ProcessTransmission+0x26>
 8006daa:	2b02      	cmp	r3, #2
 8006dac:	d023      	beq.n	8006df6 <CDC_ProcessTransmission+0x6c>
        }
      }
      break;

    default:
      break;
 8006dae:	e05e      	b.n	8006e6e <CDC_ProcessTransmission+0xe4>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8006db0:	68fb      	ldr	r3, [r7, #12]
 8006db2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006db4:	68fa      	ldr	r2, [r7, #12]
 8006db6:	8b12      	ldrh	r2, [r2, #24]
 8006db8:	4293      	cmp	r3, r2
 8006dba:	d90b      	bls.n	8006dd4 <CDC_ProcessTransmission+0x4a>
        (void)USBH_BulkSendData(phost,
 8006dbc:	68fb      	ldr	r3, [r7, #12]
 8006dbe:	69d9      	ldr	r1, [r3, #28]
 8006dc0:	68fb      	ldr	r3, [r7, #12]
 8006dc2:	8b1a      	ldrh	r2, [r3, #24]
 8006dc4:	68fb      	ldr	r3, [r7, #12]
 8006dc6:	7b5b      	ldrb	r3, [r3, #13]
 8006dc8:	2001      	movs	r0, #1
 8006dca:	9000      	str	r0, [sp, #0]
 8006dcc:	6878      	ldr	r0, [r7, #4]
 8006dce:	f001 fc48 	bl	8008662 <USBH_BulkSendData>
 8006dd2:	e00b      	b.n	8006dec <CDC_ProcessTransmission+0x62>
        (void)USBH_BulkSendData(phost,
 8006dd4:	68fb      	ldr	r3, [r7, #12]
 8006dd6:	69d9      	ldr	r1, [r3, #28]
                                (uint16_t)CDC_Handle->TxDataLength,
 8006dd8:	68fb      	ldr	r3, [r7, #12]
 8006dda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        (void)USBH_BulkSendData(phost,
 8006ddc:	b29a      	uxth	r2, r3
 8006dde:	68fb      	ldr	r3, [r7, #12]
 8006de0:	7b5b      	ldrb	r3, [r3, #13]
 8006de2:	2001      	movs	r0, #1
 8006de4:	9000      	str	r0, [sp, #0]
 8006de6:	6878      	ldr	r0, [r7, #4]
 8006de8:	f001 fc3b 	bl	8008662 <USBH_BulkSendData>
      CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 8006dec:	68fb      	ldr	r3, [r7, #12]
 8006dee:	2202      	movs	r2, #2
 8006df0:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8006df4:	e03b      	b.n	8006e6e <CDC_ProcessTransmission+0xe4>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 8006df6:	68fb      	ldr	r3, [r7, #12]
 8006df8:	7b5b      	ldrb	r3, [r3, #13]
 8006dfa:	4619      	mov	r1, r3
 8006dfc:	6878      	ldr	r0, [r7, #4]
 8006dfe:	f001 ff5f 	bl	8008cc0 <USBH_LL_GetURBState>
 8006e02:	4603      	mov	r3, r0
 8006e04:	72fb      	strb	r3, [r7, #11]
      if (URB_Status == USBH_URB_DONE)
 8006e06:	7afb      	ldrb	r3, [r7, #11]
 8006e08:	2b01      	cmp	r3, #1
 8006e0a:	d128      	bne.n	8006e5e <CDC_ProcessTransmission+0xd4>
        if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8006e0c:	68fb      	ldr	r3, [r7, #12]
 8006e0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e10:	68fa      	ldr	r2, [r7, #12]
 8006e12:	8b12      	ldrh	r2, [r2, #24]
 8006e14:	4293      	cmp	r3, r2
 8006e16:	d90e      	bls.n	8006e36 <CDC_ProcessTransmission+0xac>
          CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 8006e18:	68fb      	ldr	r3, [r7, #12]
 8006e1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e1c:	68fa      	ldr	r2, [r7, #12]
 8006e1e:	8b12      	ldrh	r2, [r2, #24]
 8006e20:	1a9a      	subs	r2, r3, r2
 8006e22:	68fb      	ldr	r3, [r7, #12]
 8006e24:	625a      	str	r2, [r3, #36]	; 0x24
          CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 8006e26:	68fb      	ldr	r3, [r7, #12]
 8006e28:	69db      	ldr	r3, [r3, #28]
 8006e2a:	68fa      	ldr	r2, [r7, #12]
 8006e2c:	8b12      	ldrh	r2, [r2, #24]
 8006e2e:	441a      	add	r2, r3
 8006e30:	68fb      	ldr	r3, [r7, #12]
 8006e32:	61da      	str	r2, [r3, #28]
 8006e34:	e002      	b.n	8006e3c <CDC_ProcessTransmission+0xb2>
          CDC_Handle->TxDataLength = 0U;
 8006e36:	68fb      	ldr	r3, [r7, #12]
 8006e38:	2200      	movs	r2, #0
 8006e3a:	625a      	str	r2, [r3, #36]	; 0x24
        if (CDC_Handle->TxDataLength > 0U)
 8006e3c:	68fb      	ldr	r3, [r7, #12]
 8006e3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e40:	2b00      	cmp	r3, #0
 8006e42:	d004      	beq.n	8006e4e <CDC_ProcessTransmission+0xc4>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8006e44:	68fb      	ldr	r3, [r7, #12]
 8006e46:	2201      	movs	r2, #1
 8006e48:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8006e4c:	e00e      	b.n	8006e6c <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_IDLE;
 8006e4e:	68fb      	ldr	r3, [r7, #12]
 8006e50:	2200      	movs	r2, #0
 8006e52:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
          USBH_CDC_TransmitCallback(phost);
 8006e56:	6878      	ldr	r0, [r7, #4]
 8006e58:	f000 f868 	bl	8006f2c <USBH_CDC_TransmitCallback>
      break;
 8006e5c:	e006      	b.n	8006e6c <CDC_ProcessTransmission+0xe2>
        if (URB_Status == USBH_URB_NOTREADY)
 8006e5e:	7afb      	ldrb	r3, [r7, #11]
 8006e60:	2b02      	cmp	r3, #2
 8006e62:	d103      	bne.n	8006e6c <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8006e64:	68fb      	ldr	r3, [r7, #12]
 8006e66:	2201      	movs	r2, #1
 8006e68:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8006e6c:	bf00      	nop
  }
}
 8006e6e:	bf00      	nop
 8006e70:	3710      	adds	r7, #16
 8006e72:	46bd      	mov	sp, r7
 8006e74:	bd80      	pop	{r7, pc}

08006e76 <CDC_ProcessReception>:
  *  @param  pdev: Selected device
  * @retval None
  */

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 8006e76:	b580      	push	{r7, lr}
 8006e78:	b086      	sub	sp, #24
 8006e7a:	af00      	add	r7, sp, #0
 8006e7c:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006e84:	69db      	ldr	r3, [r3, #28]
 8006e86:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8006e88:	2300      	movs	r3, #0
 8006e8a:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch (CDC_Handle->data_rx_state)
 8006e8c:	697b      	ldr	r3, [r7, #20]
 8006e8e:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 8006e92:	2b03      	cmp	r3, #3
 8006e94:	d002      	beq.n	8006e9c <CDC_ProcessReception+0x26>
 8006e96:	2b04      	cmp	r3, #4
 8006e98:	d00e      	beq.n	8006eb8 <CDC_ProcessReception+0x42>
#endif
      }
      break;

    default:
      break;
 8006e9a:	e043      	b.n	8006f24 <CDC_ProcessReception+0xae>
      (void)USBH_BulkReceiveData(phost,
 8006e9c:	697b      	ldr	r3, [r7, #20]
 8006e9e:	6a19      	ldr	r1, [r3, #32]
 8006ea0:	697b      	ldr	r3, [r7, #20]
 8006ea2:	8b5a      	ldrh	r2, [r3, #26]
 8006ea4:	697b      	ldr	r3, [r7, #20]
 8006ea6:	7b1b      	ldrb	r3, [r3, #12]
 8006ea8:	6878      	ldr	r0, [r7, #4]
 8006eaa:	f001 fbff 	bl	80086ac <USBH_BulkReceiveData>
      CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 8006eae:	697b      	ldr	r3, [r7, #20]
 8006eb0:	2204      	movs	r2, #4
 8006eb2:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 8006eb6:	e035      	b.n	8006f24 <CDC_ProcessReception+0xae>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 8006eb8:	697b      	ldr	r3, [r7, #20]
 8006eba:	7b1b      	ldrb	r3, [r3, #12]
 8006ebc:	4619      	mov	r1, r3
 8006ebe:	6878      	ldr	r0, [r7, #4]
 8006ec0:	f001 fefe 	bl	8008cc0 <USBH_LL_GetURBState>
 8006ec4:	4603      	mov	r3, r0
 8006ec6:	74fb      	strb	r3, [r7, #19]
      if (URB_Status == USBH_URB_DONE)
 8006ec8:	7cfb      	ldrb	r3, [r7, #19]
 8006eca:	2b01      	cmp	r3, #1
 8006ecc:	d129      	bne.n	8006f22 <CDC_ProcessReception+0xac>
        length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 8006ece:	697b      	ldr	r3, [r7, #20]
 8006ed0:	7b1b      	ldrb	r3, [r3, #12]
 8006ed2:	4619      	mov	r1, r3
 8006ed4:	6878      	ldr	r0, [r7, #4]
 8006ed6:	f001 fe61 	bl	8008b9c <USBH_LL_GetLastXferSize>
 8006eda:	60f8      	str	r0, [r7, #12]
        if (((CDC_Handle->RxDataLength - length) > 0U) && (length > CDC_Handle->DataItf.InEpSize))
 8006edc:	697b      	ldr	r3, [r7, #20]
 8006ede:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006ee0:	68fa      	ldr	r2, [r7, #12]
 8006ee2:	429a      	cmp	r2, r3
 8006ee4:	d016      	beq.n	8006f14 <CDC_ProcessReception+0x9e>
 8006ee6:	697b      	ldr	r3, [r7, #20]
 8006ee8:	8b5b      	ldrh	r3, [r3, #26]
 8006eea:	461a      	mov	r2, r3
 8006eec:	68fb      	ldr	r3, [r7, #12]
 8006eee:	4293      	cmp	r3, r2
 8006ef0:	d910      	bls.n	8006f14 <CDC_ProcessReception+0x9e>
          CDC_Handle->RxDataLength -= length ;
 8006ef2:	697b      	ldr	r3, [r7, #20]
 8006ef4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006ef6:	68fb      	ldr	r3, [r7, #12]
 8006ef8:	1ad2      	subs	r2, r2, r3
 8006efa:	697b      	ldr	r3, [r7, #20]
 8006efc:	629a      	str	r2, [r3, #40]	; 0x28
          CDC_Handle->pRxData += length;
 8006efe:	697b      	ldr	r3, [r7, #20]
 8006f00:	6a1a      	ldr	r2, [r3, #32]
 8006f02:	68fb      	ldr	r3, [r7, #12]
 8006f04:	441a      	add	r2, r3
 8006f06:	697b      	ldr	r3, [r7, #20]
 8006f08:	621a      	str	r2, [r3, #32]
          CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 8006f0a:	697b      	ldr	r3, [r7, #20]
 8006f0c:	2203      	movs	r2, #3
 8006f0e:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 8006f12:	e006      	b.n	8006f22 <CDC_ProcessReception+0xac>
          CDC_Handle->data_rx_state = CDC_IDLE;
 8006f14:	697b      	ldr	r3, [r7, #20]
 8006f16:	2200      	movs	r2, #0
 8006f18:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
          USBH_CDC_ReceiveCallback(phost);
 8006f1c:	6878      	ldr	r0, [r7, #4]
 8006f1e:	f000 f80f 	bl	8006f40 <USBH_CDC_ReceiveCallback>
      break;
 8006f22:	bf00      	nop
  }
}
 8006f24:	bf00      	nop
 8006f26:	3718      	adds	r7, #24
 8006f28:	46bd      	mov	sp, r7
 8006f2a:	bd80      	pop	{r7, pc}

08006f2c <USBH_CDC_TransmitCallback>:
  * @brief  The function informs user that data have been received
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 8006f2c:	b480      	push	{r7}
 8006f2e:	b083      	sub	sp, #12
 8006f30:	af00      	add	r7, sp, #0
 8006f32:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8006f34:	bf00      	nop
 8006f36:	370c      	adds	r7, #12
 8006f38:	46bd      	mov	sp, r7
 8006f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f3e:	4770      	bx	lr

08006f40 <USBH_CDC_ReceiveCallback>:
  * @brief  The function informs user that data have been sent
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 8006f40:	b480      	push	{r7}
 8006f42:	b083      	sub	sp, #12
 8006f44:	af00      	add	r7, sp, #0
 8006f46:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8006f48:	bf00      	nop
 8006f4a:	370c      	adds	r7, #12
 8006f4c:	46bd      	mov	sp, r7
 8006f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f52:	4770      	bx	lr

08006f54 <USBH_CDC_LineCodingChanged>:
  * @brief  The function informs user that Settings have been changed
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 8006f54:	b480      	push	{r7}
 8006f56:	b083      	sub	sp, #12
 8006f58:	af00      	add	r7, sp, #0
 8006f5a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8006f5c:	bf00      	nop
 8006f5e:	370c      	adds	r7, #12
 8006f60:	46bd      	mov	sp, r7
 8006f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f66:	4770      	bx	lr

08006f68 <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Init(USBH_HandleTypeDef *phost,
                              void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                                               uint8_t id), uint8_t id)
{
 8006f68:	b580      	push	{r7, lr}
 8006f6a:	b084      	sub	sp, #16
 8006f6c:	af00      	add	r7, sp, #0
 8006f6e:	60f8      	str	r0, [r7, #12]
 8006f70:	60b9      	str	r1, [r7, #8]
 8006f72:	4613      	mov	r3, r2
 8006f74:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 8006f76:	68fb      	ldr	r3, [r7, #12]
 8006f78:	2b00      	cmp	r3, #0
 8006f7a:	d101      	bne.n	8006f80 <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 8006f7c:	2302      	movs	r3, #2
 8006f7e:	e029      	b.n	8006fd4 <USBH_Init+0x6c>
  }

  /* Set DRiver ID */
  phost->id = id;
 8006f80:	68fb      	ldr	r3, [r7, #12]
 8006f82:	79fa      	ldrb	r2, [r7, #7]
 8006f84:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 8006f88:	68fb      	ldr	r3, [r7, #12]
 8006f8a:	2200      	movs	r2, #0
 8006f8c:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
  phost->ClassNumber = 0U;
 8006f90:	68fb      	ldr	r3, [r7, #12]
 8006f92:	2200      	movs	r2, #0
 8006f94:	f8c3 2380 	str.w	r2, [r3, #896]	; 0x380

  /* Restore default states and prepare EP0 */
  (void)DeInitStateMachine(phost);
 8006f98:	68f8      	ldr	r0, [r7, #12]
 8006f9a:	f000 f81f 	bl	8006fdc <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 8006f9e:	68fb      	ldr	r3, [r7, #12]
 8006fa0:	2200      	movs	r2, #0
 8006fa2:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
  phost->device.is_connected = 0U;
 8006fa6:	68fb      	ldr	r3, [r7, #12]
 8006fa8:	2200      	movs	r2, #0
 8006faa:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 8006fae:	68fb      	ldr	r3, [r7, #12]
 8006fb0:	2200      	movs	r2, #0
 8006fb2:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 8006fb6:	68fb      	ldr	r3, [r7, #12]
 8006fb8:	2200      	movs	r2, #0
 8006fba:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 8006fbe:	68bb      	ldr	r3, [r7, #8]
 8006fc0:	2b00      	cmp	r3, #0
 8006fc2:	d003      	beq.n	8006fcc <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 8006fc4:	68fb      	ldr	r3, [r7, #12]
 8006fc6:	68ba      	ldr	r2, [r7, #8]
 8006fc8:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  (void)USBH_LL_Init(phost);
 8006fcc:	68f8      	ldr	r0, [r7, #12]
 8006fce:	f001 fd31 	bl	8008a34 <USBH_LL_Init>

  return USBH_OK;
 8006fd2:	2300      	movs	r3, #0
}
 8006fd4:	4618      	mov	r0, r3
 8006fd6:	3710      	adds	r7, #16
 8006fd8:	46bd      	mov	sp, r7
 8006fda:	bd80      	pop	{r7, pc}

08006fdc <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 8006fdc:	b480      	push	{r7}
 8006fde:	b085      	sub	sp, #20
 8006fe0:	af00      	add	r7, sp, #0
 8006fe2:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 8006fe4:	2300      	movs	r3, #0
 8006fe6:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8006fe8:	2300      	movs	r3, #0
 8006fea:	60fb      	str	r3, [r7, #12]
 8006fec:	e009      	b.n	8007002 <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 8006fee:	687a      	ldr	r2, [r7, #4]
 8006ff0:	68fb      	ldr	r3, [r7, #12]
 8006ff2:	33e0      	adds	r3, #224	; 0xe0
 8006ff4:	009b      	lsls	r3, r3, #2
 8006ff6:	4413      	add	r3, r2
 8006ff8:	2200      	movs	r2, #0
 8006ffa:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8006ffc:	68fb      	ldr	r3, [r7, #12]
 8006ffe:	3301      	adds	r3, #1
 8007000:	60fb      	str	r3, [r7, #12]
 8007002:	68fb      	ldr	r3, [r7, #12]
 8007004:	2b0f      	cmp	r3, #15
 8007006:	d9f2      	bls.n	8006fee <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8007008:	2300      	movs	r3, #0
 800700a:	60fb      	str	r3, [r7, #12]
 800700c:	e009      	b.n	8007022 <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 800700e:	687a      	ldr	r2, [r7, #4]
 8007010:	68fb      	ldr	r3, [r7, #12]
 8007012:	4413      	add	r3, r2
 8007014:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8007018:	2200      	movs	r2, #0
 800701a:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 800701c:	68fb      	ldr	r3, [r7, #12]
 800701e:	3301      	adds	r3, #1
 8007020:	60fb      	str	r3, [r7, #12]
 8007022:	68fb      	ldr	r3, [r7, #12]
 8007024:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007028:	d3f1      	bcc.n	800700e <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	2200      	movs	r2, #0
 800702e:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	2200      	movs	r2, #0
 8007034:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	2201      	movs	r2, #1
 800703a:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	2200      	movs	r2, #0
 8007040:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4

  phost->Control.state = CTRL_SETUP;
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	2201      	movs	r2, #1
 8007048:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	2240      	movs	r2, #64	; 0x40
 800704e:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	2200      	movs	r2, #0
 8007054:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	2200      	movs	r2, #0
 800705a:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed = (uint8_t)USBH_SPEED_FULL;
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	2201      	movs	r2, #1
 8007062:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d
  phost->device.RstCnt = 0U;
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	2200      	movs	r2, #0
 800706a:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
  phost->device.EnumCnt = 0U;
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	2200      	movs	r2, #0
 8007072:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  return USBH_OK;
 8007076:	2300      	movs	r3, #0
}
 8007078:	4618      	mov	r0, r3
 800707a:	3714      	adds	r7, #20
 800707c:	46bd      	mov	sp, r7
 800707e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007082:	4770      	bx	lr

08007084 <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 8007084:	b480      	push	{r7}
 8007086:	b085      	sub	sp, #20
 8007088:	af00      	add	r7, sp, #0
 800708a:	6078      	str	r0, [r7, #4]
 800708c:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 800708e:	2300      	movs	r3, #0
 8007090:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 8007092:	683b      	ldr	r3, [r7, #0]
 8007094:	2b00      	cmp	r3, #0
 8007096:	d016      	beq.n	80070c6 <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800709e:	2b00      	cmp	r3, #0
 80070a0:	d10e      	bne.n	80070c0 <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 80070a8:	1c59      	adds	r1, r3, #1
 80070aa:	687a      	ldr	r2, [r7, #4]
 80070ac:	f8c2 1380 	str.w	r1, [r2, #896]	; 0x380
 80070b0:	687a      	ldr	r2, [r7, #4]
 80070b2:	33de      	adds	r3, #222	; 0xde
 80070b4:	6839      	ldr	r1, [r7, #0]
 80070b6:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 80070ba:	2300      	movs	r3, #0
 80070bc:	73fb      	strb	r3, [r7, #15]
 80070be:	e004      	b.n	80070ca <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 80070c0:	2302      	movs	r3, #2
 80070c2:	73fb      	strb	r3, [r7, #15]
 80070c4:	e001      	b.n	80070ca <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 80070c6:	2302      	movs	r3, #2
 80070c8:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 80070ca:	7bfb      	ldrb	r3, [r7, #15]
}
 80070cc:	4618      	mov	r0, r3
 80070ce:	3714      	adds	r7, #20
 80070d0:	46bd      	mov	sp, r7
 80070d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070d6:	4770      	bx	lr

080070d8 <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 80070d8:	b480      	push	{r7}
 80070da:	b085      	sub	sp, #20
 80070dc:	af00      	add	r7, sp, #0
 80070de:	6078      	str	r0, [r7, #4]
 80070e0:	460b      	mov	r3, r1
 80070e2:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 80070e4:	2300      	movs	r3, #0
 80070e6:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	f893 333c 	ldrb.w	r3, [r3, #828]	; 0x33c
 80070ee:	78fa      	ldrb	r2, [r7, #3]
 80070f0:	429a      	cmp	r2, r3
 80070f2:	d204      	bcs.n	80070fe <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	78fa      	ldrb	r2, [r7, #3]
 80070f8:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324
 80070fc:	e001      	b.n	8007102 <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 80070fe:	2302      	movs	r3, #2
 8007100:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8007102:	7bfb      	ldrb	r3, [r7, #15]
}
 8007104:	4618      	mov	r0, r3
 8007106:	3714      	adds	r7, #20
 8007108:	46bd      	mov	sp, r7
 800710a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800710e:	4770      	bx	lr

08007110 <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 8007110:	b480      	push	{r7}
 8007112:	b087      	sub	sp, #28
 8007114:	af00      	add	r7, sp, #0
 8007116:	6078      	str	r0, [r7, #4]
 8007118:	4608      	mov	r0, r1
 800711a:	4611      	mov	r1, r2
 800711c:	461a      	mov	r2, r3
 800711e:	4603      	mov	r3, r0
 8007120:	70fb      	strb	r3, [r7, #3]
 8007122:	460b      	mov	r3, r1
 8007124:	70bb      	strb	r3, [r7, #2]
 8007126:	4613      	mov	r3, r2
 8007128:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 800712a:	2300      	movs	r3, #0
 800712c:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)NULL;
 800712e:	2300      	movs	r3, #0
 8007130:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	f503 734e 	add.w	r3, r3, #824	; 0x338
 8007138:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 800713a:	e025      	b.n	8007188 <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 800713c:	7dfb      	ldrb	r3, [r7, #23]
 800713e:	221a      	movs	r2, #26
 8007140:	fb02 f303 	mul.w	r3, r2, r3
 8007144:	3308      	adds	r3, #8
 8007146:	68fa      	ldr	r2, [r7, #12]
 8007148:	4413      	add	r3, r2
 800714a:	3302      	adds	r3, #2
 800714c:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 800714e:	693b      	ldr	r3, [r7, #16]
 8007150:	795b      	ldrb	r3, [r3, #5]
 8007152:	78fa      	ldrb	r2, [r7, #3]
 8007154:	429a      	cmp	r2, r3
 8007156:	d002      	beq.n	800715e <USBH_FindInterface+0x4e>
 8007158:	78fb      	ldrb	r3, [r7, #3]
 800715a:	2bff      	cmp	r3, #255	; 0xff
 800715c:	d111      	bne.n	8007182 <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800715e:	693b      	ldr	r3, [r7, #16]
 8007160:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8007162:	78ba      	ldrb	r2, [r7, #2]
 8007164:	429a      	cmp	r2, r3
 8007166:	d002      	beq.n	800716e <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8007168:	78bb      	ldrb	r3, [r7, #2]
 800716a:	2bff      	cmp	r3, #255	; 0xff
 800716c:	d109      	bne.n	8007182 <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 800716e:	693b      	ldr	r3, [r7, #16]
 8007170:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8007172:	787a      	ldrb	r2, [r7, #1]
 8007174:	429a      	cmp	r2, r3
 8007176:	d002      	beq.n	800717e <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8007178:	787b      	ldrb	r3, [r7, #1]
 800717a:	2bff      	cmp	r3, #255	; 0xff
 800717c:	d101      	bne.n	8007182 <USBH_FindInterface+0x72>
    {
      return  if_ix;
 800717e:	7dfb      	ldrb	r3, [r7, #23]
 8007180:	e006      	b.n	8007190 <USBH_FindInterface+0x80>
    }
    if_ix++;
 8007182:	7dfb      	ldrb	r3, [r7, #23]
 8007184:	3301      	adds	r3, #1
 8007186:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8007188:	7dfb      	ldrb	r3, [r7, #23]
 800718a:	2b01      	cmp	r3, #1
 800718c:	d9d6      	bls.n	800713c <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 800718e:	23ff      	movs	r3, #255	; 0xff
}
 8007190:	4618      	mov	r0, r3
 8007192:	371c      	adds	r7, #28
 8007194:	46bd      	mov	sp, r7
 8007196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800719a:	4770      	bx	lr

0800719c <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start(USBH_HandleTypeDef *phost)
{
 800719c:	b580      	push	{r7, lr}
 800719e:	b082      	sub	sp, #8
 80071a0:	af00      	add	r7, sp, #0
 80071a2:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  (void)USBH_LL_Start(phost);
 80071a4:	6878      	ldr	r0, [r7, #4]
 80071a6:	f001 fc81 	bl	8008aac <USBH_LL_Start>

  /* Activate VBUS on the port */
  (void)USBH_LL_DriverVBUS(phost, TRUE);
 80071aa:	2101      	movs	r1, #1
 80071ac:	6878      	ldr	r0, [r7, #4]
 80071ae:	f001 fd9a 	bl	8008ce6 <USBH_LL_DriverVBUS>

  return USBH_OK;
 80071b2:	2300      	movs	r3, #0
}
 80071b4:	4618      	mov	r0, r3
 80071b6:	3708      	adds	r7, #8
 80071b8:	46bd      	mov	sp, r7
 80071ba:	bd80      	pop	{r7, pc}

080071bc <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Process(USBH_HandleTypeDef *phost)
{
 80071bc:	b580      	push	{r7, lr}
 80071be:	b088      	sub	sp, #32
 80071c0:	af04      	add	r7, sp, #16
 80071c2:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 80071c4:	2302      	movs	r3, #2
 80071c6:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 80071c8:	2300      	movs	r3, #0
 80071ca:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	f893 3321 	ldrb.w	r3, [r3, #801]	; 0x321
 80071d2:	b2db      	uxtb	r3, r3
 80071d4:	2b01      	cmp	r3, #1
 80071d6:	d102      	bne.n	80071de <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	2203      	movs	r2, #3
 80071dc:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	781b      	ldrb	r3, [r3, #0]
 80071e2:	b2db      	uxtb	r3, r3
 80071e4:	2b0b      	cmp	r3, #11
 80071e6:	f200 81be 	bhi.w	8007566 <USBH_Process+0x3aa>
 80071ea:	a201      	add	r2, pc, #4	; (adr r2, 80071f0 <USBH_Process+0x34>)
 80071ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80071f0:	08007221 	.word	0x08007221
 80071f4:	08007253 	.word	0x08007253
 80071f8:	080072bb 	.word	0x080072bb
 80071fc:	08007501 	.word	0x08007501
 8007200:	08007567 	.word	0x08007567
 8007204:	0800735f 	.word	0x0800735f
 8007208:	080074a7 	.word	0x080074a7
 800720c:	08007395 	.word	0x08007395
 8007210:	080073b5 	.word	0x080073b5
 8007214:	080073d5 	.word	0x080073d5
 8007218:	08007419 	.word	0x08007419
 800721c:	080074e9 	.word	0x080074e9
  {
    case HOST_IDLE :

      if ((phost->device.is_connected) != 0U)
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 8007226:	b2db      	uxtb	r3, r3
 8007228:	2b00      	cmp	r3, #0
 800722a:	f000 819e 	beq.w	800756a <USBH_Process+0x3ae>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	2201      	movs	r2, #1
 8007232:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 8007234:	20c8      	movs	r0, #200	; 0xc8
 8007236:	f001 fd9d 	bl	8008d74 <USBH_Delay>
        (void)USBH_LL_ResetPort(phost);
 800723a:	6878      	ldr	r0, [r7, #4]
 800723c:	f001 fc93 	bl	8008b66 <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	2200      	movs	r2, #0
 8007244:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
        phost->Timeout = 0U;
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	2200      	movs	r2, #0
 800724c:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8007250:	e18b      	b.n	800756a <USBH_Process+0x3ae>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	f893 3323 	ldrb.w	r3, [r3, #803]	; 0x323
 8007258:	2b01      	cmp	r3, #1
 800725a:	d107      	bne.n	800726c <USBH_Process+0xb0>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	2200      	movs	r2, #0
 8007260:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	2202      	movs	r2, #2
 8007268:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800726a:	e18d      	b.n	8007588 <USBH_Process+0x3cc>
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8007272:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007276:	d914      	bls.n	80072a2 <USBH_Process+0xe6>
          phost->device.RstCnt++;
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 800727e:	3301      	adds	r3, #1
 8007280:	b2da      	uxtb	r2, r3
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
          if (phost->device.RstCnt > 3U)
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 800728e:	2b03      	cmp	r3, #3
 8007290:	d903      	bls.n	800729a <USBH_Process+0xde>
            phost->gState = HOST_ABORT_STATE;
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	220d      	movs	r2, #13
 8007296:	701a      	strb	r2, [r3, #0]
      break;
 8007298:	e176      	b.n	8007588 <USBH_Process+0x3cc>
            phost->gState = HOST_IDLE;
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	2200      	movs	r2, #0
 800729e:	701a      	strb	r2, [r3, #0]
      break;
 80072a0:	e172      	b.n	8007588 <USBH_Process+0x3cc>
          phost->Timeout += 10U;
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 80072a8:	f103 020a 	add.w	r2, r3, #10
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
          USBH_Delay(10U);
 80072b2:	200a      	movs	r0, #10
 80072b4:	f001 fd5e 	bl	8008d74 <USBH_Delay>
      break;
 80072b8:	e166      	b.n	8007588 <USBH_Process+0x3cc>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80072c0:	2b00      	cmp	r3, #0
 80072c2:	d005      	beq.n	80072d0 <USBH_Process+0x114>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80072ca:	2104      	movs	r1, #4
 80072cc:	6878      	ldr	r0, [r7, #4]
 80072ce:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 80072d0:	2064      	movs	r0, #100	; 0x64
 80072d2:	f001 fd4f 	bl	8008d74 <USBH_Delay>

      phost->device.speed = (uint8_t)USBH_LL_GetSpeed(phost);
 80072d6:	6878      	ldr	r0, [r7, #4]
 80072d8:	f001 fc1e 	bl	8008b18 <USBH_LL_GetSpeed>
 80072dc:	4603      	mov	r3, r0
 80072de:	461a      	mov	r2, r3
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

      phost->gState = HOST_ENUMERATION;
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	2205      	movs	r2, #5
 80072ea:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 80072ec:	2100      	movs	r1, #0
 80072ee:	6878      	ldr	r0, [r7, #4]
 80072f0:	f001 fa29 	bl	8008746 <USBH_AllocPipe>
 80072f4:	4603      	mov	r3, r0
 80072f6:	461a      	mov	r2, r3
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 80072fc:	2180      	movs	r1, #128	; 0x80
 80072fe:	6878      	ldr	r0, [r7, #4]
 8007300:	f001 fa21 	bl	8008746 <USBH_AllocPipe>
 8007304:	4603      	mov	r3, r0
 8007306:	461a      	mov	r2, r3
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	7919      	ldrb	r1, [r3, #4]
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 800731c:	687a      	ldr	r2, [r7, #4]
 800731e:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8007320:	b292      	uxth	r2, r2
 8007322:	9202      	str	r2, [sp, #8]
 8007324:	2200      	movs	r2, #0
 8007326:	9201      	str	r2, [sp, #4]
 8007328:	9300      	str	r3, [sp, #0]
 800732a:	4603      	mov	r3, r0
 800732c:	2280      	movs	r2, #128	; 0x80
 800732e:	6878      	ldr	r0, [r7, #4]
 8007330:	f001 f9da 	bl	80086e8 <USBH_OpenPipe>

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	7959      	ldrb	r1, [r3, #5]
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8007344:	687a      	ldr	r2, [r7, #4]
 8007346:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8007348:	b292      	uxth	r2, r2
 800734a:	9202      	str	r2, [sp, #8]
 800734c:	2200      	movs	r2, #0
 800734e:	9201      	str	r2, [sp, #4]
 8007350:	9300      	str	r3, [sp, #0]
 8007352:	4603      	mov	r3, r0
 8007354:	2200      	movs	r2, #0
 8007356:	6878      	ldr	r0, [r7, #4]
 8007358:	f001 f9c6 	bl	80086e8 <USBH_OpenPipe>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800735c:	e114      	b.n	8007588 <USBH_Process+0x3cc>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 800735e:	6878      	ldr	r0, [r7, #4]
 8007360:	f000 f918 	bl	8007594 <USBH_HandleEnum>
 8007364:	4603      	mov	r3, r0
 8007366:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 8007368:	7bbb      	ldrb	r3, [r7, #14]
 800736a:	b2db      	uxtb	r3, r3
 800736c:	2b00      	cmp	r3, #0
 800736e:	f040 80fe 	bne.w	800756e <USBH_Process+0x3b2>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	2200      	movs	r2, #0
 8007376:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	f893 3337 	ldrb.w	r3, [r3, #823]	; 0x337
 8007380:	2b01      	cmp	r3, #1
 8007382:	d103      	bne.n	800738c <USBH_Process+0x1d0>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	2208      	movs	r2, #8
 8007388:	701a      	strb	r2, [r3, #0]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 800738a:	e0f0      	b.n	800756e <USBH_Process+0x3b2>
          phost->gState = HOST_INPUT;
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	2207      	movs	r2, #7
 8007390:	701a      	strb	r2, [r3, #0]
      break;
 8007392:	e0ec      	b.n	800756e <USBH_Process+0x3b2>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800739a:	2b00      	cmp	r3, #0
 800739c:	f000 80e9 	beq.w	8007572 <USBH_Process+0x3b6>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80073a6:	2101      	movs	r1, #1
 80073a8:	6878      	ldr	r0, [r7, #4]
 80073aa:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	2208      	movs	r2, #8
 80073b0:	701a      	strb	r2, [r3, #0]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
    }
    break;
 80073b2:	e0de      	b.n	8007572 <USBH_Process+0x3b6>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	f893 333d 	ldrb.w	r3, [r3, #829]	; 0x33d
 80073ba:	b29b      	uxth	r3, r3
 80073bc:	4619      	mov	r1, r3
 80073be:	6878      	ldr	r0, [r7, #4]
 80073c0:	f000 fc2c 	bl	8007c1c <USBH_SetCfg>
 80073c4:	4603      	mov	r3, r0
 80073c6:	2b00      	cmp	r3, #0
 80073c8:	f040 80d5 	bne.w	8007576 <USBH_Process+0x3ba>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	2209      	movs	r2, #9
 80073d0:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 80073d2:	e0d0      	b.n	8007576 <USBH_Process+0x3ba>

    case  HOST_SET_WAKEUP_FEATURE:

      if (((phost->device.CfgDesc.bmAttributes) & (1U << 5)) != 0U)
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	f893 333f 	ldrb.w	r3, [r3, #831]	; 0x33f
 80073da:	f003 0320 	and.w	r3, r3, #32
 80073de:	2b00      	cmp	r3, #0
 80073e0:	d016      	beq.n	8007410 <USBH_Process+0x254>
      {
        status = USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP);
 80073e2:	2101      	movs	r1, #1
 80073e4:	6878      	ldr	r0, [r7, #4]
 80073e6:	f000 fc3c 	bl	8007c62 <USBH_SetFeature>
 80073ea:	4603      	mov	r3, r0
 80073ec:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 80073ee:	7bbb      	ldrb	r3, [r7, #14]
 80073f0:	b2db      	uxtb	r3, r3
 80073f2:	2b00      	cmp	r3, #0
 80073f4:	d103      	bne.n	80073fe <USBH_Process+0x242>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	220a      	movs	r2, #10
 80073fa:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 80073fc:	e0bd      	b.n	800757a <USBH_Process+0x3be>
        else if (status == USBH_NOT_SUPPORTED)
 80073fe:	7bbb      	ldrb	r3, [r7, #14]
 8007400:	b2db      	uxtb	r3, r3
 8007402:	2b03      	cmp	r3, #3
 8007404:	f040 80b9 	bne.w	800757a <USBH_Process+0x3be>
          phost->gState = HOST_CHECK_CLASS;
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	220a      	movs	r2, #10
 800740c:	701a      	strb	r2, [r3, #0]
      break;
 800740e:	e0b4      	b.n	800757a <USBH_Process+0x3be>
        phost->gState = HOST_CHECK_CLASS;
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	220a      	movs	r2, #10
 8007414:	701a      	strb	r2, [r3, #0]
      break;
 8007416:	e0b0      	b.n	800757a <USBH_Process+0x3be>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800741e:	2b00      	cmp	r3, #0
 8007420:	f000 80ad 	beq.w	800757e <USBH_Process+0x3c2>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	2200      	movs	r2, #0
 8007428:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 800742c:	2300      	movs	r3, #0
 800742e:	73fb      	strb	r3, [r7, #15]
 8007430:	e016      	b.n	8007460 <USBH_Process+0x2a4>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 8007432:	7bfa      	ldrb	r2, [r7, #15]
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	32de      	adds	r2, #222	; 0xde
 8007438:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800743c:	791a      	ldrb	r2, [r3, #4]
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	f893 3347 	ldrb.w	r3, [r3, #839]	; 0x347
 8007444:	429a      	cmp	r2, r3
 8007446:	d108      	bne.n	800745a <USBH_Process+0x29e>
          {
            phost->pActiveClass = phost->pClass[idx];
 8007448:	7bfa      	ldrb	r2, [r7, #15]
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	32de      	adds	r2, #222	; 0xde
 800744e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
            break;
 8007458:	e005      	b.n	8007466 <USBH_Process+0x2aa>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 800745a:	7bfb      	ldrb	r3, [r7, #15]
 800745c:	3301      	adds	r3, #1
 800745e:	73fb      	strb	r3, [r7, #15]
 8007460:	7bfb      	ldrb	r3, [r7, #15]
 8007462:	2b00      	cmp	r3, #0
 8007464:	d0e5      	beq.n	8007432 <USBH_Process+0x276>
          }
        }

        if (phost->pActiveClass != NULL)
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800746c:	2b00      	cmp	r3, #0
 800746e:	d016      	beq.n	800749e <USBH_Process+0x2e2>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007476:	689b      	ldr	r3, [r3, #8]
 8007478:	6878      	ldr	r0, [r7, #4]
 800747a:	4798      	blx	r3
 800747c:	4603      	mov	r3, r0
 800747e:	2b00      	cmp	r3, #0
 8007480:	d109      	bne.n	8007496 <USBH_Process+0x2da>
          {
            phost->gState = HOST_CLASS_REQUEST;
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	2206      	movs	r2, #6
 8007486:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800748e:	2103      	movs	r1, #3
 8007490:	6878      	ldr	r0, [r7, #4]
 8007492:	4798      	blx	r3
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8007494:	e073      	b.n	800757e <USBH_Process+0x3c2>
            phost->gState = HOST_ABORT_STATE;
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	220d      	movs	r2, #13
 800749a:	701a      	strb	r2, [r3, #0]
      break;
 800749c:	e06f      	b.n	800757e <USBH_Process+0x3c2>
          phost->gState = HOST_ABORT_STATE;
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	220d      	movs	r2, #13
 80074a2:	701a      	strb	r2, [r3, #0]
      break;
 80074a4:	e06b      	b.n	800757e <USBH_Process+0x3c2>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80074ac:	2b00      	cmp	r3, #0
 80074ae:	d017      	beq.n	80074e0 <USBH_Process+0x324>
      {
        status = phost->pActiveClass->Requests(phost);
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80074b6:	691b      	ldr	r3, [r3, #16]
 80074b8:	6878      	ldr	r0, [r7, #4]
 80074ba:	4798      	blx	r3
 80074bc:	4603      	mov	r3, r0
 80074be:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 80074c0:	7bbb      	ldrb	r3, [r7, #14]
 80074c2:	b2db      	uxtb	r3, r3
 80074c4:	2b00      	cmp	r3, #0
 80074c6:	d103      	bne.n	80074d0 <USBH_Process+0x314>
        {
          phost->gState = HOST_CLASS;
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	220b      	movs	r2, #11
 80074cc:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 80074ce:	e058      	b.n	8007582 <USBH_Process+0x3c6>
        else if (status == USBH_FAIL)
 80074d0:	7bbb      	ldrb	r3, [r7, #14]
 80074d2:	b2db      	uxtb	r3, r3
 80074d4:	2b02      	cmp	r3, #2
 80074d6:	d154      	bne.n	8007582 <USBH_Process+0x3c6>
          phost->gState = HOST_ABORT_STATE;
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	220d      	movs	r2, #13
 80074dc:	701a      	strb	r2, [r3, #0]
      break;
 80074de:	e050      	b.n	8007582 <USBH_Process+0x3c6>
        phost->gState = HOST_ABORT_STATE;
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	220d      	movs	r2, #13
 80074e4:	701a      	strb	r2, [r3, #0]
      break;
 80074e6:	e04c      	b.n	8007582 <USBH_Process+0x3c6>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80074ee:	2b00      	cmp	r3, #0
 80074f0:	d049      	beq.n	8007586 <USBH_Process+0x3ca>
      {
        phost->pActiveClass->BgndProcess(phost);
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80074f8:	695b      	ldr	r3, [r3, #20]
 80074fa:	6878      	ldr	r0, [r7, #4]
 80074fc:	4798      	blx	r3
      }
      break;
 80074fe:	e042      	b.n	8007586 <USBH_Process+0x3ca>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	2200      	movs	r2, #0
 8007504:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321

      (void)DeInitStateMachine(phost);
 8007508:	6878      	ldr	r0, [r7, #4]
 800750a:	f7ff fd67 	bl	8006fdc <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007514:	2b00      	cmp	r3, #0
 8007516:	d009      	beq.n	800752c <USBH_Process+0x370>
      {
        phost->pActiveClass->DeInit(phost);
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800751e:	68db      	ldr	r3, [r3, #12]
 8007520:	6878      	ldr	r0, [r7, #4]
 8007522:	4798      	blx	r3
        phost->pActiveClass = NULL;
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	2200      	movs	r2, #0
 8007528:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
      }

      if (phost->pUser != NULL)
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8007532:	2b00      	cmp	r3, #0
 8007534:	d005      	beq.n	8007542 <USBH_Process+0x386>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800753c:	2105      	movs	r1, #5
 800753e:	6878      	ldr	r0, [r7, #4]
 8007540:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	f893 3322 	ldrb.w	r3, [r3, #802]	; 0x322
 8007548:	b2db      	uxtb	r3, r3
 800754a:	2b01      	cmp	r3, #1
 800754c:	d107      	bne.n	800755e <USBH_Process+0x3a2>
      {
        phost->device.is_ReEnumerated = 0U;
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	2200      	movs	r2, #0
 8007552:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

        /* Start the host and re-enable Vbus */
        (void)USBH_Start(phost);
 8007556:	6878      	ldr	r0, [r7, #4]
 8007558:	f7ff fe20 	bl	800719c <USBH_Start>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800755c:	e014      	b.n	8007588 <USBH_Process+0x3cc>
        (void)USBH_LL_Start(phost);
 800755e:	6878      	ldr	r0, [r7, #4]
 8007560:	f001 faa4 	bl	8008aac <USBH_LL_Start>
      break;
 8007564:	e010      	b.n	8007588 <USBH_Process+0x3cc>

    case HOST_ABORT_STATE:
    default :
      break;
 8007566:	bf00      	nop
 8007568:	e00e      	b.n	8007588 <USBH_Process+0x3cc>
      break;
 800756a:	bf00      	nop
 800756c:	e00c      	b.n	8007588 <USBH_Process+0x3cc>
      break;
 800756e:	bf00      	nop
 8007570:	e00a      	b.n	8007588 <USBH_Process+0x3cc>
    break;
 8007572:	bf00      	nop
 8007574:	e008      	b.n	8007588 <USBH_Process+0x3cc>
      break;
 8007576:	bf00      	nop
 8007578:	e006      	b.n	8007588 <USBH_Process+0x3cc>
      break;
 800757a:	bf00      	nop
 800757c:	e004      	b.n	8007588 <USBH_Process+0x3cc>
      break;
 800757e:	bf00      	nop
 8007580:	e002      	b.n	8007588 <USBH_Process+0x3cc>
      break;
 8007582:	bf00      	nop
 8007584:	e000      	b.n	8007588 <USBH_Process+0x3cc>
      break;
 8007586:	bf00      	nop
  }
  return USBH_OK;
 8007588:	2300      	movs	r3, #0
}
 800758a:	4618      	mov	r0, r3
 800758c:	3710      	adds	r7, #16
 800758e:	46bd      	mov	sp, r7
 8007590:	bd80      	pop	{r7, pc}
 8007592:	bf00      	nop

08007594 <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 8007594:	b580      	push	{r7, lr}
 8007596:	b088      	sub	sp, #32
 8007598:	af04      	add	r7, sp, #16
 800759a:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 800759c:	2301      	movs	r3, #1
 800759e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 80075a0:	2301      	movs	r3, #1
 80075a2:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	785b      	ldrb	r3, [r3, #1]
 80075a8:	2b07      	cmp	r3, #7
 80075aa:	f200 81c1 	bhi.w	8007930 <USBH_HandleEnum+0x39c>
 80075ae:	a201      	add	r2, pc, #4	; (adr r2, 80075b4 <USBH_HandleEnum+0x20>)
 80075b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80075b4:	080075d5 	.word	0x080075d5
 80075b8:	08007693 	.word	0x08007693
 80075bc:	080076fd 	.word	0x080076fd
 80075c0:	0800778b 	.word	0x0800778b
 80075c4:	080077f5 	.word	0x080077f5
 80075c8:	08007865 	.word	0x08007865
 80075cc:	080078ab 	.word	0x080078ab
 80075d0:	080078f1 	.word	0x080078f1
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 80075d4:	2108      	movs	r1, #8
 80075d6:	6878      	ldr	r0, [r7, #4]
 80075d8:	f000 fa50 	bl	8007a7c <USBH_Get_DevDesc>
 80075dc:	4603      	mov	r3, r0
 80075de:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 80075e0:	7bbb      	ldrb	r3, [r7, #14]
 80075e2:	2b00      	cmp	r3, #0
 80075e4:	d130      	bne.n	8007648 <USBH_HandleEnum+0xb4>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	f893 232d 	ldrb.w	r2, [r3, #813]	; 0x32d
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	2201      	movs	r2, #1
 80075f4:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	7919      	ldrb	r1, [r3, #4]
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8007606:	687a      	ldr	r2, [r7, #4]
 8007608:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800760a:	b292      	uxth	r2, r2
 800760c:	9202      	str	r2, [sp, #8]
 800760e:	2200      	movs	r2, #0
 8007610:	9201      	str	r2, [sp, #4]
 8007612:	9300      	str	r3, [sp, #0]
 8007614:	4603      	mov	r3, r0
 8007616:	2280      	movs	r2, #128	; 0x80
 8007618:	6878      	ldr	r0, [r7, #4]
 800761a:	f001 f865 	bl	80086e8 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	7959      	ldrb	r1, [r3, #5]
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800762e:	687a      	ldr	r2, [r7, #4]
 8007630:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8007632:	b292      	uxth	r2, r2
 8007634:	9202      	str	r2, [sp, #8]
 8007636:	2200      	movs	r2, #0
 8007638:	9201      	str	r2, [sp, #4]
 800763a:	9300      	str	r3, [sp, #0]
 800763c:	4603      	mov	r3, r0
 800763e:	2200      	movs	r2, #0
 8007640:	6878      	ldr	r0, [r7, #4]
 8007642:	f001 f851 	bl	80086e8 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 8007646:	e175      	b.n	8007934 <USBH_HandleEnum+0x3a0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007648:	7bbb      	ldrb	r3, [r7, #14]
 800764a:	2b03      	cmp	r3, #3
 800764c:	f040 8172 	bne.w	8007934 <USBH_HandleEnum+0x3a0>
        phost->device.EnumCnt++;
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8007656:	3301      	adds	r3, #1
 8007658:	b2da      	uxtb	r2, r3
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8007666:	2b03      	cmp	r3, #3
 8007668:	d903      	bls.n	8007672 <USBH_HandleEnum+0xde>
          phost->gState = HOST_ABORT_STATE;
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	220d      	movs	r2, #13
 800766e:	701a      	strb	r2, [r3, #0]
      break;
 8007670:	e160      	b.n	8007934 <USBH_HandleEnum+0x3a0>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	795b      	ldrb	r3, [r3, #5]
 8007676:	4619      	mov	r1, r3
 8007678:	6878      	ldr	r0, [r7, #4]
 800767a:	f001 f885 	bl	8008788 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	791b      	ldrb	r3, [r3, #4]
 8007682:	4619      	mov	r1, r3
 8007684:	6878      	ldr	r0, [r7, #4]
 8007686:	f001 f87f 	bl	8008788 <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	2200      	movs	r2, #0
 800768e:	701a      	strb	r2, [r3, #0]
      break;
 8007690:	e150      	b.n	8007934 <USBH_HandleEnum+0x3a0>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 8007692:	2112      	movs	r1, #18
 8007694:	6878      	ldr	r0, [r7, #4]
 8007696:	f000 f9f1 	bl	8007a7c <USBH_Get_DevDesc>
 800769a:	4603      	mov	r3, r0
 800769c:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800769e:	7bbb      	ldrb	r3, [r7, #14]
 80076a0:	2b00      	cmp	r3, #0
 80076a2:	d103      	bne.n	80076ac <USBH_HandleEnum+0x118>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	2202      	movs	r2, #2
 80076a8:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 80076aa:	e145      	b.n	8007938 <USBH_HandleEnum+0x3a4>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 80076ac:	7bbb      	ldrb	r3, [r7, #14]
 80076ae:	2b03      	cmp	r3, #3
 80076b0:	f040 8142 	bne.w	8007938 <USBH_HandleEnum+0x3a4>
        phost->device.EnumCnt++;
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80076ba:	3301      	adds	r3, #1
 80076bc:	b2da      	uxtb	r2, r3
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80076ca:	2b03      	cmp	r3, #3
 80076cc:	d903      	bls.n	80076d6 <USBH_HandleEnum+0x142>
          phost->gState = HOST_ABORT_STATE;
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	220d      	movs	r2, #13
 80076d2:	701a      	strb	r2, [r3, #0]
      break;
 80076d4:	e130      	b.n	8007938 <USBH_HandleEnum+0x3a4>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	795b      	ldrb	r3, [r3, #5]
 80076da:	4619      	mov	r1, r3
 80076dc:	6878      	ldr	r0, [r7, #4]
 80076de:	f001 f853 	bl	8008788 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	791b      	ldrb	r3, [r3, #4]
 80076e6:	4619      	mov	r1, r3
 80076e8:	6878      	ldr	r0, [r7, #4]
 80076ea:	f001 f84d 	bl	8008788 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	2200      	movs	r2, #0
 80076f2:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	2200      	movs	r2, #0
 80076f8:	701a      	strb	r2, [r3, #0]
      break;
 80076fa:	e11d      	b.n	8007938 <USBH_HandleEnum+0x3a4>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 80076fc:	2101      	movs	r1, #1
 80076fe:	6878      	ldr	r0, [r7, #4]
 8007700:	f000 fa68 	bl	8007bd4 <USBH_SetAddress>
 8007704:	4603      	mov	r3, r0
 8007706:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8007708:	7bbb      	ldrb	r3, [r7, #14]
 800770a:	2b00      	cmp	r3, #0
 800770c:	d132      	bne.n	8007774 <USBH_HandleEnum+0x1e0>
      {
        USBH_Delay(2U);
 800770e:	2002      	movs	r0, #2
 8007710:	f001 fb30 	bl	8008d74 <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	2201      	movs	r2, #1
 8007718:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	2203      	movs	r2, #3
 8007720:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	7919      	ldrb	r1, [r3, #4]
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8007732:	687a      	ldr	r2, [r7, #4]
 8007734:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 8007736:	b292      	uxth	r2, r2
 8007738:	9202      	str	r2, [sp, #8]
 800773a:	2200      	movs	r2, #0
 800773c:	9201      	str	r2, [sp, #4]
 800773e:	9300      	str	r3, [sp, #0]
 8007740:	4603      	mov	r3, r0
 8007742:	2280      	movs	r2, #128	; 0x80
 8007744:	6878      	ldr	r0, [r7, #4]
 8007746:	f000 ffcf 	bl	80086e8 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	7959      	ldrb	r1, [r3, #5]
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800775a:	687a      	ldr	r2, [r7, #4]
 800775c:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800775e:	b292      	uxth	r2, r2
 8007760:	9202      	str	r2, [sp, #8]
 8007762:	2200      	movs	r2, #0
 8007764:	9201      	str	r2, [sp, #4]
 8007766:	9300      	str	r3, [sp, #0]
 8007768:	4603      	mov	r3, r0
 800776a:	2200      	movs	r2, #0
 800776c:	6878      	ldr	r0, [r7, #4]
 800776e:	f000 ffbb 	bl	80086e8 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 8007772:	e0e3      	b.n	800793c <USBH_HandleEnum+0x3a8>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007774:	7bbb      	ldrb	r3, [r7, #14]
 8007776:	2b03      	cmp	r3, #3
 8007778:	f040 80e0 	bne.w	800793c <USBH_HandleEnum+0x3a8>
        phost->gState = HOST_ABORT_STATE;
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	220d      	movs	r2, #13
 8007780:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 8007782:	687b      	ldr	r3, [r7, #4]
 8007784:	2200      	movs	r2, #0
 8007786:	705a      	strb	r2, [r3, #1]
      break;
 8007788:	e0d8      	b.n	800793c <USBH_HandleEnum+0x3a8>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 800778a:	2109      	movs	r1, #9
 800778c:	6878      	ldr	r0, [r7, #4]
 800778e:	f000 f99d 	bl	8007acc <USBH_Get_CfgDesc>
 8007792:	4603      	mov	r3, r0
 8007794:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8007796:	7bbb      	ldrb	r3, [r7, #14]
 8007798:	2b00      	cmp	r3, #0
 800779a:	d103      	bne.n	80077a4 <USBH_HandleEnum+0x210>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	2204      	movs	r2, #4
 80077a0:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 80077a2:	e0cd      	b.n	8007940 <USBH_HandleEnum+0x3ac>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 80077a4:	7bbb      	ldrb	r3, [r7, #14]
 80077a6:	2b03      	cmp	r3, #3
 80077a8:	f040 80ca 	bne.w	8007940 <USBH_HandleEnum+0x3ac>
        phost->device.EnumCnt++;
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80077b2:	3301      	adds	r3, #1
 80077b4:	b2da      	uxtb	r2, r3
 80077b6:	687b      	ldr	r3, [r7, #4]
 80077b8:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80077c2:	2b03      	cmp	r3, #3
 80077c4:	d903      	bls.n	80077ce <USBH_HandleEnum+0x23a>
          phost->gState = HOST_ABORT_STATE;
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	220d      	movs	r2, #13
 80077ca:	701a      	strb	r2, [r3, #0]
      break;
 80077cc:	e0b8      	b.n	8007940 <USBH_HandleEnum+0x3ac>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	795b      	ldrb	r3, [r3, #5]
 80077d2:	4619      	mov	r1, r3
 80077d4:	6878      	ldr	r0, [r7, #4]
 80077d6:	f000 ffd7 	bl	8008788 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	791b      	ldrb	r3, [r3, #4]
 80077de:	4619      	mov	r1, r3
 80077e0:	6878      	ldr	r0, [r7, #4]
 80077e2:	f000 ffd1 	bl	8008788 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	2200      	movs	r2, #0
 80077ea:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	2200      	movs	r2, #0
 80077f0:	701a      	strb	r2, [r3, #0]
      break;
 80077f2:	e0a5      	b.n	8007940 <USBH_HandleEnum+0x3ac>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	f8b3 333a 	ldrh.w	r3, [r3, #826]	; 0x33a
 80077fa:	4619      	mov	r1, r3
 80077fc:	6878      	ldr	r0, [r7, #4]
 80077fe:	f000 f965 	bl	8007acc <USBH_Get_CfgDesc>
 8007802:	4603      	mov	r3, r0
 8007804:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8007806:	7bbb      	ldrb	r3, [r7, #14]
 8007808:	2b00      	cmp	r3, #0
 800780a:	d103      	bne.n	8007814 <USBH_HandleEnum+0x280>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	2205      	movs	r2, #5
 8007810:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8007812:	e097      	b.n	8007944 <USBH_HandleEnum+0x3b0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007814:	7bbb      	ldrb	r3, [r7, #14]
 8007816:	2b03      	cmp	r3, #3
 8007818:	f040 8094 	bne.w	8007944 <USBH_HandleEnum+0x3b0>
        phost->device.EnumCnt++;
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8007822:	3301      	adds	r3, #1
 8007824:	b2da      	uxtb	r2, r3
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8007832:	2b03      	cmp	r3, #3
 8007834:	d903      	bls.n	800783e <USBH_HandleEnum+0x2aa>
          phost->gState = HOST_ABORT_STATE;
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	220d      	movs	r2, #13
 800783a:	701a      	strb	r2, [r3, #0]
      break;
 800783c:	e082      	b.n	8007944 <USBH_HandleEnum+0x3b0>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	795b      	ldrb	r3, [r3, #5]
 8007842:	4619      	mov	r1, r3
 8007844:	6878      	ldr	r0, [r7, #4]
 8007846:	f000 ff9f 	bl	8008788 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	791b      	ldrb	r3, [r3, #4]
 800784e:	4619      	mov	r1, r3
 8007850:	6878      	ldr	r0, [r7, #4]
 8007852:	f000 ff99 	bl	8008788 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	2200      	movs	r2, #0
 800785a:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800785c:	687b      	ldr	r3, [r7, #4]
 800785e:	2200      	movs	r2, #0
 8007860:	701a      	strb	r2, [r3, #0]
      break;
 8007862:	e06f      	b.n	8007944 <USBH_HandleEnum+0x3b0>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	f893 3334 	ldrb.w	r3, [r3, #820]	; 0x334
 800786a:	2b00      	cmp	r3, #0
 800786c:	d019      	beq.n	80078a2 <USBH_HandleEnum+0x30e>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	f893 1334 	ldrb.w	r1, [r3, #820]	; 0x334
                                        phost->device.Data, 0xFFU);
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 800787a:	23ff      	movs	r3, #255	; 0xff
 800787c:	6878      	ldr	r0, [r7, #4]
 800787e:	f000 f949 	bl	8007b14 <USBH_Get_StringDesc>
 8007882:	4603      	mov	r3, r0
 8007884:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8007886:	7bbb      	ldrb	r3, [r7, #14]
 8007888:	2b00      	cmp	r3, #0
 800788a:	d103      	bne.n	8007894 <USBH_HandleEnum+0x300>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	2206      	movs	r2, #6
 8007890:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8007892:	e059      	b.n	8007948 <USBH_HandleEnum+0x3b4>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007894:	7bbb      	ldrb	r3, [r7, #14]
 8007896:	2b03      	cmp	r3, #3
 8007898:	d156      	bne.n	8007948 <USBH_HandleEnum+0x3b4>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	2206      	movs	r2, #6
 800789e:	705a      	strb	r2, [r3, #1]
      break;
 80078a0:	e052      	b.n	8007948 <USBH_HandleEnum+0x3b4>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 80078a2:	687b      	ldr	r3, [r7, #4]
 80078a4:	2206      	movs	r2, #6
 80078a6:	705a      	strb	r2, [r3, #1]
      break;
 80078a8:	e04e      	b.n	8007948 <USBH_HandleEnum+0x3b4>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	f893 3335 	ldrb.w	r3, [r3, #821]	; 0x335
 80078b0:	2b00      	cmp	r3, #0
 80078b2:	d019      	beq.n	80078e8 <USBH_HandleEnum+0x354>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	f893 1335 	ldrb.w	r1, [r3, #821]	; 0x335
                                        phost->device.Data, 0xFFU);
 80078ba:	687b      	ldr	r3, [r7, #4]
 80078bc:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 80078c0:	23ff      	movs	r3, #255	; 0xff
 80078c2:	6878      	ldr	r0, [r7, #4]
 80078c4:	f000 f926 	bl	8007b14 <USBH_Get_StringDesc>
 80078c8:	4603      	mov	r3, r0
 80078ca:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 80078cc:	7bbb      	ldrb	r3, [r7, #14]
 80078ce:	2b00      	cmp	r3, #0
 80078d0:	d103      	bne.n	80078da <USBH_HandleEnum+0x346>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	2207      	movs	r2, #7
 80078d6:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 80078d8:	e038      	b.n	800794c <USBH_HandleEnum+0x3b8>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 80078da:	7bbb      	ldrb	r3, [r7, #14]
 80078dc:	2b03      	cmp	r3, #3
 80078de:	d135      	bne.n	800794c <USBH_HandleEnum+0x3b8>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	2207      	movs	r2, #7
 80078e4:	705a      	strb	r2, [r3, #1]
      break;
 80078e6:	e031      	b.n	800794c <USBH_HandleEnum+0x3b8>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	2207      	movs	r2, #7
 80078ec:	705a      	strb	r2, [r3, #1]
      break;
 80078ee:	e02d      	b.n	800794c <USBH_HandleEnum+0x3b8>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	f893 3336 	ldrb.w	r3, [r3, #822]	; 0x336
 80078f6:	2b00      	cmp	r3, #0
 80078f8:	d017      	beq.n	800792a <USBH_HandleEnum+0x396>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	f893 1336 	ldrb.w	r1, [r3, #822]	; 0x336
                                        phost->device.Data, 0xFFU);
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 8007906:	23ff      	movs	r3, #255	; 0xff
 8007908:	6878      	ldr	r0, [r7, #4]
 800790a:	f000 f903 	bl	8007b14 <USBH_Get_StringDesc>
 800790e:	4603      	mov	r3, r0
 8007910:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8007912:	7bbb      	ldrb	r3, [r7, #14]
 8007914:	2b00      	cmp	r3, #0
 8007916:	d102      	bne.n	800791e <USBH_HandleEnum+0x38a>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 8007918:	2300      	movs	r3, #0
 800791a:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 800791c:	e018      	b.n	8007950 <USBH_HandleEnum+0x3bc>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800791e:	7bbb      	ldrb	r3, [r7, #14]
 8007920:	2b03      	cmp	r3, #3
 8007922:	d115      	bne.n	8007950 <USBH_HandleEnum+0x3bc>
          Status = USBH_OK;
 8007924:	2300      	movs	r3, #0
 8007926:	73fb      	strb	r3, [r7, #15]
      break;
 8007928:	e012      	b.n	8007950 <USBH_HandleEnum+0x3bc>
        Status = USBH_OK;
 800792a:	2300      	movs	r3, #0
 800792c:	73fb      	strb	r3, [r7, #15]
      break;
 800792e:	e00f      	b.n	8007950 <USBH_HandleEnum+0x3bc>

    default:
      break;
 8007930:	bf00      	nop
 8007932:	e00e      	b.n	8007952 <USBH_HandleEnum+0x3be>
      break;
 8007934:	bf00      	nop
 8007936:	e00c      	b.n	8007952 <USBH_HandleEnum+0x3be>
      break;
 8007938:	bf00      	nop
 800793a:	e00a      	b.n	8007952 <USBH_HandleEnum+0x3be>
      break;
 800793c:	bf00      	nop
 800793e:	e008      	b.n	8007952 <USBH_HandleEnum+0x3be>
      break;
 8007940:	bf00      	nop
 8007942:	e006      	b.n	8007952 <USBH_HandleEnum+0x3be>
      break;
 8007944:	bf00      	nop
 8007946:	e004      	b.n	8007952 <USBH_HandleEnum+0x3be>
      break;
 8007948:	bf00      	nop
 800794a:	e002      	b.n	8007952 <USBH_HandleEnum+0x3be>
      break;
 800794c:	bf00      	nop
 800794e:	e000      	b.n	8007952 <USBH_HandleEnum+0x3be>
      break;
 8007950:	bf00      	nop
  }
  return Status;
 8007952:	7bfb      	ldrb	r3, [r7, #15]
}
 8007954:	4618      	mov	r0, r3
 8007956:	3710      	adds	r7, #16
 8007958:	46bd      	mov	sp, r7
 800795a:	bd80      	pop	{r7, pc}

0800795c <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 800795c:	b480      	push	{r7}
 800795e:	b083      	sub	sp, #12
 8007960:	af00      	add	r7, sp, #0
 8007962:	6078      	str	r0, [r7, #4]
 8007964:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 8007966:	687b      	ldr	r3, [r7, #4]
 8007968:	683a      	ldr	r2, [r7, #0]
 800796a:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
}
 800796e:	bf00      	nop
 8007970:	370c      	adds	r7, #12
 8007972:	46bd      	mov	sp, r7
 8007974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007978:	4770      	bx	lr

0800797a <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 800797a:	b580      	push	{r7, lr}
 800797c:	b082      	sub	sp, #8
 800797e:	af00      	add	r7, sp, #0
 8007980:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8007988:	1c5a      	adds	r2, r3, #1
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
  USBH_HandleSof(phost);
 8007990:	6878      	ldr	r0, [r7, #4]
 8007992:	f000 f804 	bl	800799e <USBH_HandleSof>
}
 8007996:	bf00      	nop
 8007998:	3708      	adds	r7, #8
 800799a:	46bd      	mov	sp, r7
 800799c:	bd80      	pop	{r7, pc}

0800799e <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 800799e:	b580      	push	{r7, lr}
 80079a0:	b082      	sub	sp, #8
 80079a2:	af00      	add	r7, sp, #0
 80079a4:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 80079a6:	687b      	ldr	r3, [r7, #4]
 80079a8:	781b      	ldrb	r3, [r3, #0]
 80079aa:	b2db      	uxtb	r3, r3
 80079ac:	2b0b      	cmp	r3, #11
 80079ae:	d10a      	bne.n	80079c6 <USBH_HandleSof+0x28>
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80079b6:	2b00      	cmp	r3, #0
 80079b8:	d005      	beq.n	80079c6 <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80079c0:	699b      	ldr	r3, [r3, #24]
 80079c2:	6878      	ldr	r0, [r7, #4]
 80079c4:	4798      	blx	r3
  }
}
 80079c6:	bf00      	nop
 80079c8:	3708      	adds	r7, #8
 80079ca:	46bd      	mov	sp, r7
 80079cc:	bd80      	pop	{r7, pc}

080079ce <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 80079ce:	b480      	push	{r7}
 80079d0:	b083      	sub	sp, #12
 80079d2:	af00      	add	r7, sp, #0
 80079d4:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 80079d6:	687b      	ldr	r3, [r7, #4]
 80079d8:	2201      	movs	r2, #1
 80079da:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return;
 80079de:	bf00      	nop
}
 80079e0:	370c      	adds	r7, #12
 80079e2:	46bd      	mov	sp, r7
 80079e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079e8:	4770      	bx	lr

080079ea <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 80079ea:	b480      	push	{r7}
 80079ec:	b083      	sub	sp, #12
 80079ee:	af00      	add	r7, sp, #0
 80079f0:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	2200      	movs	r2, #0
 80079f6:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 80079fa:	bf00      	nop
}
 80079fc:	370c      	adds	r7, #12
 80079fe:	46bd      	mov	sp, r7
 8007a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a04:	4770      	bx	lr

08007a06 <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 8007a06:	b480      	push	{r7}
 8007a08:	b083      	sub	sp, #12
 8007a0a:	af00      	add	r7, sp, #0
 8007a0c:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 8007a0e:	687b      	ldr	r3, [r7, #4]
 8007a10:	2201      	movs	r2, #1
 8007a12:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	2200      	movs	r2, #0
 8007a1a:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	2200      	movs	r2, #0
 8007a22:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 8007a26:	2300      	movs	r3, #0
}
 8007a28:	4618      	mov	r0, r3
 8007a2a:	370c      	adds	r7, #12
 8007a2c:	46bd      	mov	sp, r7
 8007a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a32:	4770      	bx	lr

08007a34 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 8007a34:	b580      	push	{r7, lr}
 8007a36:	b082      	sub	sp, #8
 8007a38:	af00      	add	r7, sp, #0
 8007a3a:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	2201      	movs	r2, #1
 8007a40:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	2200      	movs	r2, #0
 8007a48:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	2200      	movs	r2, #0
 8007a50:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  (void)USBH_LL_Stop(phost);
 8007a54:	6878      	ldr	r0, [r7, #4]
 8007a56:	f001 f844 	bl	8008ae2 <USBH_LL_Stop>

  /* FRee Control Pipes */
  (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	791b      	ldrb	r3, [r3, #4]
 8007a5e:	4619      	mov	r1, r3
 8007a60:	6878      	ldr	r0, [r7, #4]
 8007a62:	f000 fe91 	bl	8008788 <USBH_FreePipe>
  (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	795b      	ldrb	r3, [r3, #5]
 8007a6a:	4619      	mov	r1, r3
 8007a6c:	6878      	ldr	r0, [r7, #4]
 8007a6e:	f000 fe8b 	bl	8008788 <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 8007a72:	2300      	movs	r3, #0
}
 8007a74:	4618      	mov	r0, r3
 8007a76:	3708      	adds	r7, #8
 8007a78:	46bd      	mov	sp, r7
 8007a7a:	bd80      	pop	{r7, pc}

08007a7c <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint8_t length)
{
 8007a7c:	b580      	push	{r7, lr}
 8007a7e:	b086      	sub	sp, #24
 8007a80:	af02      	add	r7, sp, #8
 8007a82:	6078      	str	r0, [r7, #4]
 8007a84:	460b      	mov	r3, r1
 8007a86:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status;

  status = USBH_GetDescriptor(phost,
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_DEVICE, phost->device.Data,
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	f503 728e 	add.w	r2, r3, #284	; 0x11c
  status = USBH_GetDescriptor(phost,
 8007a8e:	78fb      	ldrb	r3, [r7, #3]
 8007a90:	b29b      	uxth	r3, r3
 8007a92:	9300      	str	r3, [sp, #0]
 8007a94:	4613      	mov	r3, r2
 8007a96:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007a9a:	2100      	movs	r1, #0
 8007a9c:	6878      	ldr	r0, [r7, #4]
 8007a9e:	f000 f864 	bl	8007b6a <USBH_GetDescriptor>
 8007aa2:	4603      	mov	r3, r0
 8007aa4:	73fb      	strb	r3, [r7, #15]
                              (uint16_t)length);

  if (status == USBH_OK)
 8007aa6:	7bfb      	ldrb	r3, [r7, #15]
 8007aa8:	2b00      	cmp	r3, #0
 8007aaa:	d10a      	bne.n	8007ac2 <USBH_Get_DevDesc+0x46>
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseDevDesc(&phost->device.DevDesc, phost->device.Data,
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	f203 3026 	addw	r0, r3, #806	; 0x326
 8007ab2:	687b      	ldr	r3, [r7, #4]
 8007ab4:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8007ab8:	78fa      	ldrb	r2, [r7, #3]
 8007aba:	b292      	uxth	r2, r2
 8007abc:	4619      	mov	r1, r3
 8007abe:	f000 f918 	bl	8007cf2 <USBH_ParseDevDesc>
                      (uint16_t)length);
  }

  return status;
 8007ac2:	7bfb      	ldrb	r3, [r7, #15]
}
 8007ac4:	4618      	mov	r0, r3
 8007ac6:	3710      	adds	r7, #16
 8007ac8:	46bd      	mov	sp, r7
 8007aca:	bd80      	pop	{r7, pc}

08007acc <USBH_Get_CfgDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost,
                                    uint16_t length)

{
 8007acc:	b580      	push	{r7, lr}
 8007ace:	b086      	sub	sp, #24
 8007ad0:	af02      	add	r7, sp, #8
 8007ad2:	6078      	str	r0, [r7, #4]
 8007ad4:	460b      	mov	r3, r1
 8007ad6:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	331c      	adds	r3, #28
 8007adc:	60bb      	str	r3, [r7, #8]

  status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 8007ade:	887b      	ldrh	r3, [r7, #2]
 8007ae0:	9300      	str	r3, [sp, #0]
 8007ae2:	68bb      	ldr	r3, [r7, #8]
 8007ae4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007ae8:	2100      	movs	r1, #0
 8007aea:	6878      	ldr	r0, [r7, #4]
 8007aec:	f000 f83d 	bl	8007b6a <USBH_GetDescriptor>
 8007af0:	4603      	mov	r3, r0
 8007af2:	73fb      	strb	r3, [r7, #15]
                              USB_DESC_CONFIGURATION, pData, length);

  if (status == USBH_OK)
 8007af4:	7bfb      	ldrb	r3, [r7, #15]
 8007af6:	2b00      	cmp	r3, #0
 8007af8:	d107      	bne.n	8007b0a <USBH_Get_CfgDesc+0x3e>
  {
    /* Commands successfully sent and Response Received  */
    status = USBH_ParseCfgDesc(phost, pData, length);
 8007afa:	887b      	ldrh	r3, [r7, #2]
 8007afc:	461a      	mov	r2, r3
 8007afe:	68b9      	ldr	r1, [r7, #8]
 8007b00:	6878      	ldr	r0, [r7, #4]
 8007b02:	f000 f987 	bl	8007e14 <USBH_ParseCfgDesc>
 8007b06:	4603      	mov	r3, r0
 8007b08:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8007b0a:	7bfb      	ldrb	r3, [r7, #15]
}
 8007b0c:	4618      	mov	r0, r3
 8007b0e:	3710      	adds	r7, #16
 8007b10:	46bd      	mov	sp, r7
 8007b12:	bd80      	pop	{r7, pc}

08007b14 <USBH_Get_StringDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost,
                                       uint8_t string_index, uint8_t *buff,
                                       uint16_t length)
{
 8007b14:	b580      	push	{r7, lr}
 8007b16:	b088      	sub	sp, #32
 8007b18:	af02      	add	r7, sp, #8
 8007b1a:	60f8      	str	r0, [r7, #12]
 8007b1c:	607a      	str	r2, [r7, #4]
 8007b1e:	461a      	mov	r2, r3
 8007b20:	460b      	mov	r3, r1
 8007b22:	72fb      	strb	r3, [r7, #11]
 8007b24:	4613      	mov	r3, r2
 8007b26:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  status = USBH_GetDescriptor(phost,
 8007b28:	7afb      	ldrb	r3, [r7, #11]
 8007b2a:	b29b      	uxth	r3, r3
 8007b2c:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8007b30:	b29a      	uxth	r2, r3
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_STRING | string_index,
                              phost->device.Data, length);
 8007b32:	68fb      	ldr	r3, [r7, #12]
 8007b34:	f503 718e 	add.w	r1, r3, #284	; 0x11c
  status = USBH_GetDescriptor(phost,
 8007b38:	893b      	ldrh	r3, [r7, #8]
 8007b3a:	9300      	str	r3, [sp, #0]
 8007b3c:	460b      	mov	r3, r1
 8007b3e:	2100      	movs	r1, #0
 8007b40:	68f8      	ldr	r0, [r7, #12]
 8007b42:	f000 f812 	bl	8007b6a <USBH_GetDescriptor>
 8007b46:	4603      	mov	r3, r0
 8007b48:	75fb      	strb	r3, [r7, #23]

  if (status == USBH_OK)
 8007b4a:	7dfb      	ldrb	r3, [r7, #23]
 8007b4c:	2b00      	cmp	r3, #0
 8007b4e:	d107      	bne.n	8007b60 <USBH_Get_StringDesc+0x4c>
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 8007b50:	68fb      	ldr	r3, [r7, #12]
 8007b52:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8007b56:	893a      	ldrh	r2, [r7, #8]
 8007b58:	6879      	ldr	r1, [r7, #4]
 8007b5a:	4618      	mov	r0, r3
 8007b5c:	f000 fb24 	bl	80081a8 <USBH_ParseStringDesc>
  }

  return status;
 8007b60:	7dfb      	ldrb	r3, [r7, #23]
}
 8007b62:	4618      	mov	r0, r3
 8007b64:	3718      	adds	r7, #24
 8007b66:	46bd      	mov	sp, r7
 8007b68:	bd80      	pop	{r7, pc}

08007b6a <USBH_GetDescriptor>:
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost,
                                      uint8_t  req_type,
                                      uint16_t value_idx,
                                      uint8_t *buff,
                                      uint16_t length)
{
 8007b6a:	b580      	push	{r7, lr}
 8007b6c:	b084      	sub	sp, #16
 8007b6e:	af00      	add	r7, sp, #0
 8007b70:	60f8      	str	r0, [r7, #12]
 8007b72:	607b      	str	r3, [r7, #4]
 8007b74:	460b      	mov	r3, r1
 8007b76:	72fb      	strb	r3, [r7, #11]
 8007b78:	4613      	mov	r3, r2
 8007b7a:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 8007b7c:	68fb      	ldr	r3, [r7, #12]
 8007b7e:	789b      	ldrb	r3, [r3, #2]
 8007b80:	2b01      	cmp	r3, #1
 8007b82:	d11c      	bne.n	8007bbe <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 8007b84:	7afb      	ldrb	r3, [r7, #11]
 8007b86:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8007b8a:	b2da      	uxtb	r2, r3
 8007b8c:	68fb      	ldr	r3, [r7, #12]
 8007b8e:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 8007b90:	68fb      	ldr	r3, [r7, #12]
 8007b92:	2206      	movs	r2, #6
 8007b94:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 8007b96:	68fb      	ldr	r3, [r7, #12]
 8007b98:	893a      	ldrh	r2, [r7, #8]
 8007b9a:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 8007b9c:	893b      	ldrh	r3, [r7, #8]
 8007b9e:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8007ba2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007ba6:	d104      	bne.n	8007bb2 <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 8007ba8:	68fb      	ldr	r3, [r7, #12]
 8007baa:	f240 4209 	movw	r2, #1033	; 0x409
 8007bae:	829a      	strh	r2, [r3, #20]
 8007bb0:	e002      	b.n	8007bb8 <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 8007bb2:	68fb      	ldr	r3, [r7, #12]
 8007bb4:	2200      	movs	r2, #0
 8007bb6:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 8007bb8:	68fb      	ldr	r3, [r7, #12]
 8007bba:	8b3a      	ldrh	r2, [r7, #24]
 8007bbc:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 8007bbe:	8b3b      	ldrh	r3, [r7, #24]
 8007bc0:	461a      	mov	r2, r3
 8007bc2:	6879      	ldr	r1, [r7, #4]
 8007bc4:	68f8      	ldr	r0, [r7, #12]
 8007bc6:	f000 fb3d 	bl	8008244 <USBH_CtlReq>
 8007bca:	4603      	mov	r3, r0
}
 8007bcc:	4618      	mov	r0, r3
 8007bce:	3710      	adds	r7, #16
 8007bd0:	46bd      	mov	sp, r7
 8007bd2:	bd80      	pop	{r7, pc}

08007bd4 <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 8007bd4:	b580      	push	{r7, lr}
 8007bd6:	b082      	sub	sp, #8
 8007bd8:	af00      	add	r7, sp, #0
 8007bda:	6078      	str	r0, [r7, #4]
 8007bdc:	460b      	mov	r3, r1
 8007bde:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	789b      	ldrb	r3, [r3, #2]
 8007be4:	2b01      	cmp	r3, #1
 8007be6:	d10f      	bne.n	8007c08 <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	2200      	movs	r2, #0
 8007bec:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 8007bee:	687b      	ldr	r3, [r7, #4]
 8007bf0:	2205      	movs	r2, #5
 8007bf2:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 8007bf4:	78fb      	ldrb	r3, [r7, #3]
 8007bf6:	b29a      	uxth	r2, r3
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	2200      	movs	r2, #0
 8007c00:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8007c02:	687b      	ldr	r3, [r7, #4]
 8007c04:	2200      	movs	r2, #0
 8007c06:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8007c08:	2200      	movs	r2, #0
 8007c0a:	2100      	movs	r1, #0
 8007c0c:	6878      	ldr	r0, [r7, #4]
 8007c0e:	f000 fb19 	bl	8008244 <USBH_CtlReq>
 8007c12:	4603      	mov	r3, r0
}
 8007c14:	4618      	mov	r0, r3
 8007c16:	3708      	adds	r7, #8
 8007c18:	46bd      	mov	sp, r7
 8007c1a:	bd80      	pop	{r7, pc}

08007c1c <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 8007c1c:	b580      	push	{r7, lr}
 8007c1e:	b082      	sub	sp, #8
 8007c20:	af00      	add	r7, sp, #0
 8007c22:	6078      	str	r0, [r7, #4]
 8007c24:	460b      	mov	r3, r1
 8007c26:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	789b      	ldrb	r3, [r3, #2]
 8007c2c:	2b01      	cmp	r3, #1
 8007c2e:	d10e      	bne.n	8007c4e <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	2200      	movs	r2, #0
 8007c34:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 8007c36:	687b      	ldr	r3, [r7, #4]
 8007c38:	2209      	movs	r2, #9
 8007c3a:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 8007c3c:	687b      	ldr	r3, [r7, #4]
 8007c3e:	887a      	ldrh	r2, [r7, #2]
 8007c40:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8007c42:	687b      	ldr	r3, [r7, #4]
 8007c44:	2200      	movs	r2, #0
 8007c46:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	2200      	movs	r2, #0
 8007c4c:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8007c4e:	2200      	movs	r2, #0
 8007c50:	2100      	movs	r1, #0
 8007c52:	6878      	ldr	r0, [r7, #4]
 8007c54:	f000 faf6 	bl	8008244 <USBH_CtlReq>
 8007c58:	4603      	mov	r3, r0
}
 8007c5a:	4618      	mov	r0, r3
 8007c5c:	3708      	adds	r7, #8
 8007c5e:	46bd      	mov	sp, r7
 8007c60:	bd80      	pop	{r7, pc}

08007c62 <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
  */
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 8007c62:	b580      	push	{r7, lr}
 8007c64:	b082      	sub	sp, #8
 8007c66:	af00      	add	r7, sp, #0
 8007c68:	6078      	str	r0, [r7, #4]
 8007c6a:	460b      	mov	r3, r1
 8007c6c:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8007c6e:	687b      	ldr	r3, [r7, #4]
 8007c70:	789b      	ldrb	r3, [r3, #2]
 8007c72:	2b01      	cmp	r3, #1
 8007c74:	d10f      	bne.n	8007c96 <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	2200      	movs	r2, #0
 8007c7a:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	2203      	movs	r2, #3
 8007c80:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 8007c82:	78fb      	ldrb	r3, [r7, #3]
 8007c84:	b29a      	uxth	r2, r3
 8007c86:	687b      	ldr	r3, [r7, #4]
 8007c88:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8007c8a:	687b      	ldr	r3, [r7, #4]
 8007c8c:	2200      	movs	r2, #0
 8007c8e:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	2200      	movs	r2, #0
 8007c94:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8007c96:	2200      	movs	r2, #0
 8007c98:	2100      	movs	r1, #0
 8007c9a:	6878      	ldr	r0, [r7, #4]
 8007c9c:	f000 fad2 	bl	8008244 <USBH_CtlReq>
 8007ca0:	4603      	mov	r3, r0
}
 8007ca2:	4618      	mov	r0, r3
 8007ca4:	3708      	adds	r7, #8
 8007ca6:	46bd      	mov	sp, r7
 8007ca8:	bd80      	pop	{r7, pc}

08007caa <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 8007caa:	b580      	push	{r7, lr}
 8007cac:	b082      	sub	sp, #8
 8007cae:	af00      	add	r7, sp, #0
 8007cb0:	6078      	str	r0, [r7, #4]
 8007cb2:	460b      	mov	r3, r1
 8007cb4:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8007cb6:	687b      	ldr	r3, [r7, #4]
 8007cb8:	789b      	ldrb	r3, [r3, #2]
 8007cba:	2b01      	cmp	r3, #1
 8007cbc:	d10f      	bne.n	8007cde <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 8007cbe:	687b      	ldr	r3, [r7, #4]
 8007cc0:	2202      	movs	r2, #2
 8007cc2:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 8007cc4:	687b      	ldr	r3, [r7, #4]
 8007cc6:	2201      	movs	r2, #1
 8007cc8:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 8007cca:	687b      	ldr	r3, [r7, #4]
 8007ccc:	2200      	movs	r2, #0
 8007cce:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 8007cd0:	78fb      	ldrb	r3, [r7, #3]
 8007cd2:	b29a      	uxth	r2, r3
 8007cd4:	687b      	ldr	r3, [r7, #4]
 8007cd6:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	2200      	movs	r2, #0
 8007cdc:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, NULL, 0U);
 8007cde:	2200      	movs	r2, #0
 8007ce0:	2100      	movs	r1, #0
 8007ce2:	6878      	ldr	r0, [r7, #4]
 8007ce4:	f000 faae 	bl	8008244 <USBH_CtlReq>
 8007ce8:	4603      	mov	r3, r0
}
 8007cea:	4618      	mov	r0, r3
 8007cec:	3708      	adds	r7, #8
 8007cee:	46bd      	mov	sp, r7
 8007cf0:	bd80      	pop	{r7, pc}

08007cf2 <USBH_ParseDevDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void  USBH_ParseDevDesc(USBH_DevDescTypeDef *dev_desc, uint8_t *buf,
                               uint16_t length)
{
 8007cf2:	b480      	push	{r7}
 8007cf4:	b085      	sub	sp, #20
 8007cf6:	af00      	add	r7, sp, #0
 8007cf8:	60f8      	str	r0, [r7, #12]
 8007cfa:	60b9      	str	r1, [r7, #8]
 8007cfc:	4613      	mov	r3, r2
 8007cfe:	80fb      	strh	r3, [r7, #6]
  dev_desc->bLength            = *(uint8_t *)(buf +  0);
 8007d00:	68bb      	ldr	r3, [r7, #8]
 8007d02:	781a      	ldrb	r2, [r3, #0]
 8007d04:	68fb      	ldr	r3, [r7, #12]
 8007d06:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1);
 8007d08:	68bb      	ldr	r3, [r7, #8]
 8007d0a:	785a      	ldrb	r2, [r3, #1]
 8007d0c:	68fb      	ldr	r3, [r7, #12]
 8007d0e:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2);
 8007d10:	68bb      	ldr	r3, [r7, #8]
 8007d12:	3302      	adds	r3, #2
 8007d14:	781b      	ldrb	r3, [r3, #0]
 8007d16:	b29a      	uxth	r2, r3
 8007d18:	68bb      	ldr	r3, [r7, #8]
 8007d1a:	3303      	adds	r3, #3
 8007d1c:	781b      	ldrb	r3, [r3, #0]
 8007d1e:	b29b      	uxth	r3, r3
 8007d20:	021b      	lsls	r3, r3, #8
 8007d22:	b29b      	uxth	r3, r3
 8007d24:	4313      	orrs	r3, r2
 8007d26:	b29a      	uxth	r2, r3
 8007d28:	68fb      	ldr	r3, [r7, #12]
 8007d2a:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4);
 8007d2c:	68bb      	ldr	r3, [r7, #8]
 8007d2e:	791a      	ldrb	r2, [r3, #4]
 8007d30:	68fb      	ldr	r3, [r7, #12]
 8007d32:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5);
 8007d34:	68bb      	ldr	r3, [r7, #8]
 8007d36:	795a      	ldrb	r2, [r3, #5]
 8007d38:	68fb      	ldr	r3, [r7, #12]
 8007d3a:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6);
 8007d3c:	68bb      	ldr	r3, [r7, #8]
 8007d3e:	799a      	ldrb	r2, [r3, #6]
 8007d40:	68fb      	ldr	r3, [r7, #12]
 8007d42:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7);
 8007d44:	68bb      	ldr	r3, [r7, #8]
 8007d46:	79da      	ldrb	r2, [r3, #7]
 8007d48:	68fb      	ldr	r3, [r7, #12]
 8007d4a:	71da      	strb	r2, [r3, #7]

  /* Make sure that the max packet size is either 8, 16, 32, 64 or force it to 64 */
  switch (dev_desc->bMaxPacketSize)
 8007d4c:	68fb      	ldr	r3, [r7, #12]
 8007d4e:	79db      	ldrb	r3, [r3, #7]
 8007d50:	2b20      	cmp	r3, #32
 8007d52:	dc11      	bgt.n	8007d78 <USBH_ParseDevDesc+0x86>
 8007d54:	2b08      	cmp	r3, #8
 8007d56:	db16      	blt.n	8007d86 <USBH_ParseDevDesc+0x94>
 8007d58:	3b08      	subs	r3, #8
 8007d5a:	2201      	movs	r2, #1
 8007d5c:	fa02 f303 	lsl.w	r3, r2, r3
 8007d60:	f003 3301 	and.w	r3, r3, #16843009	; 0x1010101
 8007d64:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007d68:	2b00      	cmp	r3, #0
 8007d6a:	bf14      	ite	ne
 8007d6c:	2301      	movne	r3, #1
 8007d6e:	2300      	moveq	r3, #0
 8007d70:	b2db      	uxtb	r3, r3
 8007d72:	2b00      	cmp	r3, #0
 8007d74:	d102      	bne.n	8007d7c <USBH_ParseDevDesc+0x8a>
 8007d76:	e006      	b.n	8007d86 <USBH_ParseDevDesc+0x94>
 8007d78:	2b40      	cmp	r3, #64	; 0x40
 8007d7a:	d104      	bne.n	8007d86 <USBH_ParseDevDesc+0x94>
  {
    case 8:
    case 16:
    case 32:
    case 64:
      dev_desc->bMaxPacketSize = dev_desc->bMaxPacketSize;
 8007d7c:	68fb      	ldr	r3, [r7, #12]
 8007d7e:	79da      	ldrb	r2, [r3, #7]
 8007d80:	68fb      	ldr	r3, [r7, #12]
 8007d82:	71da      	strb	r2, [r3, #7]
      break;
 8007d84:	e003      	b.n	8007d8e <USBH_ParseDevDesc+0x9c>

    default:
      /*set the size to 64 in case the device has answered with incorrect size */
      dev_desc->bMaxPacketSize = 64U;
 8007d86:	68fb      	ldr	r3, [r7, #12]
 8007d88:	2240      	movs	r2, #64	; 0x40
 8007d8a:	71da      	strb	r2, [r3, #7]
      break;
 8007d8c:	bf00      	nop
  }

  if (length > 8U)
 8007d8e:	88fb      	ldrh	r3, [r7, #6]
 8007d90:	2b08      	cmp	r3, #8
 8007d92:	d939      	bls.n	8007e08 <USBH_ParseDevDesc+0x116>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8);
 8007d94:	68bb      	ldr	r3, [r7, #8]
 8007d96:	3308      	adds	r3, #8
 8007d98:	781b      	ldrb	r3, [r3, #0]
 8007d9a:	b29a      	uxth	r2, r3
 8007d9c:	68bb      	ldr	r3, [r7, #8]
 8007d9e:	3309      	adds	r3, #9
 8007da0:	781b      	ldrb	r3, [r3, #0]
 8007da2:	b29b      	uxth	r3, r3
 8007da4:	021b      	lsls	r3, r3, #8
 8007da6:	b29b      	uxth	r3, r3
 8007da8:	4313      	orrs	r3, r2
 8007daa:	b29a      	uxth	r2, r3
 8007dac:	68fb      	ldr	r3, [r7, #12]
 8007dae:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10);
 8007db0:	68bb      	ldr	r3, [r7, #8]
 8007db2:	330a      	adds	r3, #10
 8007db4:	781b      	ldrb	r3, [r3, #0]
 8007db6:	b29a      	uxth	r2, r3
 8007db8:	68bb      	ldr	r3, [r7, #8]
 8007dba:	330b      	adds	r3, #11
 8007dbc:	781b      	ldrb	r3, [r3, #0]
 8007dbe:	b29b      	uxth	r3, r3
 8007dc0:	021b      	lsls	r3, r3, #8
 8007dc2:	b29b      	uxth	r3, r3
 8007dc4:	4313      	orrs	r3, r2
 8007dc6:	b29a      	uxth	r2, r3
 8007dc8:	68fb      	ldr	r3, [r7, #12]
 8007dca:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12);
 8007dcc:	68bb      	ldr	r3, [r7, #8]
 8007dce:	330c      	adds	r3, #12
 8007dd0:	781b      	ldrb	r3, [r3, #0]
 8007dd2:	b29a      	uxth	r2, r3
 8007dd4:	68bb      	ldr	r3, [r7, #8]
 8007dd6:	330d      	adds	r3, #13
 8007dd8:	781b      	ldrb	r3, [r3, #0]
 8007dda:	b29b      	uxth	r3, r3
 8007ddc:	021b      	lsls	r3, r3, #8
 8007dde:	b29b      	uxth	r3, r3
 8007de0:	4313      	orrs	r3, r2
 8007de2:	b29a      	uxth	r2, r3
 8007de4:	68fb      	ldr	r3, [r7, #12]
 8007de6:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14);
 8007de8:	68bb      	ldr	r3, [r7, #8]
 8007dea:	7b9a      	ldrb	r2, [r3, #14]
 8007dec:	68fb      	ldr	r3, [r7, #12]
 8007dee:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15);
 8007df0:	68bb      	ldr	r3, [r7, #8]
 8007df2:	7bda      	ldrb	r2, [r3, #15]
 8007df4:	68fb      	ldr	r3, [r7, #12]
 8007df6:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16);
 8007df8:	68bb      	ldr	r3, [r7, #8]
 8007dfa:	7c1a      	ldrb	r2, [r3, #16]
 8007dfc:	68fb      	ldr	r3, [r7, #12]
 8007dfe:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17);
 8007e00:	68bb      	ldr	r3, [r7, #8]
 8007e02:	7c5a      	ldrb	r2, [r3, #17]
 8007e04:	68fb      	ldr	r3, [r7, #12]
 8007e06:	745a      	strb	r2, [r3, #17]
  }
}
 8007e08:	bf00      	nop
 8007e0a:	3714      	adds	r7, #20
 8007e0c:	46bd      	mov	sp, r7
 8007e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e12:	4770      	bx	lr

08007e14 <USBH_ParseCfgDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH statuse
  */
static USBH_StatusTypeDef USBH_ParseCfgDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 8007e14:	b580      	push	{r7, lr}
 8007e16:	b08c      	sub	sp, #48	; 0x30
 8007e18:	af00      	add	r7, sp, #0
 8007e1a:	60f8      	str	r0, [r7, #12]
 8007e1c:	60b9      	str	r1, [r7, #8]
 8007e1e:	4613      	mov	r3, r2
 8007e20:	80fb      	strh	r3, [r7, #6]
  USBH_CfgDescTypeDef *cfg_desc = &phost->device.CfgDesc;
 8007e22:	68fb      	ldr	r3, [r7, #12]
 8007e24:	f503 734e 	add.w	r3, r3, #824	; 0x338
 8007e28:	623b      	str	r3, [r7, #32]
  USBH_StatusTypeDef           status = USBH_OK;
 8007e2a:	2300      	movs	r3, #0
 8007e2c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  USBH_InterfaceDescTypeDef    *pif ;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc = (USBH_DescHeader_t *)(void *)buf;
 8007e30:	68bb      	ldr	r3, [r7, #8]
 8007e32:	62bb      	str	r3, [r7, #40]	; 0x28
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 8007e34:	2300      	movs	r3, #0
 8007e36:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint8_t                      ep_ix = 0U;
 8007e3a:	2300      	movs	r3, #0
 8007e3c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

  pdesc   = (USBH_DescHeader_t *)(void *)buf;
 8007e40:	68bb      	ldr	r3, [r7, #8]
 8007e42:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0);
 8007e44:	68bb      	ldr	r3, [r7, #8]
 8007e46:	781a      	ldrb	r2, [r3, #0]
 8007e48:	6a3b      	ldr	r3, [r7, #32]
 8007e4a:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1);
 8007e4c:	68bb      	ldr	r3, [r7, #8]
 8007e4e:	785a      	ldrb	r2, [r3, #1]
 8007e50:	6a3b      	ldr	r3, [r7, #32]
 8007e52:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = MIN(((uint16_t) LE16(buf + 2)), ((uint16_t)USBH_MAX_SIZE_CONFIGURATION));
 8007e54:	68bb      	ldr	r3, [r7, #8]
 8007e56:	3302      	adds	r3, #2
 8007e58:	781b      	ldrb	r3, [r3, #0]
 8007e5a:	b29a      	uxth	r2, r3
 8007e5c:	68bb      	ldr	r3, [r7, #8]
 8007e5e:	3303      	adds	r3, #3
 8007e60:	781b      	ldrb	r3, [r3, #0]
 8007e62:	b29b      	uxth	r3, r3
 8007e64:	021b      	lsls	r3, r3, #8
 8007e66:	b29b      	uxth	r3, r3
 8007e68:	4313      	orrs	r3, r2
 8007e6a:	b29b      	uxth	r3, r3
 8007e6c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007e70:	bf28      	it	cs
 8007e72:	f44f 7380 	movcs.w	r3, #256	; 0x100
 8007e76:	b29a      	uxth	r2, r3
 8007e78:	6a3b      	ldr	r3, [r7, #32]
 8007e7a:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4);
 8007e7c:	68bb      	ldr	r3, [r7, #8]
 8007e7e:	791a      	ldrb	r2, [r3, #4]
 8007e80:	6a3b      	ldr	r3, [r7, #32]
 8007e82:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5);
 8007e84:	68bb      	ldr	r3, [r7, #8]
 8007e86:	795a      	ldrb	r2, [r3, #5]
 8007e88:	6a3b      	ldr	r3, [r7, #32]
 8007e8a:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6);
 8007e8c:	68bb      	ldr	r3, [r7, #8]
 8007e8e:	799a      	ldrb	r2, [r3, #6]
 8007e90:	6a3b      	ldr	r3, [r7, #32]
 8007e92:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7);
 8007e94:	68bb      	ldr	r3, [r7, #8]
 8007e96:	79da      	ldrb	r2, [r3, #7]
 8007e98:	6a3b      	ldr	r3, [r7, #32]
 8007e9a:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8);
 8007e9c:	68bb      	ldr	r3, [r7, #8]
 8007e9e:	7a1a      	ldrb	r2, [r3, #8]
 8007ea0:	6a3b      	ldr	r3, [r7, #32]
 8007ea2:	721a      	strb	r2, [r3, #8]

  /* Make sure that the Confguration descriptor's bLength is equal to USB_CONFIGURATION_DESC_SIZE */
  if (cfg_desc->bLength  != USB_CONFIGURATION_DESC_SIZE)
 8007ea4:	6a3b      	ldr	r3, [r7, #32]
 8007ea6:	781b      	ldrb	r3, [r3, #0]
 8007ea8:	2b09      	cmp	r3, #9
 8007eaa:	d002      	beq.n	8007eb2 <USBH_ParseCfgDesc+0x9e>
  {
    cfg_desc->bLength = USB_CONFIGURATION_DESC_SIZE;
 8007eac:	6a3b      	ldr	r3, [r7, #32]
 8007eae:	2209      	movs	r2, #9
 8007eb0:	701a      	strb	r2, [r3, #0]
  }

  if (length > USB_CONFIGURATION_DESC_SIZE)
 8007eb2:	88fb      	ldrh	r3, [r7, #6]
 8007eb4:	2b09      	cmp	r3, #9
 8007eb6:	f240 809d 	bls.w	8007ff4 <USBH_ParseCfgDesc+0x1e0>
  {
    ptr = USB_LEN_CFG_DESC;
 8007eba:	2309      	movs	r3, #9
 8007ebc:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)NULL;
 8007ebe:	2300      	movs	r3, #0
 8007ec0:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8007ec2:	e081      	b.n	8007fc8 <USBH_ParseCfgDesc+0x1b4>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8007ec4:	f107 0316 	add.w	r3, r7, #22
 8007ec8:	4619      	mov	r1, r3
 8007eca:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007ecc:	f000 f99f 	bl	800820e <USBH_GetNextDesc>
 8007ed0:	62b8      	str	r0, [r7, #40]	; 0x28
      if (pdesc->bDescriptorType == USB_DESC_TYPE_INTERFACE)
 8007ed2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ed4:	785b      	ldrb	r3, [r3, #1]
 8007ed6:	2b04      	cmp	r3, #4
 8007ed8:	d176      	bne.n	8007fc8 <USBH_ParseCfgDesc+0x1b4>
      {
        /* Make sure that the interface descriptor's bLength is equal to USB_INTERFACE_DESC_SIZE */
        if (pdesc->bLength != USB_INTERFACE_DESC_SIZE)
 8007eda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007edc:	781b      	ldrb	r3, [r3, #0]
 8007ede:	2b09      	cmp	r3, #9
 8007ee0:	d002      	beq.n	8007ee8 <USBH_ParseCfgDesc+0xd4>
        {
          pdesc->bLength = USB_INTERFACE_DESC_SIZE;
 8007ee2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ee4:	2209      	movs	r2, #9
 8007ee6:	701a      	strb	r2, [r3, #0]
        }

        pif = &cfg_desc->Itf_Desc[if_ix];
 8007ee8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007eec:	221a      	movs	r2, #26
 8007eee:	fb02 f303 	mul.w	r3, r2, r3
 8007ef2:	3308      	adds	r3, #8
 8007ef4:	6a3a      	ldr	r2, [r7, #32]
 8007ef6:	4413      	add	r3, r2
 8007ef8:	3302      	adds	r3, #2
 8007efa:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 8007efc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007efe:	69f8      	ldr	r0, [r7, #28]
 8007f00:	f000 f87e 	bl	8008000 <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 8007f04:	2300      	movs	r3, #0
 8007f06:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        pep = (USBH_EpDescTypeDef *)NULL;
 8007f0a:	2300      	movs	r3, #0
 8007f0c:	61bb      	str	r3, [r7, #24]

        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8007f0e:	e043      	b.n	8007f98 <USBH_ParseCfgDesc+0x184>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8007f10:	f107 0316 	add.w	r3, r7, #22
 8007f14:	4619      	mov	r1, r3
 8007f16:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007f18:	f000 f979 	bl	800820e <USBH_GetNextDesc>
 8007f1c:	62b8      	str	r0, [r7, #40]	; 0x28

          if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8007f1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f20:	785b      	ldrb	r3, [r3, #1]
 8007f22:	2b05      	cmp	r3, #5
 8007f24:	d138      	bne.n	8007f98 <USBH_ParseCfgDesc+0x184>
          {
            /* Check if the endpoint is appartening to an audio streaming interface */
            if ((pif->bInterfaceClass == 0x01U) && (pif->bInterfaceSubClass == 0x02U))
 8007f26:	69fb      	ldr	r3, [r7, #28]
 8007f28:	795b      	ldrb	r3, [r3, #5]
 8007f2a:	2b01      	cmp	r3, #1
 8007f2c:	d10f      	bne.n	8007f4e <USBH_ParseCfgDesc+0x13a>
 8007f2e:	69fb      	ldr	r3, [r7, #28]
 8007f30:	799b      	ldrb	r3, [r3, #6]
 8007f32:	2b02      	cmp	r3, #2
 8007f34:	d10b      	bne.n	8007f4e <USBH_ParseCfgDesc+0x13a>
            {
              /* Check if it is supporting the USB AUDIO 01 class specification */
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 8007f36:	69fb      	ldr	r3, [r7, #28]
 8007f38:	79db      	ldrb	r3, [r3, #7]
 8007f3a:	2b00      	cmp	r3, #0
 8007f3c:	d10f      	bne.n	8007f5e <USBH_ParseCfgDesc+0x14a>
 8007f3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f40:	781b      	ldrb	r3, [r3, #0]
 8007f42:	2b09      	cmp	r3, #9
 8007f44:	d00b      	beq.n	8007f5e <USBH_ParseCfgDesc+0x14a>
              {
                pdesc->bLength = 0x09U;
 8007f46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f48:	2209      	movs	r2, #9
 8007f4a:	701a      	strb	r2, [r3, #0]
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 8007f4c:	e007      	b.n	8007f5e <USBH_ParseCfgDesc+0x14a>
              }
            }
            /* Make sure that the endpoint descriptor's bLength is equal to
               USB_ENDPOINT_DESC_SIZE for all other endpoints types */
            else if (pdesc->bLength != USB_ENDPOINT_DESC_SIZE)
 8007f4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f50:	781b      	ldrb	r3, [r3, #0]
 8007f52:	2b07      	cmp	r3, #7
 8007f54:	d004      	beq.n	8007f60 <USBH_ParseCfgDesc+0x14c>
            {
              pdesc->bLength = USB_ENDPOINT_DESC_SIZE;
 8007f56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f58:	2207      	movs	r2, #7
 8007f5a:	701a      	strb	r2, [r3, #0]
 8007f5c:	e000      	b.n	8007f60 <USBH_ParseCfgDesc+0x14c>
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 8007f5e:	bf00      	nop
            else
            {
              /* ... */
            }

            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 8007f60:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007f64:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8007f68:	3201      	adds	r2, #1
 8007f6a:	00d2      	lsls	r2, r2, #3
 8007f6c:	211a      	movs	r1, #26
 8007f6e:	fb01 f303 	mul.w	r3, r1, r3
 8007f72:	4413      	add	r3, r2
 8007f74:	3308      	adds	r3, #8
 8007f76:	6a3a      	ldr	r2, [r7, #32]
 8007f78:	4413      	add	r3, r2
 8007f7a:	3304      	adds	r3, #4
 8007f7c:	61bb      	str	r3, [r7, #24]

            status = USBH_ParseEPDesc(phost, pep, (uint8_t *)(void *)pdesc);
 8007f7e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007f80:	69b9      	ldr	r1, [r7, #24]
 8007f82:	68f8      	ldr	r0, [r7, #12]
 8007f84:	f000 f86b 	bl	800805e <USBH_ParseEPDesc>
 8007f88:	4603      	mov	r3, r0
 8007f8a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

            ep_ix++;
 8007f8e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8007f92:	3301      	adds	r3, #1
 8007f94:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8007f98:	69fb      	ldr	r3, [r7, #28]
 8007f9a:	791b      	ldrb	r3, [r3, #4]
 8007f9c:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8007fa0:	429a      	cmp	r2, r3
 8007fa2:	d204      	bcs.n	8007fae <USBH_ParseCfgDesc+0x19a>
 8007fa4:	6a3b      	ldr	r3, [r7, #32]
 8007fa6:	885a      	ldrh	r2, [r3, #2]
 8007fa8:	8afb      	ldrh	r3, [r7, #22]
 8007faa:	429a      	cmp	r2, r3
 8007fac:	d8b0      	bhi.n	8007f10 <USBH_ParseCfgDesc+0xfc>
          }
        }

        /* Check if the required endpoint(s) data are parsed */
        if (ep_ix < pif->bNumEndpoints)
 8007fae:	69fb      	ldr	r3, [r7, #28]
 8007fb0:	791b      	ldrb	r3, [r3, #4]
 8007fb2:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8007fb6:	429a      	cmp	r2, r3
 8007fb8:	d201      	bcs.n	8007fbe <USBH_ParseCfgDesc+0x1aa>
        {
          return USBH_NOT_SUPPORTED;
 8007fba:	2303      	movs	r3, #3
 8007fbc:	e01c      	b.n	8007ff8 <USBH_ParseCfgDesc+0x1e4>
        }

        if_ix++;
 8007fbe:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007fc2:	3301      	adds	r3, #1
 8007fc4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8007fc8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007fcc:	2b01      	cmp	r3, #1
 8007fce:	d805      	bhi.n	8007fdc <USBH_ParseCfgDesc+0x1c8>
 8007fd0:	6a3b      	ldr	r3, [r7, #32]
 8007fd2:	885a      	ldrh	r2, [r3, #2]
 8007fd4:	8afb      	ldrh	r3, [r7, #22]
 8007fd6:	429a      	cmp	r2, r3
 8007fd8:	f63f af74 	bhi.w	8007ec4 <USBH_ParseCfgDesc+0xb0>
      }
    }

    /* Check if the required interface(s) data are parsed */
    if (if_ix < MIN(cfg_desc->bNumInterfaces, (uint8_t)USBH_MAX_NUM_INTERFACES))
 8007fdc:	6a3b      	ldr	r3, [r7, #32]
 8007fde:	791b      	ldrb	r3, [r3, #4]
 8007fe0:	2b02      	cmp	r3, #2
 8007fe2:	bf28      	it	cs
 8007fe4:	2302      	movcs	r3, #2
 8007fe6:	b2db      	uxtb	r3, r3
 8007fe8:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8007fec:	429a      	cmp	r2, r3
 8007fee:	d201      	bcs.n	8007ff4 <USBH_ParseCfgDesc+0x1e0>
    {
      return USBH_NOT_SUPPORTED;
 8007ff0:	2303      	movs	r3, #3
 8007ff2:	e001      	b.n	8007ff8 <USBH_ParseCfgDesc+0x1e4>
    }
  }

  return status;
 8007ff4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8007ff8:	4618      	mov	r0, r3
 8007ffa:	3730      	adds	r7, #48	; 0x30
 8007ffc:	46bd      	mov	sp, r7
 8007ffe:	bd80      	pop	{r7, pc}

08008000 <USBH_ParseInterfaceDesc>:
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void  USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor,
                                     uint8_t *buf)
{
 8008000:	b480      	push	{r7}
 8008002:	b083      	sub	sp, #12
 8008004:	af00      	add	r7, sp, #0
 8008006:	6078      	str	r0, [r7, #4]
 8008008:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0);
 800800a:	683b      	ldr	r3, [r7, #0]
 800800c:	781a      	ldrb	r2, [r3, #0]
 800800e:	687b      	ldr	r3, [r7, #4]
 8008010:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1);
 8008012:	683b      	ldr	r3, [r7, #0]
 8008014:	785a      	ldrb	r2, [r3, #1]
 8008016:	687b      	ldr	r3, [r7, #4]
 8008018:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2);
 800801a:	683b      	ldr	r3, [r7, #0]
 800801c:	789a      	ldrb	r2, [r3, #2]
 800801e:	687b      	ldr	r3, [r7, #4]
 8008020:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3);
 8008022:	683b      	ldr	r3, [r7, #0]
 8008024:	78da      	ldrb	r2, [r3, #3]
 8008026:	687b      	ldr	r3, [r7, #4]
 8008028:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t *)(buf + 4);
 800802a:	683b      	ldr	r3, [r7, #0]
 800802c:	791a      	ldrb	r2, [r3, #4]
 800802e:	687b      	ldr	r3, [r7, #4]
 8008030:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5);
 8008032:	683b      	ldr	r3, [r7, #0]
 8008034:	795a      	ldrb	r2, [r3, #5]
 8008036:	687b      	ldr	r3, [r7, #4]
 8008038:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6);
 800803a:	683b      	ldr	r3, [r7, #0]
 800803c:	799a      	ldrb	r2, [r3, #6]
 800803e:	687b      	ldr	r3, [r7, #4]
 8008040:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7);
 8008042:	683b      	ldr	r3, [r7, #0]
 8008044:	79da      	ldrb	r2, [r3, #7]
 8008046:	687b      	ldr	r3, [r7, #4]
 8008048:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8);
 800804a:	683b      	ldr	r3, [r7, #0]
 800804c:	7a1a      	ldrb	r2, [r3, #8]
 800804e:	687b      	ldr	r3, [r7, #4]
 8008050:	721a      	strb	r2, [r3, #8]
}
 8008052:	bf00      	nop
 8008054:	370c      	adds	r7, #12
 8008056:	46bd      	mov	sp, r7
 8008058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800805c:	4770      	bx	lr

0800805e <USBH_ParseEPDesc>:
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval USBH Status
  */
static USBH_StatusTypeDef  USBH_ParseEPDesc(USBH_HandleTypeDef *phost, USBH_EpDescTypeDef  *ep_descriptor,
                                            uint8_t *buf)
{
 800805e:	b480      	push	{r7}
 8008060:	b087      	sub	sp, #28
 8008062:	af00      	add	r7, sp, #0
 8008064:	60f8      	str	r0, [r7, #12]
 8008066:	60b9      	str	r1, [r7, #8]
 8008068:	607a      	str	r2, [r7, #4]
  USBH_StatusTypeDef status = USBH_OK;
 800806a:	2300      	movs	r3, #0
 800806c:	75fb      	strb	r3, [r7, #23]
  ep_descriptor->bLength          = *(uint8_t *)(buf + 0);
 800806e:	687b      	ldr	r3, [r7, #4]
 8008070:	781a      	ldrb	r2, [r3, #0]
 8008072:	68bb      	ldr	r3, [r7, #8]
 8008074:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1);
 8008076:	687b      	ldr	r3, [r7, #4]
 8008078:	785a      	ldrb	r2, [r3, #1]
 800807a:	68bb      	ldr	r3, [r7, #8]
 800807c:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2);
 800807e:	687b      	ldr	r3, [r7, #4]
 8008080:	789a      	ldrb	r2, [r3, #2]
 8008082:	68bb      	ldr	r3, [r7, #8]
 8008084:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3);
 8008086:	687b      	ldr	r3, [r7, #4]
 8008088:	78da      	ldrb	r2, [r3, #3]
 800808a:	68bb      	ldr	r3, [r7, #8]
 800808c:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4);
 800808e:	687b      	ldr	r3, [r7, #4]
 8008090:	3304      	adds	r3, #4
 8008092:	781b      	ldrb	r3, [r3, #0]
 8008094:	b29a      	uxth	r2, r3
 8008096:	687b      	ldr	r3, [r7, #4]
 8008098:	3305      	adds	r3, #5
 800809a:	781b      	ldrb	r3, [r3, #0]
 800809c:	b29b      	uxth	r3, r3
 800809e:	021b      	lsls	r3, r3, #8
 80080a0:	b29b      	uxth	r3, r3
 80080a2:	4313      	orrs	r3, r2
 80080a4:	b29a      	uxth	r2, r3
 80080a6:	68bb      	ldr	r3, [r7, #8]
 80080a8:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6);
 80080aa:	687b      	ldr	r3, [r7, #4]
 80080ac:	799a      	ldrb	r2, [r3, #6]
 80080ae:	68bb      	ldr	r3, [r7, #8]
 80080b0:	719a      	strb	r2, [r3, #6]

  /* Make sure that wMaxPacketSize is different from 0 */
  if (ep_descriptor->wMaxPacketSize == 0x00U)
 80080b2:	68bb      	ldr	r3, [r7, #8]
 80080b4:	889b      	ldrh	r3, [r3, #4]
 80080b6:	2b00      	cmp	r3, #0
 80080b8:	d102      	bne.n	80080c0 <USBH_ParseEPDesc+0x62>
  {
    status = USBH_NOT_SUPPORTED;
 80080ba:	2303      	movs	r3, #3
 80080bc:	75fb      	strb	r3, [r7, #23]
 80080be:	e033      	b.n	8008128 <USBH_ParseEPDesc+0xca>

  }
  else if ((uint16_t)USBH_MAX_DATA_BUFFER < USBH_MAX_EP_PACKET_SIZE)
  {
    /* Make sure that maximum packet size (bits 0..10) does not exceed the total buffer length */
    ep_descriptor->wMaxPacketSize &= ~0x7FFU;
 80080c0:	68bb      	ldr	r3, [r7, #8]
 80080c2:	889b      	ldrh	r3, [r3, #4]
 80080c4:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80080c8:	f023 0307 	bic.w	r3, r3, #7
 80080cc:	b29a      	uxth	r2, r3
 80080ce:	68bb      	ldr	r3, [r7, #8]
 80080d0:	809a      	strh	r2, [r3, #4]
    ep_descriptor->wMaxPacketSize |= MIN((uint16_t)(LE16(buf + 4) & 0x7FFU), (uint16_t)USBH_MAX_DATA_BUFFER);
 80080d2:	68bb      	ldr	r3, [r7, #8]
 80080d4:	889b      	ldrh	r3, [r3, #4]
 80080d6:	b21a      	sxth	r2, r3
 80080d8:	687b      	ldr	r3, [r7, #4]
 80080da:	3304      	adds	r3, #4
 80080dc:	781b      	ldrb	r3, [r3, #0]
 80080de:	b299      	uxth	r1, r3
 80080e0:	687b      	ldr	r3, [r7, #4]
 80080e2:	3305      	adds	r3, #5
 80080e4:	781b      	ldrb	r3, [r3, #0]
 80080e6:	b29b      	uxth	r3, r3
 80080e8:	021b      	lsls	r3, r3, #8
 80080ea:	b29b      	uxth	r3, r3
 80080ec:	430b      	orrs	r3, r1
 80080ee:	b29b      	uxth	r3, r3
 80080f0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80080f4:	2b00      	cmp	r3, #0
 80080f6:	d110      	bne.n	800811a <USBH_ParseEPDesc+0xbc>
 80080f8:	687b      	ldr	r3, [r7, #4]
 80080fa:	3304      	adds	r3, #4
 80080fc:	781b      	ldrb	r3, [r3, #0]
 80080fe:	b299      	uxth	r1, r3
 8008100:	687b      	ldr	r3, [r7, #4]
 8008102:	3305      	adds	r3, #5
 8008104:	781b      	ldrb	r3, [r3, #0]
 8008106:	b29b      	uxth	r3, r3
 8008108:	021b      	lsls	r3, r3, #8
 800810a:	b29b      	uxth	r3, r3
 800810c:	430b      	orrs	r3, r1
 800810e:	b29b      	uxth	r3, r3
 8008110:	b21b      	sxth	r3, r3
 8008112:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8008116:	b21b      	sxth	r3, r3
 8008118:	e001      	b.n	800811e <USBH_ParseEPDesc+0xc0>
 800811a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800811e:	4313      	orrs	r3, r2
 8008120:	b21b      	sxth	r3, r3
 8008122:	b29a      	uxth	r2, r3
 8008124:	68bb      	ldr	r3, [r7, #8]
 8008126:	809a      	strh	r2, [r3, #4]
  {
    /* ... */
  }

  /* For high-speed interrupt/isochronous endpoints, bInterval can vary from 1 to 16 */
  if (phost->device.speed == (uint8_t)USBH_SPEED_HIGH)
 8008128:	68fb      	ldr	r3, [r7, #12]
 800812a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800812e:	2b00      	cmp	r3, #0
 8008130:	d116      	bne.n	8008160 <USBH_ParseEPDesc+0x102>
  {
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 8008132:	68bb      	ldr	r3, [r7, #8]
 8008134:	78db      	ldrb	r3, [r3, #3]
 8008136:	f003 0303 	and.w	r3, r3, #3
 800813a:	2b01      	cmp	r3, #1
 800813c:	d005      	beq.n	800814a <USBH_ParseEPDesc+0xec>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR))
 800813e:	68bb      	ldr	r3, [r7, #8]
 8008140:	78db      	ldrb	r3, [r3, #3]
 8008142:	f003 0303 	and.w	r3, r3, #3
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 8008146:	2b03      	cmp	r3, #3
 8008148:	d127      	bne.n	800819a <USBH_ParseEPDesc+0x13c>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 800814a:	68bb      	ldr	r3, [r7, #8]
 800814c:	799b      	ldrb	r3, [r3, #6]
 800814e:	2b00      	cmp	r3, #0
 8008150:	d003      	beq.n	800815a <USBH_ParseEPDesc+0xfc>
 8008152:	68bb      	ldr	r3, [r7, #8]
 8008154:	799b      	ldrb	r3, [r3, #6]
 8008156:	2b10      	cmp	r3, #16
 8008158:	d91f      	bls.n	800819a <USBH_ParseEPDesc+0x13c>
      {
        status = USBH_NOT_SUPPORTED;
 800815a:	2303      	movs	r3, #3
 800815c:	75fb      	strb	r3, [r7, #23]
 800815e:	e01c      	b.n	800819a <USBH_ParseEPDesc+0x13c>
    }
  }
  else
  {
    /* For full-speed isochronous endpoints, the value of bInterval must be in the range from 1 to 16.*/
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC)
 8008160:	68bb      	ldr	r3, [r7, #8]
 8008162:	78db      	ldrb	r3, [r3, #3]
 8008164:	f003 0303 	and.w	r3, r3, #3
 8008168:	2b01      	cmp	r3, #1
 800816a:	d10a      	bne.n	8008182 <USBH_ParseEPDesc+0x124>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 800816c:	68bb      	ldr	r3, [r7, #8]
 800816e:	799b      	ldrb	r3, [r3, #6]
 8008170:	2b00      	cmp	r3, #0
 8008172:	d003      	beq.n	800817c <USBH_ParseEPDesc+0x11e>
 8008174:	68bb      	ldr	r3, [r7, #8]
 8008176:	799b      	ldrb	r3, [r3, #6]
 8008178:	2b10      	cmp	r3, #16
 800817a:	d90e      	bls.n	800819a <USBH_ParseEPDesc+0x13c>
      {
        status = USBH_NOT_SUPPORTED;
 800817c:	2303      	movs	r3, #3
 800817e:	75fb      	strb	r3, [r7, #23]
 8008180:	e00b      	b.n	800819a <USBH_ParseEPDesc+0x13c>
      }
    }
    /* For full-/low-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 8008182:	68bb      	ldr	r3, [r7, #8]
 8008184:	78db      	ldrb	r3, [r3, #3]
 8008186:	f003 0303 	and.w	r3, r3, #3
 800818a:	2b03      	cmp	r3, #3
 800818c:	d105      	bne.n	800819a <USBH_ParseEPDesc+0x13c>
    {
      if (ep_descriptor->bInterval == 0U)
 800818e:	68bb      	ldr	r3, [r7, #8]
 8008190:	799b      	ldrb	r3, [r3, #6]
 8008192:	2b00      	cmp	r3, #0
 8008194:	d101      	bne.n	800819a <USBH_ParseEPDesc+0x13c>
      {
        status = USBH_NOT_SUPPORTED;
 8008196:	2303      	movs	r3, #3
 8008198:	75fb      	strb	r3, [r7, #23]
    {
      /* ... */
    }
  }

  return status;
 800819a:	7dfb      	ldrb	r3, [r7, #23]
}
 800819c:	4618      	mov	r0, r3
 800819e:	371c      	adds	r7, #28
 80081a0:	46bd      	mov	sp, r7
 80081a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081a6:	4770      	bx	lr

080081a8 <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 80081a8:	b480      	push	{r7}
 80081aa:	b087      	sub	sp, #28
 80081ac:	af00      	add	r7, sp, #0
 80081ae:	60f8      	str	r0, [r7, #12]
 80081b0:	60b9      	str	r1, [r7, #8]
 80081b2:	4613      	mov	r3, r2
 80081b4:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 80081b6:	68fb      	ldr	r3, [r7, #12]
 80081b8:	3301      	adds	r3, #1
 80081ba:	781b      	ldrb	r3, [r3, #0]
 80081bc:	2b03      	cmp	r3, #3
 80081be:	d120      	bne.n	8008202 <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 80081c0:	68fb      	ldr	r3, [r7, #12]
 80081c2:	781b      	ldrb	r3, [r3, #0]
 80081c4:	1e9a      	subs	r2, r3, #2
 80081c6:	88fb      	ldrh	r3, [r7, #6]
 80081c8:	4293      	cmp	r3, r2
 80081ca:	bf28      	it	cs
 80081cc:	4613      	movcs	r3, r2
 80081ce:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 80081d0:	68fb      	ldr	r3, [r7, #12]
 80081d2:	3302      	adds	r3, #2
 80081d4:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 80081d6:	2300      	movs	r3, #0
 80081d8:	82fb      	strh	r3, [r7, #22]
 80081da:	e00b      	b.n	80081f4 <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 80081dc:	8afb      	ldrh	r3, [r7, #22]
 80081de:	68fa      	ldr	r2, [r7, #12]
 80081e0:	4413      	add	r3, r2
 80081e2:	781a      	ldrb	r2, [r3, #0]
 80081e4:	68bb      	ldr	r3, [r7, #8]
 80081e6:	701a      	strb	r2, [r3, #0]
      pdest++;
 80081e8:	68bb      	ldr	r3, [r7, #8]
 80081ea:	3301      	adds	r3, #1
 80081ec:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 80081ee:	8afb      	ldrh	r3, [r7, #22]
 80081f0:	3302      	adds	r3, #2
 80081f2:	82fb      	strh	r3, [r7, #22]
 80081f4:	8afa      	ldrh	r2, [r7, #22]
 80081f6:	8abb      	ldrh	r3, [r7, #20]
 80081f8:	429a      	cmp	r2, r3
 80081fa:	d3ef      	bcc.n	80081dc <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 80081fc:	68bb      	ldr	r3, [r7, #8]
 80081fe:	2200      	movs	r2, #0
 8008200:	701a      	strb	r2, [r3, #0]
  }
}
 8008202:	bf00      	nop
 8008204:	371c      	adds	r7, #28
 8008206:	46bd      	mov	sp, r7
 8008208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800820c:	4770      	bx	lr

0800820e <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t  *USBH_GetNextDesc(uint8_t   *pbuf, uint16_t  *ptr)
{
 800820e:	b480      	push	{r7}
 8008210:	b085      	sub	sp, #20
 8008212:	af00      	add	r7, sp, #0
 8008214:	6078      	str	r0, [r7, #4]
 8008216:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t  *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 8008218:	683b      	ldr	r3, [r7, #0]
 800821a:	881a      	ldrh	r2, [r3, #0]
 800821c:	687b      	ldr	r3, [r7, #4]
 800821e:	781b      	ldrb	r3, [r3, #0]
 8008220:	b29b      	uxth	r3, r3
 8008222:	4413      	add	r3, r2
 8008224:	b29a      	uxth	r2, r3
 8008226:	683b      	ldr	r3, [r7, #0]
 8008228:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 800822a:	687b      	ldr	r3, [r7, #4]
 800822c:	781b      	ldrb	r3, [r3, #0]
 800822e:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 8008230:	687b      	ldr	r3, [r7, #4]
 8008232:	4413      	add	r3, r2
 8008234:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8008236:	68fb      	ldr	r3, [r7, #12]
}
 8008238:	4618      	mov	r0, r3
 800823a:	3714      	adds	r7, #20
 800823c:	46bd      	mov	sp, r7
 800823e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008242:	4770      	bx	lr

08008244 <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 8008244:	b580      	push	{r7, lr}
 8008246:	b086      	sub	sp, #24
 8008248:	af00      	add	r7, sp, #0
 800824a:	60f8      	str	r0, [r7, #12]
 800824c:	60b9      	str	r1, [r7, #8]
 800824e:	4613      	mov	r3, r2
 8008250:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 8008252:	2301      	movs	r3, #1
 8008254:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 8008256:	68fb      	ldr	r3, [r7, #12]
 8008258:	789b      	ldrb	r3, [r3, #2]
 800825a:	2b01      	cmp	r3, #1
 800825c:	d002      	beq.n	8008264 <USBH_CtlReq+0x20>
 800825e:	2b02      	cmp	r3, #2
 8008260:	d00f      	beq.n	8008282 <USBH_CtlReq+0x3e>
#endif
#endif
      break;

    default:
      break;
 8008262:	e027      	b.n	80082b4 <USBH_CtlReq+0x70>
      phost->Control.buff = buff;
 8008264:	68fb      	ldr	r3, [r7, #12]
 8008266:	68ba      	ldr	r2, [r7, #8]
 8008268:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 800826a:	68fb      	ldr	r3, [r7, #12]
 800826c:	88fa      	ldrh	r2, [r7, #6]
 800826e:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 8008270:	68fb      	ldr	r3, [r7, #12]
 8008272:	2201      	movs	r2, #1
 8008274:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 8008276:	68fb      	ldr	r3, [r7, #12]
 8008278:	2202      	movs	r2, #2
 800827a:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 800827c:	2301      	movs	r3, #1
 800827e:	75fb      	strb	r3, [r7, #23]
      break;
 8008280:	e018      	b.n	80082b4 <USBH_CtlReq+0x70>
      status = USBH_HandleControl(phost);
 8008282:	68f8      	ldr	r0, [r7, #12]
 8008284:	f000 f81c 	bl	80082c0 <USBH_HandleControl>
 8008288:	4603      	mov	r3, r0
 800828a:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 800828c:	7dfb      	ldrb	r3, [r7, #23]
 800828e:	2b00      	cmp	r3, #0
 8008290:	d002      	beq.n	8008298 <USBH_CtlReq+0x54>
 8008292:	7dfb      	ldrb	r3, [r7, #23]
 8008294:	2b03      	cmp	r3, #3
 8008296:	d106      	bne.n	80082a6 <USBH_CtlReq+0x62>
        phost->RequestState = CMD_SEND;
 8008298:	68fb      	ldr	r3, [r7, #12]
 800829a:	2201      	movs	r2, #1
 800829c:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 800829e:	68fb      	ldr	r3, [r7, #12]
 80082a0:	2200      	movs	r2, #0
 80082a2:	761a      	strb	r2, [r3, #24]
      break;
 80082a4:	e005      	b.n	80082b2 <USBH_CtlReq+0x6e>
      else if (status == USBH_FAIL)
 80082a6:	7dfb      	ldrb	r3, [r7, #23]
 80082a8:	2b02      	cmp	r3, #2
 80082aa:	d102      	bne.n	80082b2 <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 80082ac:	68fb      	ldr	r3, [r7, #12]
 80082ae:	2201      	movs	r2, #1
 80082b0:	709a      	strb	r2, [r3, #2]
      break;
 80082b2:	bf00      	nop
  }
  return status;
 80082b4:	7dfb      	ldrb	r3, [r7, #23]
}
 80082b6:	4618      	mov	r0, r3
 80082b8:	3718      	adds	r7, #24
 80082ba:	46bd      	mov	sp, r7
 80082bc:	bd80      	pop	{r7, pc}
	...

080082c0 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 80082c0:	b580      	push	{r7, lr}
 80082c2:	b086      	sub	sp, #24
 80082c4:	af02      	add	r7, sp, #8
 80082c6:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 80082c8:	2301      	movs	r3, #1
 80082ca:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 80082cc:	2300      	movs	r3, #0
 80082ce:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 80082d0:	687b      	ldr	r3, [r7, #4]
 80082d2:	7e1b      	ldrb	r3, [r3, #24]
 80082d4:	3b01      	subs	r3, #1
 80082d6:	2b0a      	cmp	r3, #10
 80082d8:	f200 8156 	bhi.w	8008588 <USBH_HandleControl+0x2c8>
 80082dc:	a201      	add	r2, pc, #4	; (adr r2, 80082e4 <USBH_HandleControl+0x24>)
 80082de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80082e2:	bf00      	nop
 80082e4:	08008311 	.word	0x08008311
 80082e8:	0800832b 	.word	0x0800832b
 80082ec:	08008395 	.word	0x08008395
 80082f0:	080083bb 	.word	0x080083bb
 80082f4:	080083f3 	.word	0x080083f3
 80082f8:	0800841d 	.word	0x0800841d
 80082fc:	0800846f 	.word	0x0800846f
 8008300:	08008491 	.word	0x08008491
 8008304:	080084cd 	.word	0x080084cd
 8008308:	080084f3 	.word	0x080084f3
 800830c:	08008531 	.word	0x08008531
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      (void)USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 8008310:	687b      	ldr	r3, [r7, #4]
 8008312:	f103 0110 	add.w	r1, r3, #16
 8008316:	687b      	ldr	r3, [r7, #4]
 8008318:	795b      	ldrb	r3, [r3, #5]
 800831a:	461a      	mov	r2, r3
 800831c:	6878      	ldr	r0, [r7, #4]
 800831e:	f000 f943 	bl	80085a8 <USBH_CtlSendSetup>
                              phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 8008322:	687b      	ldr	r3, [r7, #4]
 8008324:	2202      	movs	r2, #2
 8008326:	761a      	strb	r2, [r3, #24]
      break;
 8008328:	e139      	b.n	800859e <USBH_HandleControl+0x2de>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800832a:	687b      	ldr	r3, [r7, #4]
 800832c:	795b      	ldrb	r3, [r3, #5]
 800832e:	4619      	mov	r1, r3
 8008330:	6878      	ldr	r0, [r7, #4]
 8008332:	f000 fcc5 	bl	8008cc0 <USBH_LL_GetURBState>
 8008336:	4603      	mov	r3, r0
 8008338:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 800833a:	7bbb      	ldrb	r3, [r7, #14]
 800833c:	2b01      	cmp	r3, #1
 800833e:	d11e      	bne.n	800837e <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 8008340:	687b      	ldr	r3, [r7, #4]
 8008342:	7c1b      	ldrb	r3, [r3, #16]
 8008344:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8008348:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 800834a:	687b      	ldr	r3, [r7, #4]
 800834c:	8adb      	ldrh	r3, [r3, #22]
 800834e:	2b00      	cmp	r3, #0
 8008350:	d00a      	beq.n	8008368 <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 8008352:	7b7b      	ldrb	r3, [r7, #13]
 8008354:	2b80      	cmp	r3, #128	; 0x80
 8008356:	d103      	bne.n	8008360 <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 8008358:	687b      	ldr	r3, [r7, #4]
 800835a:	2203      	movs	r2, #3
 800835c:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800835e:	e115      	b.n	800858c <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_DATA_OUT;
 8008360:	687b      	ldr	r3, [r7, #4]
 8008362:	2205      	movs	r2, #5
 8008364:	761a      	strb	r2, [r3, #24]
      break;
 8008366:	e111      	b.n	800858c <USBH_HandleControl+0x2cc>
          if (direction == USB_D2H)
 8008368:	7b7b      	ldrb	r3, [r7, #13]
 800836a:	2b80      	cmp	r3, #128	; 0x80
 800836c:	d103      	bne.n	8008376 <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 800836e:	687b      	ldr	r3, [r7, #4]
 8008370:	2209      	movs	r2, #9
 8008372:	761a      	strb	r2, [r3, #24]
      break;
 8008374:	e10a      	b.n	800858c <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_STATUS_IN;
 8008376:	687b      	ldr	r3, [r7, #4]
 8008378:	2207      	movs	r2, #7
 800837a:	761a      	strb	r2, [r3, #24]
      break;
 800837c:	e106      	b.n	800858c <USBH_HandleControl+0x2cc>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 800837e:	7bbb      	ldrb	r3, [r7, #14]
 8008380:	2b04      	cmp	r3, #4
 8008382:	d003      	beq.n	800838c <USBH_HandleControl+0xcc>
 8008384:	7bbb      	ldrb	r3, [r7, #14]
 8008386:	2b02      	cmp	r3, #2
 8008388:	f040 8100 	bne.w	800858c <USBH_HandleControl+0x2cc>
          phost->Control.state = CTRL_ERROR;
 800838c:	687b      	ldr	r3, [r7, #4]
 800838e:	220b      	movs	r2, #11
 8008390:	761a      	strb	r2, [r3, #24]
      break;
 8008392:	e0fb      	b.n	800858c <USBH_HandleControl+0x2cc>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 8008394:	687b      	ldr	r3, [r7, #4]
 8008396:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800839a:	b29a      	uxth	r2, r3
 800839c:	687b      	ldr	r3, [r7, #4]
 800839e:	81da      	strh	r2, [r3, #14]
      (void)USBH_CtlReceiveData(phost, phost->Control.buff,
 80083a0:	687b      	ldr	r3, [r7, #4]
 80083a2:	6899      	ldr	r1, [r3, #8]
 80083a4:	687b      	ldr	r3, [r7, #4]
 80083a6:	899a      	ldrh	r2, [r3, #12]
 80083a8:	687b      	ldr	r3, [r7, #4]
 80083aa:	791b      	ldrb	r3, [r3, #4]
 80083ac:	6878      	ldr	r0, [r7, #4]
 80083ae:	f000 f93a 	bl	8008626 <USBH_CtlReceiveData>
                                phost->Control.length, phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 80083b2:	687b      	ldr	r3, [r7, #4]
 80083b4:	2204      	movs	r2, #4
 80083b6:	761a      	strb	r2, [r3, #24]
      break;
 80083b8:	e0f1      	b.n	800859e <USBH_HandleControl+0x2de>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 80083ba:	687b      	ldr	r3, [r7, #4]
 80083bc:	791b      	ldrb	r3, [r3, #4]
 80083be:	4619      	mov	r1, r3
 80083c0:	6878      	ldr	r0, [r7, #4]
 80083c2:	f000 fc7d 	bl	8008cc0 <USBH_LL_GetURBState>
 80083c6:	4603      	mov	r3, r0
 80083c8:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 80083ca:	7bbb      	ldrb	r3, [r7, #14]
 80083cc:	2b01      	cmp	r3, #1
 80083ce:	d102      	bne.n	80083d6 <USBH_HandleControl+0x116>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 80083d0:	687b      	ldr	r3, [r7, #4]
 80083d2:	2209      	movs	r2, #9
 80083d4:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 80083d6:	7bbb      	ldrb	r3, [r7, #14]
 80083d8:	2b05      	cmp	r3, #5
 80083da:	d102      	bne.n	80083e2 <USBH_HandleControl+0x122>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 80083dc:	2303      	movs	r3, #3
 80083de:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 80083e0:	e0d6      	b.n	8008590 <USBH_HandleControl+0x2d0>
        if (URB_Status == USBH_URB_ERROR)
 80083e2:	7bbb      	ldrb	r3, [r7, #14]
 80083e4:	2b04      	cmp	r3, #4
 80083e6:	f040 80d3 	bne.w	8008590 <USBH_HandleControl+0x2d0>
          phost->Control.state = CTRL_ERROR;
 80083ea:	687b      	ldr	r3, [r7, #4]
 80083ec:	220b      	movs	r2, #11
 80083ee:	761a      	strb	r2, [r3, #24]
      break;
 80083f0:	e0ce      	b.n	8008590 <USBH_HandleControl+0x2d0>

    case CTRL_DATA_OUT:

      (void)USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 80083f2:	687b      	ldr	r3, [r7, #4]
 80083f4:	6899      	ldr	r1, [r3, #8]
 80083f6:	687b      	ldr	r3, [r7, #4]
 80083f8:	899a      	ldrh	r2, [r3, #12]
 80083fa:	687b      	ldr	r3, [r7, #4]
 80083fc:	795b      	ldrb	r3, [r3, #5]
 80083fe:	2001      	movs	r0, #1
 8008400:	9000      	str	r0, [sp, #0]
 8008402:	6878      	ldr	r0, [r7, #4]
 8008404:	f000 f8ea 	bl	80085dc <USBH_CtlSendData>
                             phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 8008408:	687b      	ldr	r3, [r7, #4]
 800840a:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800840e:	b29a      	uxth	r2, r3
 8008410:	687b      	ldr	r3, [r7, #4]
 8008412:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 8008414:	687b      	ldr	r3, [r7, #4]
 8008416:	2206      	movs	r2, #6
 8008418:	761a      	strb	r2, [r3, #24]
      break;
 800841a:	e0c0      	b.n	800859e <USBH_HandleControl+0x2de>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800841c:	687b      	ldr	r3, [r7, #4]
 800841e:	795b      	ldrb	r3, [r3, #5]
 8008420:	4619      	mov	r1, r3
 8008422:	6878      	ldr	r0, [r7, #4]
 8008424:	f000 fc4c 	bl	8008cc0 <USBH_LL_GetURBState>
 8008428:	4603      	mov	r3, r0
 800842a:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800842c:	7bbb      	ldrb	r3, [r7, #14]
 800842e:	2b01      	cmp	r3, #1
 8008430:	d103      	bne.n	800843a <USBH_HandleControl+0x17a>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 8008432:	687b      	ldr	r3, [r7, #4]
 8008434:	2207      	movs	r2, #7
 8008436:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8008438:	e0ac      	b.n	8008594 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_STALL)
 800843a:	7bbb      	ldrb	r3, [r7, #14]
 800843c:	2b05      	cmp	r3, #5
 800843e:	d105      	bne.n	800844c <USBH_HandleControl+0x18c>
        phost->Control.state = CTRL_STALLED;
 8008440:	687b      	ldr	r3, [r7, #4]
 8008442:	220c      	movs	r2, #12
 8008444:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 8008446:	2303      	movs	r3, #3
 8008448:	73fb      	strb	r3, [r7, #15]
      break;
 800844a:	e0a3      	b.n	8008594 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_NOTREADY)
 800844c:	7bbb      	ldrb	r3, [r7, #14]
 800844e:	2b02      	cmp	r3, #2
 8008450:	d103      	bne.n	800845a <USBH_HandleControl+0x19a>
        phost->Control.state = CTRL_DATA_OUT;
 8008452:	687b      	ldr	r3, [r7, #4]
 8008454:	2205      	movs	r2, #5
 8008456:	761a      	strb	r2, [r3, #24]
      break;
 8008458:	e09c      	b.n	8008594 <USBH_HandleControl+0x2d4>
        if (URB_Status == USBH_URB_ERROR)
 800845a:	7bbb      	ldrb	r3, [r7, #14]
 800845c:	2b04      	cmp	r3, #4
 800845e:	f040 8099 	bne.w	8008594 <USBH_HandleControl+0x2d4>
          phost->Control.state = CTRL_ERROR;
 8008462:	687b      	ldr	r3, [r7, #4]
 8008464:	220b      	movs	r2, #11
 8008466:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 8008468:	2302      	movs	r3, #2
 800846a:	73fb      	strb	r3, [r7, #15]
      break;
 800846c:	e092      	b.n	8008594 <USBH_HandleControl+0x2d4>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      (void)USBH_CtlReceiveData(phost, NULL, 0U, phost->Control.pipe_in);
 800846e:	687b      	ldr	r3, [r7, #4]
 8008470:	791b      	ldrb	r3, [r3, #4]
 8008472:	2200      	movs	r2, #0
 8008474:	2100      	movs	r1, #0
 8008476:	6878      	ldr	r0, [r7, #4]
 8008478:	f000 f8d5 	bl	8008626 <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800847c:	687b      	ldr	r3, [r7, #4]
 800847e:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8008482:	b29a      	uxth	r2, r3
 8008484:	687b      	ldr	r3, [r7, #4]
 8008486:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 8008488:	687b      	ldr	r3, [r7, #4]
 800848a:	2208      	movs	r2, #8
 800848c:	761a      	strb	r2, [r3, #24]

      break;
 800848e:	e086      	b.n	800859e <USBH_HandleControl+0x2de>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 8008490:	687b      	ldr	r3, [r7, #4]
 8008492:	791b      	ldrb	r3, [r3, #4]
 8008494:	4619      	mov	r1, r3
 8008496:	6878      	ldr	r0, [r7, #4]
 8008498:	f000 fc12 	bl	8008cc0 <USBH_LL_GetURBState>
 800849c:	4603      	mov	r3, r0
 800849e:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 80084a0:	7bbb      	ldrb	r3, [r7, #14]
 80084a2:	2b01      	cmp	r3, #1
 80084a4:	d105      	bne.n	80084b2 <USBH_HandleControl+0x1f2>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 80084a6:	687b      	ldr	r3, [r7, #4]
 80084a8:	220d      	movs	r2, #13
 80084aa:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 80084ac:	2300      	movs	r3, #0
 80084ae:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 80084b0:	e072      	b.n	8008598 <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_ERROR)
 80084b2:	7bbb      	ldrb	r3, [r7, #14]
 80084b4:	2b04      	cmp	r3, #4
 80084b6:	d103      	bne.n	80084c0 <USBH_HandleControl+0x200>
        phost->Control.state = CTRL_ERROR;
 80084b8:	687b      	ldr	r3, [r7, #4]
 80084ba:	220b      	movs	r2, #11
 80084bc:	761a      	strb	r2, [r3, #24]
      break;
 80084be:	e06b      	b.n	8008598 <USBH_HandleControl+0x2d8>
        if (URB_Status == USBH_URB_STALL)
 80084c0:	7bbb      	ldrb	r3, [r7, #14]
 80084c2:	2b05      	cmp	r3, #5
 80084c4:	d168      	bne.n	8008598 <USBH_HandleControl+0x2d8>
          status = USBH_NOT_SUPPORTED;
 80084c6:	2303      	movs	r3, #3
 80084c8:	73fb      	strb	r3, [r7, #15]
      break;
 80084ca:	e065      	b.n	8008598 <USBH_HandleControl+0x2d8>

    case CTRL_STATUS_OUT:
      (void)USBH_CtlSendData(phost, NULL, 0U, phost->Control.pipe_out, 1U);
 80084cc:	687b      	ldr	r3, [r7, #4]
 80084ce:	795b      	ldrb	r3, [r3, #5]
 80084d0:	2201      	movs	r2, #1
 80084d2:	9200      	str	r2, [sp, #0]
 80084d4:	2200      	movs	r2, #0
 80084d6:	2100      	movs	r1, #0
 80084d8:	6878      	ldr	r0, [r7, #4]
 80084da:	f000 f87f 	bl	80085dc <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 80084de:	687b      	ldr	r3, [r7, #4]
 80084e0:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 80084e4:	b29a      	uxth	r2, r3
 80084e6:	687b      	ldr	r3, [r7, #4]
 80084e8:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 80084ea:	687b      	ldr	r3, [r7, #4]
 80084ec:	220a      	movs	r2, #10
 80084ee:	761a      	strb	r2, [r3, #24]
      break;
 80084f0:	e055      	b.n	800859e <USBH_HandleControl+0x2de>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 80084f2:	687b      	ldr	r3, [r7, #4]
 80084f4:	795b      	ldrb	r3, [r3, #5]
 80084f6:	4619      	mov	r1, r3
 80084f8:	6878      	ldr	r0, [r7, #4]
 80084fa:	f000 fbe1 	bl	8008cc0 <USBH_LL_GetURBState>
 80084fe:	4603      	mov	r3, r0
 8008500:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 8008502:	7bbb      	ldrb	r3, [r7, #14]
 8008504:	2b01      	cmp	r3, #1
 8008506:	d105      	bne.n	8008514 <USBH_HandleControl+0x254>
      {
        status = USBH_OK;
 8008508:	2300      	movs	r3, #0
 800850a:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 800850c:	687b      	ldr	r3, [r7, #4]
 800850e:	220d      	movs	r2, #13
 8008510:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8008512:	e043      	b.n	800859c <USBH_HandleControl+0x2dc>
      else if (URB_Status == USBH_URB_NOTREADY)
 8008514:	7bbb      	ldrb	r3, [r7, #14]
 8008516:	2b02      	cmp	r3, #2
 8008518:	d103      	bne.n	8008522 <USBH_HandleControl+0x262>
        phost->Control.state = CTRL_STATUS_OUT;
 800851a:	687b      	ldr	r3, [r7, #4]
 800851c:	2209      	movs	r2, #9
 800851e:	761a      	strb	r2, [r3, #24]
      break;
 8008520:	e03c      	b.n	800859c <USBH_HandleControl+0x2dc>
        if (URB_Status == USBH_URB_ERROR)
 8008522:	7bbb      	ldrb	r3, [r7, #14]
 8008524:	2b04      	cmp	r3, #4
 8008526:	d139      	bne.n	800859c <USBH_HandleControl+0x2dc>
          phost->Control.state = CTRL_ERROR;
 8008528:	687b      	ldr	r3, [r7, #4]
 800852a:	220b      	movs	r2, #11
 800852c:	761a      	strb	r2, [r3, #24]
      break;
 800852e:	e035      	b.n	800859c <USBH_HandleControl+0x2dc>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 8008530:	687b      	ldr	r3, [r7, #4]
 8008532:	7e5b      	ldrb	r3, [r3, #25]
 8008534:	3301      	adds	r3, #1
 8008536:	b2da      	uxtb	r2, r3
 8008538:	687b      	ldr	r3, [r7, #4]
 800853a:	765a      	strb	r2, [r3, #25]
 800853c:	687b      	ldr	r3, [r7, #4]
 800853e:	7e5b      	ldrb	r3, [r3, #25]
 8008540:	2b02      	cmp	r3, #2
 8008542:	d806      	bhi.n	8008552 <USBH_HandleControl+0x292>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 8008544:	687b      	ldr	r3, [r7, #4]
 8008546:	2201      	movs	r2, #1
 8008548:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 800854a:	687b      	ldr	r3, [r7, #4]
 800854c:	2201      	movs	r2, #1
 800854e:	709a      	strb	r2, [r3, #2]
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 8008550:	e025      	b.n	800859e <USBH_HandleControl+0x2de>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 8008552:	687b      	ldr	r3, [r7, #4]
 8008554:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8008558:	2106      	movs	r1, #6
 800855a:	6878      	ldr	r0, [r7, #4]
 800855c:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 800855e:	687b      	ldr	r3, [r7, #4]
 8008560:	2200      	movs	r2, #0
 8008562:	765a      	strb	r2, [r3, #25]
        (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8008564:	687b      	ldr	r3, [r7, #4]
 8008566:	795b      	ldrb	r3, [r3, #5]
 8008568:	4619      	mov	r1, r3
 800856a:	6878      	ldr	r0, [r7, #4]
 800856c:	f000 f90c 	bl	8008788 <USBH_FreePipe>
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8008570:	687b      	ldr	r3, [r7, #4]
 8008572:	791b      	ldrb	r3, [r3, #4]
 8008574:	4619      	mov	r1, r3
 8008576:	6878      	ldr	r0, [r7, #4]
 8008578:	f000 f906 	bl	8008788 <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 800857c:	687b      	ldr	r3, [r7, #4]
 800857e:	2200      	movs	r2, #0
 8008580:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 8008582:	2302      	movs	r3, #2
 8008584:	73fb      	strb	r3, [r7, #15]
      break;
 8008586:	e00a      	b.n	800859e <USBH_HandleControl+0x2de>

    default:
      break;
 8008588:	bf00      	nop
 800858a:	e008      	b.n	800859e <USBH_HandleControl+0x2de>
      break;
 800858c:	bf00      	nop
 800858e:	e006      	b.n	800859e <USBH_HandleControl+0x2de>
      break;
 8008590:	bf00      	nop
 8008592:	e004      	b.n	800859e <USBH_HandleControl+0x2de>
      break;
 8008594:	bf00      	nop
 8008596:	e002      	b.n	800859e <USBH_HandleControl+0x2de>
      break;
 8008598:	bf00      	nop
 800859a:	e000      	b.n	800859e <USBH_HandleControl+0x2de>
      break;
 800859c:	bf00      	nop
  }

  return status;
 800859e:	7bfb      	ldrb	r3, [r7, #15]
}
 80085a0:	4618      	mov	r0, r3
 80085a2:	3710      	adds	r7, #16
 80085a4:	46bd      	mov	sp, r7
 80085a6:	bd80      	pop	{r7, pc}

080085a8 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 80085a8:	b580      	push	{r7, lr}
 80085aa:	b088      	sub	sp, #32
 80085ac:	af04      	add	r7, sp, #16
 80085ae:	60f8      	str	r0, [r7, #12]
 80085b0:	60b9      	str	r1, [r7, #8]
 80085b2:	4613      	mov	r3, r2
 80085b4:	71fb      	strb	r3, [r7, #7]

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 80085b6:	79f9      	ldrb	r1, [r7, #7]
 80085b8:	2300      	movs	r3, #0
 80085ba:	9303      	str	r3, [sp, #12]
 80085bc:	2308      	movs	r3, #8
 80085be:	9302      	str	r3, [sp, #8]
 80085c0:	68bb      	ldr	r3, [r7, #8]
 80085c2:	9301      	str	r3, [sp, #4]
 80085c4:	2300      	movs	r3, #0
 80085c6:	9300      	str	r3, [sp, #0]
 80085c8:	2300      	movs	r3, #0
 80085ca:	2200      	movs	r2, #0
 80085cc:	68f8      	ldr	r0, [r7, #12]
 80085ce:	f000 fb46 	bl	8008c5e <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_SETUP,       /* Type setup       */
                          buff,                 /* data buffer      */
                          USBH_SETUP_PKT_SIZE,  /* data length      */
                          0U);
  return USBH_OK;
 80085d2:	2300      	movs	r3, #0
}
 80085d4:	4618      	mov	r0, r3
 80085d6:	3710      	adds	r7, #16
 80085d8:	46bd      	mov	sp, r7
 80085da:	bd80      	pop	{r7, pc}

080085dc <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 80085dc:	b580      	push	{r7, lr}
 80085de:	b088      	sub	sp, #32
 80085e0:	af04      	add	r7, sp, #16
 80085e2:	60f8      	str	r0, [r7, #12]
 80085e4:	60b9      	str	r1, [r7, #8]
 80085e6:	4611      	mov	r1, r2
 80085e8:	461a      	mov	r2, r3
 80085ea:	460b      	mov	r3, r1
 80085ec:	80fb      	strh	r3, [r7, #6]
 80085ee:	4613      	mov	r3, r2
 80085f0:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 80085f2:	68fb      	ldr	r3, [r7, #12]
 80085f4:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 80085f8:	2b00      	cmp	r3, #0
 80085fa:	d001      	beq.n	8008600 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 80085fc:	2300      	movs	r3, #0
 80085fe:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8008600:	7979      	ldrb	r1, [r7, #5]
 8008602:	7e3b      	ldrb	r3, [r7, #24]
 8008604:	9303      	str	r3, [sp, #12]
 8008606:	88fb      	ldrh	r3, [r7, #6]
 8008608:	9302      	str	r3, [sp, #8]
 800860a:	68bb      	ldr	r3, [r7, #8]
 800860c:	9301      	str	r3, [sp, #4]
 800860e:	2301      	movs	r3, #1
 8008610:	9300      	str	r3, [sp, #0]
 8008612:	2300      	movs	r3, #0
 8008614:	2200      	movs	r2, #0
 8008616:	68f8      	ldr	r0, [r7, #12]
 8008618:	f000 fb21 	bl	8008c5e <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 800861c:	2300      	movs	r3, #0
}
 800861e:	4618      	mov	r0, r3
 8008620:	3710      	adds	r7, #16
 8008622:	46bd      	mov	sp, r7
 8008624:	bd80      	pop	{r7, pc}

08008626 <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 8008626:	b580      	push	{r7, lr}
 8008628:	b088      	sub	sp, #32
 800862a:	af04      	add	r7, sp, #16
 800862c:	60f8      	str	r0, [r7, #12]
 800862e:	60b9      	str	r1, [r7, #8]
 8008630:	4611      	mov	r1, r2
 8008632:	461a      	mov	r2, r3
 8008634:	460b      	mov	r3, r1
 8008636:	80fb      	strh	r3, [r7, #6]
 8008638:	4613      	mov	r3, r2
 800863a:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800863c:	7979      	ldrb	r1, [r7, #5]
 800863e:	2300      	movs	r3, #0
 8008640:	9303      	str	r3, [sp, #12]
 8008642:	88fb      	ldrh	r3, [r7, #6]
 8008644:	9302      	str	r3, [sp, #8]
 8008646:	68bb      	ldr	r3, [r7, #8]
 8008648:	9301      	str	r3, [sp, #4]
 800864a:	2301      	movs	r3, #1
 800864c:	9300      	str	r3, [sp, #0]
 800864e:	2300      	movs	r3, #0
 8008650:	2201      	movs	r2, #1
 8008652:	68f8      	ldr	r0, [r7, #12]
 8008654:	f000 fb03 	bl	8008c5e <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 8008658:	2300      	movs	r3, #0

}
 800865a:	4618      	mov	r0, r3
 800865c:	3710      	adds	r7, #16
 800865e:	46bd      	mov	sp, r7
 8008660:	bd80      	pop	{r7, pc}

08008662 <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 8008662:	b580      	push	{r7, lr}
 8008664:	b088      	sub	sp, #32
 8008666:	af04      	add	r7, sp, #16
 8008668:	60f8      	str	r0, [r7, #12]
 800866a:	60b9      	str	r1, [r7, #8]
 800866c:	4611      	mov	r1, r2
 800866e:	461a      	mov	r2, r3
 8008670:	460b      	mov	r3, r1
 8008672:	80fb      	strh	r3, [r7, #6]
 8008674:	4613      	mov	r3, r2
 8008676:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 8008678:	68fb      	ldr	r3, [r7, #12]
 800867a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800867e:	2b00      	cmp	r3, #0
 8008680:	d001      	beq.n	8008686 <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 8008682:	2300      	movs	r3, #0
 8008684:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8008686:	7979      	ldrb	r1, [r7, #5]
 8008688:	7e3b      	ldrb	r3, [r7, #24]
 800868a:	9303      	str	r3, [sp, #12]
 800868c:	88fb      	ldrh	r3, [r7, #6]
 800868e:	9302      	str	r3, [sp, #8]
 8008690:	68bb      	ldr	r3, [r7, #8]
 8008692:	9301      	str	r3, [sp, #4]
 8008694:	2301      	movs	r3, #1
 8008696:	9300      	str	r3, [sp, #0]
 8008698:	2302      	movs	r3, #2
 800869a:	2200      	movs	r2, #0
 800869c:	68f8      	ldr	r0, [r7, #12]
 800869e:	f000 fade 	bl	8008c5e <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 80086a2:	2300      	movs	r3, #0
}
 80086a4:	4618      	mov	r0, r3
 80086a6:	3710      	adds	r7, #16
 80086a8:	46bd      	mov	sp, r7
 80086aa:	bd80      	pop	{r7, pc}

080086ac <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 80086ac:	b580      	push	{r7, lr}
 80086ae:	b088      	sub	sp, #32
 80086b0:	af04      	add	r7, sp, #16
 80086b2:	60f8      	str	r0, [r7, #12]
 80086b4:	60b9      	str	r1, [r7, #8]
 80086b6:	4611      	mov	r1, r2
 80086b8:	461a      	mov	r2, r3
 80086ba:	460b      	mov	r3, r1
 80086bc:	80fb      	strh	r3, [r7, #6]
 80086be:	4613      	mov	r3, r2
 80086c0:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 80086c2:	7979      	ldrb	r1, [r7, #5]
 80086c4:	2300      	movs	r3, #0
 80086c6:	9303      	str	r3, [sp, #12]
 80086c8:	88fb      	ldrh	r3, [r7, #6]
 80086ca:	9302      	str	r3, [sp, #8]
 80086cc:	68bb      	ldr	r3, [r7, #8]
 80086ce:	9301      	str	r3, [sp, #4]
 80086d0:	2301      	movs	r3, #1
 80086d2:	9300      	str	r3, [sp, #0]
 80086d4:	2302      	movs	r3, #2
 80086d6:	2201      	movs	r2, #1
 80086d8:	68f8      	ldr	r0, [r7, #12]
 80086da:	f000 fac0 	bl	8008c5e <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 80086de:	2300      	movs	r3, #0
}
 80086e0:	4618      	mov	r0, r3
 80086e2:	3710      	adds	r7, #16
 80086e4:	46bd      	mov	sp, r7
 80086e6:	bd80      	pop	{r7, pc}

080086e8 <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 80086e8:	b580      	push	{r7, lr}
 80086ea:	b086      	sub	sp, #24
 80086ec:	af04      	add	r7, sp, #16
 80086ee:	6078      	str	r0, [r7, #4]
 80086f0:	4608      	mov	r0, r1
 80086f2:	4611      	mov	r1, r2
 80086f4:	461a      	mov	r2, r3
 80086f6:	4603      	mov	r3, r0
 80086f8:	70fb      	strb	r3, [r7, #3]
 80086fa:	460b      	mov	r3, r1
 80086fc:	70bb      	strb	r3, [r7, #2]
 80086fe:	4613      	mov	r3, r2
 8008700:	707b      	strb	r3, [r7, #1]
  (void)USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 8008702:	7878      	ldrb	r0, [r7, #1]
 8008704:	78ba      	ldrb	r2, [r7, #2]
 8008706:	78f9      	ldrb	r1, [r7, #3]
 8008708:	8b3b      	ldrh	r3, [r7, #24]
 800870a:	9302      	str	r3, [sp, #8]
 800870c:	7d3b      	ldrb	r3, [r7, #20]
 800870e:	9301      	str	r3, [sp, #4]
 8008710:	7c3b      	ldrb	r3, [r7, #16]
 8008712:	9300      	str	r3, [sp, #0]
 8008714:	4603      	mov	r3, r0
 8008716:	6878      	ldr	r0, [r7, #4]
 8008718:	f000 fa53 	bl	8008bc2 <USBH_LL_OpenPipe>

  return USBH_OK;
 800871c:	2300      	movs	r3, #0
}
 800871e:	4618      	mov	r0, r3
 8008720:	3708      	adds	r7, #8
 8008722:	46bd      	mov	sp, r7
 8008724:	bd80      	pop	{r7, pc}

08008726 <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 8008726:	b580      	push	{r7, lr}
 8008728:	b082      	sub	sp, #8
 800872a:	af00      	add	r7, sp, #0
 800872c:	6078      	str	r0, [r7, #4]
 800872e:	460b      	mov	r3, r1
 8008730:	70fb      	strb	r3, [r7, #3]
  (void)USBH_LL_ClosePipe(phost, pipe_num);
 8008732:	78fb      	ldrb	r3, [r7, #3]
 8008734:	4619      	mov	r1, r3
 8008736:	6878      	ldr	r0, [r7, #4]
 8008738:	f000 fa72 	bl	8008c20 <USBH_LL_ClosePipe>

  return USBH_OK;
 800873c:	2300      	movs	r3, #0
}
 800873e:	4618      	mov	r0, r3
 8008740:	3708      	adds	r7, #8
 8008742:	46bd      	mov	sp, r7
 8008744:	bd80      	pop	{r7, pc}

08008746 <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 8008746:	b580      	push	{r7, lr}
 8008748:	b084      	sub	sp, #16
 800874a:	af00      	add	r7, sp, #0
 800874c:	6078      	str	r0, [r7, #4]
 800874e:	460b      	mov	r3, r1
 8008750:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 8008752:	6878      	ldr	r0, [r7, #4]
 8008754:	f000 f836 	bl	80087c4 <USBH_GetFreePipe>
 8008758:	4603      	mov	r3, r0
 800875a:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 800875c:	89fb      	ldrh	r3, [r7, #14]
 800875e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8008762:	4293      	cmp	r3, r2
 8008764:	d00a      	beq.n	800877c <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = (uint32_t)(0x8000U | ep_addr);
 8008766:	78fa      	ldrb	r2, [r7, #3]
 8008768:	89fb      	ldrh	r3, [r7, #14]
 800876a:	f003 030f 	and.w	r3, r3, #15
 800876e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8008772:	6879      	ldr	r1, [r7, #4]
 8008774:	33e0      	adds	r3, #224	; 0xe0
 8008776:	009b      	lsls	r3, r3, #2
 8008778:	440b      	add	r3, r1
 800877a:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 800877c:	89fb      	ldrh	r3, [r7, #14]
 800877e:	b2db      	uxtb	r3, r3
}
 8008780:	4618      	mov	r0, r3
 8008782:	3710      	adds	r7, #16
 8008784:	46bd      	mov	sp, r7
 8008786:	bd80      	pop	{r7, pc}

08008788 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 8008788:	b480      	push	{r7}
 800878a:	b083      	sub	sp, #12
 800878c:	af00      	add	r7, sp, #0
 800878e:	6078      	str	r0, [r7, #4]
 8008790:	460b      	mov	r3, r1
 8008792:	70fb      	strb	r3, [r7, #3]
  if (idx < USBH_MAX_PIPES_NBR)
 8008794:	78fb      	ldrb	r3, [r7, #3]
 8008796:	2b0f      	cmp	r3, #15
 8008798:	d80d      	bhi.n	80087b6 <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 800879a:	78fb      	ldrb	r3, [r7, #3]
 800879c:	687a      	ldr	r2, [r7, #4]
 800879e:	33e0      	adds	r3, #224	; 0xe0
 80087a0:	009b      	lsls	r3, r3, #2
 80087a2:	4413      	add	r3, r2
 80087a4:	685a      	ldr	r2, [r3, #4]
 80087a6:	78fb      	ldrb	r3, [r7, #3]
 80087a8:	f3c2 020e 	ubfx	r2, r2, #0, #15
 80087ac:	6879      	ldr	r1, [r7, #4]
 80087ae:	33e0      	adds	r3, #224	; 0xe0
 80087b0:	009b      	lsls	r3, r3, #2
 80087b2:	440b      	add	r3, r1
 80087b4:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 80087b6:	2300      	movs	r3, #0
}
 80087b8:	4618      	mov	r0, r3
 80087ba:	370c      	adds	r7, #12
 80087bc:	46bd      	mov	sp, r7
 80087be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087c2:	4770      	bx	lr

080087c4 <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 80087c4:	b480      	push	{r7}
 80087c6:	b085      	sub	sp, #20
 80087c8:	af00      	add	r7, sp, #0
 80087ca:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 80087cc:	2300      	movs	r3, #0
 80087ce:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U ; idx < USBH_MAX_PIPES_NBR ; idx++)
 80087d0:	2300      	movs	r3, #0
 80087d2:	73fb      	strb	r3, [r7, #15]
 80087d4:	e00f      	b.n	80087f6 <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 80087d6:	7bfb      	ldrb	r3, [r7, #15]
 80087d8:	687a      	ldr	r2, [r7, #4]
 80087da:	33e0      	adds	r3, #224	; 0xe0
 80087dc:	009b      	lsls	r3, r3, #2
 80087de:	4413      	add	r3, r2
 80087e0:	685b      	ldr	r3, [r3, #4]
 80087e2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80087e6:	2b00      	cmp	r3, #0
 80087e8:	d102      	bne.n	80087f0 <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 80087ea:	7bfb      	ldrb	r3, [r7, #15]
 80087ec:	b29b      	uxth	r3, r3
 80087ee:	e007      	b.n	8008800 <USBH_GetFreePipe+0x3c>
  for (idx = 0U ; idx < USBH_MAX_PIPES_NBR ; idx++)
 80087f0:	7bfb      	ldrb	r3, [r7, #15]
 80087f2:	3301      	adds	r3, #1
 80087f4:	73fb      	strb	r3, [r7, #15]
 80087f6:	7bfb      	ldrb	r3, [r7, #15]
 80087f8:	2b0f      	cmp	r3, #15
 80087fa:	d9ec      	bls.n	80087d6 <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 80087fc:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 8008800:	4618      	mov	r0, r3
 8008802:	3714      	adds	r7, #20
 8008804:	46bd      	mov	sp, r7
 8008806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800880a:	4770      	bx	lr

0800880c <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 800880c:	b580      	push	{r7, lr}
 800880e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 8008810:	2201      	movs	r2, #1
 8008812:	490e      	ldr	r1, [pc, #56]	; (800884c <MX_USB_HOST_Init+0x40>)
 8008814:	480e      	ldr	r0, [pc, #56]	; (8008850 <MX_USB_HOST_Init+0x44>)
 8008816:	f7fe fba7 	bl	8006f68 <USBH_Init>
 800881a:	4603      	mov	r3, r0
 800881c:	2b00      	cmp	r3, #0
 800881e:	d001      	beq.n	8008824 <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 8008820:	f7f8 f958 	bl	8000ad4 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_CDC_CLASS) != USBH_OK)
 8008824:	490b      	ldr	r1, [pc, #44]	; (8008854 <MX_USB_HOST_Init+0x48>)
 8008826:	480a      	ldr	r0, [pc, #40]	; (8008850 <MX_USB_HOST_Init+0x44>)
 8008828:	f7fe fc2c 	bl	8007084 <USBH_RegisterClass>
 800882c:	4603      	mov	r3, r0
 800882e:	2b00      	cmp	r3, #0
 8008830:	d001      	beq.n	8008836 <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 8008832:	f7f8 f94f 	bl	8000ad4 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 8008836:	4806      	ldr	r0, [pc, #24]	; (8008850 <MX_USB_HOST_Init+0x44>)
 8008838:	f7fe fcb0 	bl	800719c <USBH_Start>
 800883c:	4603      	mov	r3, r0
 800883e:	2b00      	cmp	r3, #0
 8008840:	d001      	beq.n	8008846 <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 8008842:	f7f8 f947 	bl	8000ad4 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 8008846:	bf00      	nop
 8008848:	bd80      	pop	{r7, pc}
 800884a:	bf00      	nop
 800884c:	0800886d 	.word	0x0800886d
 8008850:	20000228 	.word	0x20000228
 8008854:	2000000c 	.word	0x2000000c

08008858 <MX_USB_HOST_Process>:

/*
 * Background task
 */
void MX_USB_HOST_Process(void)
{
 8008858:	b580      	push	{r7, lr}
 800885a:	af00      	add	r7, sp, #0
  /* USB Host Background task */
  USBH_Process(&hUsbHostFS);
 800885c:	4802      	ldr	r0, [pc, #8]	; (8008868 <MX_USB_HOST_Process+0x10>)
 800885e:	f7fe fcad 	bl	80071bc <USBH_Process>
}
 8008862:	bf00      	nop
 8008864:	bd80      	pop	{r7, pc}
 8008866:	bf00      	nop
 8008868:	20000228 	.word	0x20000228

0800886c <USBH_UserProcess>:
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 800886c:	b480      	push	{r7}
 800886e:	b083      	sub	sp, #12
 8008870:	af00      	add	r7, sp, #0
 8008872:	6078      	str	r0, [r7, #4]
 8008874:	460b      	mov	r3, r1
 8008876:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 8008878:	78fb      	ldrb	r3, [r7, #3]
 800887a:	3b01      	subs	r3, #1
 800887c:	2b04      	cmp	r3, #4
 800887e:	d819      	bhi.n	80088b4 <USBH_UserProcess+0x48>
 8008880:	a201      	add	r2, pc, #4	; (adr r2, 8008888 <USBH_UserProcess+0x1c>)
 8008882:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008886:	bf00      	nop
 8008888:	080088b5 	.word	0x080088b5
 800888c:	080088a5 	.word	0x080088a5
 8008890:	080088b5 	.word	0x080088b5
 8008894:	080088ad 	.word	0x080088ad
 8008898:	0800889d 	.word	0x0800889d
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 800889c:	4b09      	ldr	r3, [pc, #36]	; (80088c4 <USBH_UserProcess+0x58>)
 800889e:	2203      	movs	r2, #3
 80088a0:	701a      	strb	r2, [r3, #0]
  break;
 80088a2:	e008      	b.n	80088b6 <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 80088a4:	4b07      	ldr	r3, [pc, #28]	; (80088c4 <USBH_UserProcess+0x58>)
 80088a6:	2202      	movs	r2, #2
 80088a8:	701a      	strb	r2, [r3, #0]
  break;
 80088aa:	e004      	b.n	80088b6 <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 80088ac:	4b05      	ldr	r3, [pc, #20]	; (80088c4 <USBH_UserProcess+0x58>)
 80088ae:	2201      	movs	r2, #1
 80088b0:	701a      	strb	r2, [r3, #0]
  break;
 80088b2:	e000      	b.n	80088b6 <USBH_UserProcess+0x4a>

  default:
  break;
 80088b4:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 80088b6:	bf00      	nop
 80088b8:	370c      	adds	r7, #12
 80088ba:	46bd      	mov	sp, r7
 80088bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088c0:	4770      	bx	lr
 80088c2:	bf00      	nop
 80088c4:	20000600 	.word	0x20000600

080088c8 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 80088c8:	b580      	push	{r7, lr}
 80088ca:	b08a      	sub	sp, #40	; 0x28
 80088cc:	af00      	add	r7, sp, #0
 80088ce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80088d0:	f107 0314 	add.w	r3, r7, #20
 80088d4:	2200      	movs	r2, #0
 80088d6:	601a      	str	r2, [r3, #0]
 80088d8:	605a      	str	r2, [r3, #4]
 80088da:	609a      	str	r2, [r3, #8]
 80088dc:	60da      	str	r2, [r3, #12]
 80088de:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 80088e0:	687b      	ldr	r3, [r7, #4]
 80088e2:	681b      	ldr	r3, [r3, #0]
 80088e4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80088e8:	d147      	bne.n	800897a <HAL_HCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80088ea:	2300      	movs	r3, #0
 80088ec:	613b      	str	r3, [r7, #16]
 80088ee:	4b25      	ldr	r3, [pc, #148]	; (8008984 <HAL_HCD_MspInit+0xbc>)
 80088f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80088f2:	4a24      	ldr	r2, [pc, #144]	; (8008984 <HAL_HCD_MspInit+0xbc>)
 80088f4:	f043 0301 	orr.w	r3, r3, #1
 80088f8:	6313      	str	r3, [r2, #48]	; 0x30
 80088fa:	4b22      	ldr	r3, [pc, #136]	; (8008984 <HAL_HCD_MspInit+0xbc>)
 80088fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80088fe:	f003 0301 	and.w	r3, r3, #1
 8008902:	613b      	str	r3, [r7, #16]
 8008904:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 8008906:	f44f 7300 	mov.w	r3, #512	; 0x200
 800890a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800890c:	2300      	movs	r3, #0
 800890e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008910:	2300      	movs	r3, #0
 8008912:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 8008914:	f107 0314 	add.w	r3, r7, #20
 8008918:	4619      	mov	r1, r3
 800891a:	481b      	ldr	r0, [pc, #108]	; (8008988 <HAL_HCD_MspInit+0xc0>)
 800891c:	f7f8 fd5a 	bl	80013d4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 8008920:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8008924:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008926:	2302      	movs	r3, #2
 8008928:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800892a:	2300      	movs	r3, #0
 800892c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800892e:	2300      	movs	r3, #0
 8008930:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8008932:	230a      	movs	r3, #10
 8008934:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008936:	f107 0314 	add.w	r3, r7, #20
 800893a:	4619      	mov	r1, r3
 800893c:	4812      	ldr	r0, [pc, #72]	; (8008988 <HAL_HCD_MspInit+0xc0>)
 800893e:	f7f8 fd49 	bl	80013d4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8008942:	4b10      	ldr	r3, [pc, #64]	; (8008984 <HAL_HCD_MspInit+0xbc>)
 8008944:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008946:	4a0f      	ldr	r2, [pc, #60]	; (8008984 <HAL_HCD_MspInit+0xbc>)
 8008948:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800894c:	6353      	str	r3, [r2, #52]	; 0x34
 800894e:	2300      	movs	r3, #0
 8008950:	60fb      	str	r3, [r7, #12]
 8008952:	4b0c      	ldr	r3, [pc, #48]	; (8008984 <HAL_HCD_MspInit+0xbc>)
 8008954:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008956:	4a0b      	ldr	r2, [pc, #44]	; (8008984 <HAL_HCD_MspInit+0xbc>)
 8008958:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800895c:	6453      	str	r3, [r2, #68]	; 0x44
 800895e:	4b09      	ldr	r3, [pc, #36]	; (8008984 <HAL_HCD_MspInit+0xbc>)
 8008960:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008962:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008966:	60fb      	str	r3, [r7, #12]
 8008968:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800896a:	2200      	movs	r2, #0
 800896c:	2100      	movs	r1, #0
 800896e:	2043      	movs	r0, #67	; 0x43
 8008970:	f7f8 fc67 	bl	8001242 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8008974:	2043      	movs	r0, #67	; 0x43
 8008976:	f7f8 fc80 	bl	800127a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800897a:	bf00      	nop
 800897c:	3728      	adds	r7, #40	; 0x28
 800897e:	46bd      	mov	sp, r7
 8008980:	bd80      	pop	{r7, pc}
 8008982:	bf00      	nop
 8008984:	40023800 	.word	0x40023800
 8008988:	40020000 	.word	0x40020000

0800898c <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 800898c:	b580      	push	{r7, lr}
 800898e:	b082      	sub	sp, #8
 8008990:	af00      	add	r7, sp, #0
 8008992:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 8008994:	687b      	ldr	r3, [r7, #4]
 8008996:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800899a:	4618      	mov	r0, r3
 800899c:	f7fe ffed 	bl	800797a <USBH_LL_IncTimer>
}
 80089a0:	bf00      	nop
 80089a2:	3708      	adds	r7, #8
 80089a4:	46bd      	mov	sp, r7
 80089a6:	bd80      	pop	{r7, pc}

080089a8 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 80089a8:	b580      	push	{r7, lr}
 80089aa:	b082      	sub	sp, #8
 80089ac:	af00      	add	r7, sp, #0
 80089ae:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 80089b0:	687b      	ldr	r3, [r7, #4]
 80089b2:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 80089b6:	4618      	mov	r0, r3
 80089b8:	f7ff f825 	bl	8007a06 <USBH_LL_Connect>
}
 80089bc:	bf00      	nop
 80089be:	3708      	adds	r7, #8
 80089c0:	46bd      	mov	sp, r7
 80089c2:	bd80      	pop	{r7, pc}

080089c4 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 80089c4:	b580      	push	{r7, lr}
 80089c6:	b082      	sub	sp, #8
 80089c8:	af00      	add	r7, sp, #0
 80089ca:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 80089cc:	687b      	ldr	r3, [r7, #4]
 80089ce:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 80089d2:	4618      	mov	r0, r3
 80089d4:	f7ff f82e 	bl	8007a34 <USBH_LL_Disconnect>
}
 80089d8:	bf00      	nop
 80089da:	3708      	adds	r7, #8
 80089dc:	46bd      	mov	sp, r7
 80089de:	bd80      	pop	{r7, pc}

080089e0 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 80089e0:	b480      	push	{r7}
 80089e2:	b083      	sub	sp, #12
 80089e4:	af00      	add	r7, sp, #0
 80089e6:	6078      	str	r0, [r7, #4]
 80089e8:	460b      	mov	r3, r1
 80089ea:	70fb      	strb	r3, [r7, #3]
 80089ec:	4613      	mov	r3, r2
 80089ee:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 80089f0:	bf00      	nop
 80089f2:	370c      	adds	r7, #12
 80089f4:	46bd      	mov	sp, r7
 80089f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089fa:	4770      	bx	lr

080089fc <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 80089fc:	b580      	push	{r7, lr}
 80089fe:	b082      	sub	sp, #8
 8008a00:	af00      	add	r7, sp, #0
 8008a02:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 8008a04:	687b      	ldr	r3, [r7, #4]
 8008a06:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8008a0a:	4618      	mov	r0, r3
 8008a0c:	f7fe ffdf 	bl	80079ce <USBH_LL_PortEnabled>
}
 8008a10:	bf00      	nop
 8008a12:	3708      	adds	r7, #8
 8008a14:	46bd      	mov	sp, r7
 8008a16:	bd80      	pop	{r7, pc}

08008a18 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8008a18:	b580      	push	{r7, lr}
 8008a1a:	b082      	sub	sp, #8
 8008a1c:	af00      	add	r7, sp, #0
 8008a1e:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 8008a20:	687b      	ldr	r3, [r7, #4]
 8008a22:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8008a26:	4618      	mov	r0, r3
 8008a28:	f7fe ffdf 	bl	80079ea <USBH_LL_PortDisabled>
}
 8008a2c:	bf00      	nop
 8008a2e:	3708      	adds	r7, #8
 8008a30:	46bd      	mov	sp, r7
 8008a32:	bd80      	pop	{r7, pc}

08008a34 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 8008a34:	b580      	push	{r7, lr}
 8008a36:	b082      	sub	sp, #8
 8008a38:	af00      	add	r7, sp, #0
 8008a3a:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 8008a3c:	687b      	ldr	r3, [r7, #4]
 8008a3e:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 8008a42:	2b01      	cmp	r3, #1
 8008a44:	d12a      	bne.n	8008a9c <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 8008a46:	4a18      	ldr	r2, [pc, #96]	; (8008aa8 <USBH_LL_Init+0x74>)
 8008a48:	687b      	ldr	r3, [r7, #4]
 8008a4a:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300
  phost->pData = &hhcd_USB_OTG_FS;
 8008a4e:	687b      	ldr	r3, [r7, #4]
 8008a50:	4a15      	ldr	r2, [pc, #84]	; (8008aa8 <USBH_LL_Init+0x74>)
 8008a52:	f8c3 23d0 	str.w	r2, [r3, #976]	; 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8008a56:	4b14      	ldr	r3, [pc, #80]	; (8008aa8 <USBH_LL_Init+0x74>)
 8008a58:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8008a5c:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 8008a5e:	4b12      	ldr	r3, [pc, #72]	; (8008aa8 <USBH_LL_Init+0x74>)
 8008a60:	2208      	movs	r2, #8
 8008a62:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 8008a64:	4b10      	ldr	r3, [pc, #64]	; (8008aa8 <USBH_LL_Init+0x74>)
 8008a66:	2201      	movs	r2, #1
 8008a68:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8008a6a:	4b0f      	ldr	r3, [pc, #60]	; (8008aa8 <USBH_LL_Init+0x74>)
 8008a6c:	2200      	movs	r2, #0
 8008a6e:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 8008a70:	4b0d      	ldr	r3, [pc, #52]	; (8008aa8 <USBH_LL_Init+0x74>)
 8008a72:	2202      	movs	r2, #2
 8008a74:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8008a76:	4b0c      	ldr	r3, [pc, #48]	; (8008aa8 <USBH_LL_Init+0x74>)
 8008a78:	2200      	movs	r2, #0
 8008a7a:	61da      	str	r2, [r3, #28]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 8008a7c:	480a      	ldr	r0, [pc, #40]	; (8008aa8 <USBH_LL_Init+0x74>)
 8008a7e:	f7f8 fe8f 	bl	80017a0 <HAL_HCD_Init>
 8008a82:	4603      	mov	r3, r0
 8008a84:	2b00      	cmp	r3, #0
 8008a86:	d001      	beq.n	8008a8c <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 8008a88:	f7f8 f824 	bl	8000ad4 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 8008a8c:	4806      	ldr	r0, [pc, #24]	; (8008aa8 <USBH_LL_Init+0x74>)
 8008a8e:	f7f9 fa72 	bl	8001f76 <HAL_HCD_GetCurrentFrame>
 8008a92:	4603      	mov	r3, r0
 8008a94:	4619      	mov	r1, r3
 8008a96:	6878      	ldr	r0, [r7, #4]
 8008a98:	f7fe ff60 	bl	800795c <USBH_LL_SetTimer>
  }
  return USBH_OK;
 8008a9c:	2300      	movs	r3, #0
}
 8008a9e:	4618      	mov	r0, r3
 8008aa0:	3708      	adds	r7, #8
 8008aa2:	46bd      	mov	sp, r7
 8008aa4:	bd80      	pop	{r7, pc}
 8008aa6:	bf00      	nop
 8008aa8:	20000604 	.word	0x20000604

08008aac <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 8008aac:	b580      	push	{r7, lr}
 8008aae:	b084      	sub	sp, #16
 8008ab0:	af00      	add	r7, sp, #0
 8008ab2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008ab4:	2300      	movs	r3, #0
 8008ab6:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008ab8:	2300      	movs	r3, #0
 8008aba:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 8008abc:	687b      	ldr	r3, [r7, #4]
 8008abe:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8008ac2:	4618      	mov	r0, r3
 8008ac4:	f7f9 f9e1 	bl	8001e8a <HAL_HCD_Start>
 8008ac8:	4603      	mov	r3, r0
 8008aca:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8008acc:	7bfb      	ldrb	r3, [r7, #15]
 8008ace:	4618      	mov	r0, r3
 8008ad0:	f000 f95c 	bl	8008d8c <USBH_Get_USB_Status>
 8008ad4:	4603      	mov	r3, r0
 8008ad6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008ad8:	7bbb      	ldrb	r3, [r7, #14]
}
 8008ada:	4618      	mov	r0, r3
 8008adc:	3710      	adds	r7, #16
 8008ade:	46bd      	mov	sp, r7
 8008ae0:	bd80      	pop	{r7, pc}

08008ae2 <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 8008ae2:	b580      	push	{r7, lr}
 8008ae4:	b084      	sub	sp, #16
 8008ae6:	af00      	add	r7, sp, #0
 8008ae8:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008aea:	2300      	movs	r3, #0
 8008aec:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008aee:	2300      	movs	r3, #0
 8008af0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 8008af2:	687b      	ldr	r3, [r7, #4]
 8008af4:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8008af8:	4618      	mov	r0, r3
 8008afa:	f7f9 f9e9 	bl	8001ed0 <HAL_HCD_Stop>
 8008afe:	4603      	mov	r3, r0
 8008b00:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8008b02:	7bfb      	ldrb	r3, [r7, #15]
 8008b04:	4618      	mov	r0, r3
 8008b06:	f000 f941 	bl	8008d8c <USBH_Get_USB_Status>
 8008b0a:	4603      	mov	r3, r0
 8008b0c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008b0e:	7bbb      	ldrb	r3, [r7, #14]
}
 8008b10:	4618      	mov	r0, r3
 8008b12:	3710      	adds	r7, #16
 8008b14:	46bd      	mov	sp, r7
 8008b16:	bd80      	pop	{r7, pc}

08008b18 <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 8008b18:	b580      	push	{r7, lr}
 8008b1a:	b084      	sub	sp, #16
 8008b1c:	af00      	add	r7, sp, #0
 8008b1e:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 8008b20:	2301      	movs	r3, #1
 8008b22:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 8008b24:	687b      	ldr	r3, [r7, #4]
 8008b26:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8008b2a:	4618      	mov	r0, r3
 8008b2c:	f7f9 fa31 	bl	8001f92 <HAL_HCD_GetCurrentSpeed>
 8008b30:	4603      	mov	r3, r0
 8008b32:	2b02      	cmp	r3, #2
 8008b34:	d00c      	beq.n	8008b50 <USBH_LL_GetSpeed+0x38>
 8008b36:	2b02      	cmp	r3, #2
 8008b38:	d80d      	bhi.n	8008b56 <USBH_LL_GetSpeed+0x3e>
 8008b3a:	2b00      	cmp	r3, #0
 8008b3c:	d002      	beq.n	8008b44 <USBH_LL_GetSpeed+0x2c>
 8008b3e:	2b01      	cmp	r3, #1
 8008b40:	d003      	beq.n	8008b4a <USBH_LL_GetSpeed+0x32>
 8008b42:	e008      	b.n	8008b56 <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 8008b44:	2300      	movs	r3, #0
 8008b46:	73fb      	strb	r3, [r7, #15]
    break;
 8008b48:	e008      	b.n	8008b5c <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 8008b4a:	2301      	movs	r3, #1
 8008b4c:	73fb      	strb	r3, [r7, #15]
    break;
 8008b4e:	e005      	b.n	8008b5c <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 8008b50:	2302      	movs	r3, #2
 8008b52:	73fb      	strb	r3, [r7, #15]
    break;
 8008b54:	e002      	b.n	8008b5c <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 8008b56:	2301      	movs	r3, #1
 8008b58:	73fb      	strb	r3, [r7, #15]
    break;
 8008b5a:	bf00      	nop
  }
  return  speed;
 8008b5c:	7bfb      	ldrb	r3, [r7, #15]
}
 8008b5e:	4618      	mov	r0, r3
 8008b60:	3710      	adds	r7, #16
 8008b62:	46bd      	mov	sp, r7
 8008b64:	bd80      	pop	{r7, pc}

08008b66 <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 8008b66:	b580      	push	{r7, lr}
 8008b68:	b084      	sub	sp, #16
 8008b6a:	af00      	add	r7, sp, #0
 8008b6c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008b6e:	2300      	movs	r3, #0
 8008b70:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008b72:	2300      	movs	r3, #0
 8008b74:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 8008b76:	687b      	ldr	r3, [r7, #4]
 8008b78:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8008b7c:	4618      	mov	r0, r3
 8008b7e:	f7f9 f9c4 	bl	8001f0a <HAL_HCD_ResetPort>
 8008b82:	4603      	mov	r3, r0
 8008b84:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8008b86:	7bfb      	ldrb	r3, [r7, #15]
 8008b88:	4618      	mov	r0, r3
 8008b8a:	f000 f8ff 	bl	8008d8c <USBH_Get_USB_Status>
 8008b8e:	4603      	mov	r3, r0
 8008b90:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008b92:	7bbb      	ldrb	r3, [r7, #14]
}
 8008b94:	4618      	mov	r0, r3
 8008b96:	3710      	adds	r7, #16
 8008b98:	46bd      	mov	sp, r7
 8008b9a:	bd80      	pop	{r7, pc}

08008b9c <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8008b9c:	b580      	push	{r7, lr}
 8008b9e:	b082      	sub	sp, #8
 8008ba0:	af00      	add	r7, sp, #0
 8008ba2:	6078      	str	r0, [r7, #4]
 8008ba4:	460b      	mov	r3, r1
 8008ba6:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 8008ba8:	687b      	ldr	r3, [r7, #4]
 8008baa:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8008bae:	78fa      	ldrb	r2, [r7, #3]
 8008bb0:	4611      	mov	r1, r2
 8008bb2:	4618      	mov	r0, r3
 8008bb4:	f7f9 f9cb 	bl	8001f4e <HAL_HCD_HC_GetXferCount>
 8008bb8:	4603      	mov	r3, r0
}
 8008bba:	4618      	mov	r0, r3
 8008bbc:	3708      	adds	r7, #8
 8008bbe:	46bd      	mov	sp, r7
 8008bc0:	bd80      	pop	{r7, pc}

08008bc2 <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8008bc2:	b590      	push	{r4, r7, lr}
 8008bc4:	b089      	sub	sp, #36	; 0x24
 8008bc6:	af04      	add	r7, sp, #16
 8008bc8:	6078      	str	r0, [r7, #4]
 8008bca:	4608      	mov	r0, r1
 8008bcc:	4611      	mov	r1, r2
 8008bce:	461a      	mov	r2, r3
 8008bd0:	4603      	mov	r3, r0
 8008bd2:	70fb      	strb	r3, [r7, #3]
 8008bd4:	460b      	mov	r3, r1
 8008bd6:	70bb      	strb	r3, [r7, #2]
 8008bd8:	4613      	mov	r3, r2
 8008bda:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008bdc:	2300      	movs	r3, #0
 8008bde:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008be0:	2300      	movs	r3, #0
 8008be2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 8008be4:	687b      	ldr	r3, [r7, #4]
 8008be6:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 8008bea:	787c      	ldrb	r4, [r7, #1]
 8008bec:	78ba      	ldrb	r2, [r7, #2]
 8008bee:	78f9      	ldrb	r1, [r7, #3]
 8008bf0:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8008bf2:	9302      	str	r3, [sp, #8]
 8008bf4:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8008bf8:	9301      	str	r3, [sp, #4]
 8008bfa:	f897 3020 	ldrb.w	r3, [r7, #32]
 8008bfe:	9300      	str	r3, [sp, #0]
 8008c00:	4623      	mov	r3, r4
 8008c02:	f7f8 fe2f 	bl	8001864 <HAL_HCD_HC_Init>
 8008c06:	4603      	mov	r3, r0
 8008c08:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 8008c0a:	7bfb      	ldrb	r3, [r7, #15]
 8008c0c:	4618      	mov	r0, r3
 8008c0e:	f000 f8bd 	bl	8008d8c <USBH_Get_USB_Status>
 8008c12:	4603      	mov	r3, r0
 8008c14:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008c16:	7bbb      	ldrb	r3, [r7, #14]
}
 8008c18:	4618      	mov	r0, r3
 8008c1a:	3714      	adds	r7, #20
 8008c1c:	46bd      	mov	sp, r7
 8008c1e:	bd90      	pop	{r4, r7, pc}

08008c20 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8008c20:	b580      	push	{r7, lr}
 8008c22:	b084      	sub	sp, #16
 8008c24:	af00      	add	r7, sp, #0
 8008c26:	6078      	str	r0, [r7, #4]
 8008c28:	460b      	mov	r3, r1
 8008c2a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008c2c:	2300      	movs	r3, #0
 8008c2e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008c30:	2300      	movs	r3, #0
 8008c32:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 8008c34:	687b      	ldr	r3, [r7, #4]
 8008c36:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8008c3a:	78fa      	ldrb	r2, [r7, #3]
 8008c3c:	4611      	mov	r1, r2
 8008c3e:	4618      	mov	r0, r3
 8008c40:	f7f8 fe9f 	bl	8001982 <HAL_HCD_HC_Halt>
 8008c44:	4603      	mov	r3, r0
 8008c46:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8008c48:	7bfb      	ldrb	r3, [r7, #15]
 8008c4a:	4618      	mov	r0, r3
 8008c4c:	f000 f89e 	bl	8008d8c <USBH_Get_USB_Status>
 8008c50:	4603      	mov	r3, r0
 8008c52:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008c54:	7bbb      	ldrb	r3, [r7, #14]
}
 8008c56:	4618      	mov	r0, r3
 8008c58:	3710      	adds	r7, #16
 8008c5a:	46bd      	mov	sp, r7
 8008c5c:	bd80      	pop	{r7, pc}

08008c5e <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 8008c5e:	b590      	push	{r4, r7, lr}
 8008c60:	b089      	sub	sp, #36	; 0x24
 8008c62:	af04      	add	r7, sp, #16
 8008c64:	6078      	str	r0, [r7, #4]
 8008c66:	4608      	mov	r0, r1
 8008c68:	4611      	mov	r1, r2
 8008c6a:	461a      	mov	r2, r3
 8008c6c:	4603      	mov	r3, r0
 8008c6e:	70fb      	strb	r3, [r7, #3]
 8008c70:	460b      	mov	r3, r1
 8008c72:	70bb      	strb	r3, [r7, #2]
 8008c74:	4613      	mov	r3, r2
 8008c76:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008c78:	2300      	movs	r3, #0
 8008c7a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008c7c:	2300      	movs	r3, #0
 8008c7e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 8008c80:	687b      	ldr	r3, [r7, #4]
 8008c82:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 8008c86:	787c      	ldrb	r4, [r7, #1]
 8008c88:	78ba      	ldrb	r2, [r7, #2]
 8008c8a:	78f9      	ldrb	r1, [r7, #3]
 8008c8c:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8008c90:	9303      	str	r3, [sp, #12]
 8008c92:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8008c94:	9302      	str	r3, [sp, #8]
 8008c96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c98:	9301      	str	r3, [sp, #4]
 8008c9a:	f897 3020 	ldrb.w	r3, [r7, #32]
 8008c9e:	9300      	str	r3, [sp, #0]
 8008ca0:	4623      	mov	r3, r4
 8008ca2:	f7f8 fe91 	bl	80019c8 <HAL_HCD_HC_SubmitRequest>
 8008ca6:	4603      	mov	r3, r0
 8008ca8:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 8008caa:	7bfb      	ldrb	r3, [r7, #15]
 8008cac:	4618      	mov	r0, r3
 8008cae:	f000 f86d 	bl	8008d8c <USBH_Get_USB_Status>
 8008cb2:	4603      	mov	r3, r0
 8008cb4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008cb6:	7bbb      	ldrb	r3, [r7, #14]
}
 8008cb8:	4618      	mov	r0, r3
 8008cba:	3714      	adds	r7, #20
 8008cbc:	46bd      	mov	sp, r7
 8008cbe:	bd90      	pop	{r4, r7, pc}

08008cc0 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8008cc0:	b580      	push	{r7, lr}
 8008cc2:	b082      	sub	sp, #8
 8008cc4:	af00      	add	r7, sp, #0
 8008cc6:	6078      	str	r0, [r7, #4]
 8008cc8:	460b      	mov	r3, r1
 8008cca:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 8008ccc:	687b      	ldr	r3, [r7, #4]
 8008cce:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8008cd2:	78fa      	ldrb	r2, [r7, #3]
 8008cd4:	4611      	mov	r1, r2
 8008cd6:	4618      	mov	r0, r3
 8008cd8:	f7f9 f925 	bl	8001f26 <HAL_HCD_HC_GetURBState>
 8008cdc:	4603      	mov	r3, r0
}
 8008cde:	4618      	mov	r0, r3
 8008ce0:	3708      	adds	r7, #8
 8008ce2:	46bd      	mov	sp, r7
 8008ce4:	bd80      	pop	{r7, pc}

08008ce6 <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 8008ce6:	b580      	push	{r7, lr}
 8008ce8:	b082      	sub	sp, #8
 8008cea:	af00      	add	r7, sp, #0
 8008cec:	6078      	str	r0, [r7, #4]
 8008cee:	460b      	mov	r3, r1
 8008cf0:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 8008cf2:	687b      	ldr	r3, [r7, #4]
 8008cf4:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 8008cf8:	2b01      	cmp	r3, #1
 8008cfa:	d103      	bne.n	8008d04 <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 8008cfc:	78fb      	ldrb	r3, [r7, #3]
 8008cfe:	4618      	mov	r0, r3
 8008d00:	f000 f870 	bl	8008de4 <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 8008d04:	20c8      	movs	r0, #200	; 0xc8
 8008d06:	f7f8 f99d 	bl	8001044 <HAL_Delay>
  return USBH_OK;
 8008d0a:	2300      	movs	r3, #0
}
 8008d0c:	4618      	mov	r0, r3
 8008d0e:	3708      	adds	r7, #8
 8008d10:	46bd      	mov	sp, r7
 8008d12:	bd80      	pop	{r7, pc}

08008d14 <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 8008d14:	b480      	push	{r7}
 8008d16:	b085      	sub	sp, #20
 8008d18:	af00      	add	r7, sp, #0
 8008d1a:	6078      	str	r0, [r7, #4]
 8008d1c:	460b      	mov	r3, r1
 8008d1e:	70fb      	strb	r3, [r7, #3]
 8008d20:	4613      	mov	r3, r2
 8008d22:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 8008d24:	687b      	ldr	r3, [r7, #4]
 8008d26:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8008d2a:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 8008d2c:	78fb      	ldrb	r3, [r7, #3]
 8008d2e:	68fa      	ldr	r2, [r7, #12]
 8008d30:	212c      	movs	r1, #44	; 0x2c
 8008d32:	fb01 f303 	mul.w	r3, r1, r3
 8008d36:	4413      	add	r3, r2
 8008d38:	333b      	adds	r3, #59	; 0x3b
 8008d3a:	781b      	ldrb	r3, [r3, #0]
 8008d3c:	2b00      	cmp	r3, #0
 8008d3e:	d009      	beq.n	8008d54 <USBH_LL_SetToggle+0x40>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 8008d40:	78fb      	ldrb	r3, [r7, #3]
 8008d42:	68fa      	ldr	r2, [r7, #12]
 8008d44:	212c      	movs	r1, #44	; 0x2c
 8008d46:	fb01 f303 	mul.w	r3, r1, r3
 8008d4a:	4413      	add	r3, r2
 8008d4c:	3354      	adds	r3, #84	; 0x54
 8008d4e:	78ba      	ldrb	r2, [r7, #2]
 8008d50:	701a      	strb	r2, [r3, #0]
 8008d52:	e008      	b.n	8008d66 <USBH_LL_SetToggle+0x52>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 8008d54:	78fb      	ldrb	r3, [r7, #3]
 8008d56:	68fa      	ldr	r2, [r7, #12]
 8008d58:	212c      	movs	r1, #44	; 0x2c
 8008d5a:	fb01 f303 	mul.w	r3, r1, r3
 8008d5e:	4413      	add	r3, r2
 8008d60:	3355      	adds	r3, #85	; 0x55
 8008d62:	78ba      	ldrb	r2, [r7, #2]
 8008d64:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 8008d66:	2300      	movs	r3, #0
}
 8008d68:	4618      	mov	r0, r3
 8008d6a:	3714      	adds	r7, #20
 8008d6c:	46bd      	mov	sp, r7
 8008d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d72:	4770      	bx	lr

08008d74 <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 8008d74:	b580      	push	{r7, lr}
 8008d76:	b082      	sub	sp, #8
 8008d78:	af00      	add	r7, sp, #0
 8008d7a:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 8008d7c:	6878      	ldr	r0, [r7, #4]
 8008d7e:	f7f8 f961 	bl	8001044 <HAL_Delay>
}
 8008d82:	bf00      	nop
 8008d84:	3708      	adds	r7, #8
 8008d86:	46bd      	mov	sp, r7
 8008d88:	bd80      	pop	{r7, pc}
	...

08008d8c <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8008d8c:	b480      	push	{r7}
 8008d8e:	b085      	sub	sp, #20
 8008d90:	af00      	add	r7, sp, #0
 8008d92:	4603      	mov	r3, r0
 8008d94:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008d96:	2300      	movs	r3, #0
 8008d98:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8008d9a:	79fb      	ldrb	r3, [r7, #7]
 8008d9c:	2b03      	cmp	r3, #3
 8008d9e:	d817      	bhi.n	8008dd0 <USBH_Get_USB_Status+0x44>
 8008da0:	a201      	add	r2, pc, #4	; (adr r2, 8008da8 <USBH_Get_USB_Status+0x1c>)
 8008da2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008da6:	bf00      	nop
 8008da8:	08008db9 	.word	0x08008db9
 8008dac:	08008dbf 	.word	0x08008dbf
 8008db0:	08008dc5 	.word	0x08008dc5
 8008db4:	08008dcb 	.word	0x08008dcb
  {
    case HAL_OK :
      usb_status = USBH_OK;
 8008db8:	2300      	movs	r3, #0
 8008dba:	73fb      	strb	r3, [r7, #15]
    break;
 8008dbc:	e00b      	b.n	8008dd6 <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 8008dbe:	2302      	movs	r3, #2
 8008dc0:	73fb      	strb	r3, [r7, #15]
    break;
 8008dc2:	e008      	b.n	8008dd6 <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 8008dc4:	2301      	movs	r3, #1
 8008dc6:	73fb      	strb	r3, [r7, #15]
    break;
 8008dc8:	e005      	b.n	8008dd6 <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 8008dca:	2302      	movs	r3, #2
 8008dcc:	73fb      	strb	r3, [r7, #15]
    break;
 8008dce:	e002      	b.n	8008dd6 <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 8008dd0:	2302      	movs	r3, #2
 8008dd2:	73fb      	strb	r3, [r7, #15]
    break;
 8008dd4:	bf00      	nop
  }
  return usb_status;
 8008dd6:	7bfb      	ldrb	r3, [r7, #15]
}
 8008dd8:	4618      	mov	r0, r3
 8008dda:	3714      	adds	r7, #20
 8008ddc:	46bd      	mov	sp, r7
 8008dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008de2:	4770      	bx	lr

08008de4 <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 8008de4:	b580      	push	{r7, lr}
 8008de6:	b084      	sub	sp, #16
 8008de8:	af00      	add	r7, sp, #0
 8008dea:	4603      	mov	r3, r0
 8008dec:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 8008dee:	79fb      	ldrb	r3, [r7, #7]
 8008df0:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 8008df2:	79fb      	ldrb	r3, [r7, #7]
 8008df4:	2b00      	cmp	r3, #0
 8008df6:	d102      	bne.n	8008dfe <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_RESET;
 8008df8:	2300      	movs	r3, #0
 8008dfa:	73fb      	strb	r3, [r7, #15]
 8008dfc:	e001      	b.n	8008e02 <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_SET;
 8008dfe:	2301      	movs	r3, #1
 8008e00:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,(GPIO_PinState)data);
 8008e02:	7bfb      	ldrb	r3, [r7, #15]
 8008e04:	461a      	mov	r2, r3
 8008e06:	2101      	movs	r1, #1
 8008e08:	4803      	ldr	r0, [pc, #12]	; (8008e18 <MX_DriverVbusFS+0x34>)
 8008e0a:	f7f8 fc97 	bl	800173c <HAL_GPIO_WritePin>
}
 8008e0e:	bf00      	nop
 8008e10:	3710      	adds	r7, #16
 8008e12:	46bd      	mov	sp, r7
 8008e14:	bd80      	pop	{r7, pc}
 8008e16:	bf00      	nop
 8008e18:	40020800 	.word	0x40020800

08008e1c <__errno>:
 8008e1c:	4b01      	ldr	r3, [pc, #4]	; (8008e24 <__errno+0x8>)
 8008e1e:	6818      	ldr	r0, [r3, #0]
 8008e20:	4770      	bx	lr
 8008e22:	bf00      	nop
 8008e24:	2000002c 	.word	0x2000002c

08008e28 <__libc_init_array>:
 8008e28:	b570      	push	{r4, r5, r6, lr}
 8008e2a:	4d0d      	ldr	r5, [pc, #52]	; (8008e60 <__libc_init_array+0x38>)
 8008e2c:	4c0d      	ldr	r4, [pc, #52]	; (8008e64 <__libc_init_array+0x3c>)
 8008e2e:	1b64      	subs	r4, r4, r5
 8008e30:	10a4      	asrs	r4, r4, #2
 8008e32:	2600      	movs	r6, #0
 8008e34:	42a6      	cmp	r6, r4
 8008e36:	d109      	bne.n	8008e4c <__libc_init_array+0x24>
 8008e38:	4d0b      	ldr	r5, [pc, #44]	; (8008e68 <__libc_init_array+0x40>)
 8008e3a:	4c0c      	ldr	r4, [pc, #48]	; (8008e6c <__libc_init_array+0x44>)
 8008e3c:	f000 fc9e 	bl	800977c <_init>
 8008e40:	1b64      	subs	r4, r4, r5
 8008e42:	10a4      	asrs	r4, r4, #2
 8008e44:	2600      	movs	r6, #0
 8008e46:	42a6      	cmp	r6, r4
 8008e48:	d105      	bne.n	8008e56 <__libc_init_array+0x2e>
 8008e4a:	bd70      	pop	{r4, r5, r6, pc}
 8008e4c:	f855 3b04 	ldr.w	r3, [r5], #4
 8008e50:	4798      	blx	r3
 8008e52:	3601      	adds	r6, #1
 8008e54:	e7ee      	b.n	8008e34 <__libc_init_array+0xc>
 8008e56:	f855 3b04 	ldr.w	r3, [r5], #4
 8008e5a:	4798      	blx	r3
 8008e5c:	3601      	adds	r6, #1
 8008e5e:	e7f2      	b.n	8008e46 <__libc_init_array+0x1e>
 8008e60:	08009804 	.word	0x08009804
 8008e64:	08009804 	.word	0x08009804
 8008e68:	08009804 	.word	0x08009804
 8008e6c:	08009808 	.word	0x08009808

08008e70 <malloc>:
 8008e70:	4b02      	ldr	r3, [pc, #8]	; (8008e7c <malloc+0xc>)
 8008e72:	4601      	mov	r1, r0
 8008e74:	6818      	ldr	r0, [r3, #0]
 8008e76:	f000 b87f 	b.w	8008f78 <_malloc_r>
 8008e7a:	bf00      	nop
 8008e7c:	2000002c 	.word	0x2000002c

08008e80 <free>:
 8008e80:	4b02      	ldr	r3, [pc, #8]	; (8008e8c <free+0xc>)
 8008e82:	4601      	mov	r1, r0
 8008e84:	6818      	ldr	r0, [r3, #0]
 8008e86:	f000 b80b 	b.w	8008ea0 <_free_r>
 8008e8a:	bf00      	nop
 8008e8c:	2000002c 	.word	0x2000002c

08008e90 <memset>:
 8008e90:	4402      	add	r2, r0
 8008e92:	4603      	mov	r3, r0
 8008e94:	4293      	cmp	r3, r2
 8008e96:	d100      	bne.n	8008e9a <memset+0xa>
 8008e98:	4770      	bx	lr
 8008e9a:	f803 1b01 	strb.w	r1, [r3], #1
 8008e9e:	e7f9      	b.n	8008e94 <memset+0x4>

08008ea0 <_free_r>:
 8008ea0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008ea2:	2900      	cmp	r1, #0
 8008ea4:	d044      	beq.n	8008f30 <_free_r+0x90>
 8008ea6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008eaa:	9001      	str	r0, [sp, #4]
 8008eac:	2b00      	cmp	r3, #0
 8008eae:	f1a1 0404 	sub.w	r4, r1, #4
 8008eb2:	bfb8      	it	lt
 8008eb4:	18e4      	addlt	r4, r4, r3
 8008eb6:	f000 f903 	bl	80090c0 <__malloc_lock>
 8008eba:	4a1e      	ldr	r2, [pc, #120]	; (8008f34 <_free_r+0x94>)
 8008ebc:	9801      	ldr	r0, [sp, #4]
 8008ebe:	6813      	ldr	r3, [r2, #0]
 8008ec0:	b933      	cbnz	r3, 8008ed0 <_free_r+0x30>
 8008ec2:	6063      	str	r3, [r4, #4]
 8008ec4:	6014      	str	r4, [r2, #0]
 8008ec6:	b003      	add	sp, #12
 8008ec8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008ecc:	f000 b8fe 	b.w	80090cc <__malloc_unlock>
 8008ed0:	42a3      	cmp	r3, r4
 8008ed2:	d908      	bls.n	8008ee6 <_free_r+0x46>
 8008ed4:	6825      	ldr	r5, [r4, #0]
 8008ed6:	1961      	adds	r1, r4, r5
 8008ed8:	428b      	cmp	r3, r1
 8008eda:	bf01      	itttt	eq
 8008edc:	6819      	ldreq	r1, [r3, #0]
 8008ede:	685b      	ldreq	r3, [r3, #4]
 8008ee0:	1949      	addeq	r1, r1, r5
 8008ee2:	6021      	streq	r1, [r4, #0]
 8008ee4:	e7ed      	b.n	8008ec2 <_free_r+0x22>
 8008ee6:	461a      	mov	r2, r3
 8008ee8:	685b      	ldr	r3, [r3, #4]
 8008eea:	b10b      	cbz	r3, 8008ef0 <_free_r+0x50>
 8008eec:	42a3      	cmp	r3, r4
 8008eee:	d9fa      	bls.n	8008ee6 <_free_r+0x46>
 8008ef0:	6811      	ldr	r1, [r2, #0]
 8008ef2:	1855      	adds	r5, r2, r1
 8008ef4:	42a5      	cmp	r5, r4
 8008ef6:	d10b      	bne.n	8008f10 <_free_r+0x70>
 8008ef8:	6824      	ldr	r4, [r4, #0]
 8008efa:	4421      	add	r1, r4
 8008efc:	1854      	adds	r4, r2, r1
 8008efe:	42a3      	cmp	r3, r4
 8008f00:	6011      	str	r1, [r2, #0]
 8008f02:	d1e0      	bne.n	8008ec6 <_free_r+0x26>
 8008f04:	681c      	ldr	r4, [r3, #0]
 8008f06:	685b      	ldr	r3, [r3, #4]
 8008f08:	6053      	str	r3, [r2, #4]
 8008f0a:	4421      	add	r1, r4
 8008f0c:	6011      	str	r1, [r2, #0]
 8008f0e:	e7da      	b.n	8008ec6 <_free_r+0x26>
 8008f10:	d902      	bls.n	8008f18 <_free_r+0x78>
 8008f12:	230c      	movs	r3, #12
 8008f14:	6003      	str	r3, [r0, #0]
 8008f16:	e7d6      	b.n	8008ec6 <_free_r+0x26>
 8008f18:	6825      	ldr	r5, [r4, #0]
 8008f1a:	1961      	adds	r1, r4, r5
 8008f1c:	428b      	cmp	r3, r1
 8008f1e:	bf04      	itt	eq
 8008f20:	6819      	ldreq	r1, [r3, #0]
 8008f22:	685b      	ldreq	r3, [r3, #4]
 8008f24:	6063      	str	r3, [r4, #4]
 8008f26:	bf04      	itt	eq
 8008f28:	1949      	addeq	r1, r1, r5
 8008f2a:	6021      	streq	r1, [r4, #0]
 8008f2c:	6054      	str	r4, [r2, #4]
 8008f2e:	e7ca      	b.n	8008ec6 <_free_r+0x26>
 8008f30:	b003      	add	sp, #12
 8008f32:	bd30      	pop	{r4, r5, pc}
 8008f34:	20000908 	.word	0x20000908

08008f38 <sbrk_aligned>:
 8008f38:	b570      	push	{r4, r5, r6, lr}
 8008f3a:	4e0e      	ldr	r6, [pc, #56]	; (8008f74 <sbrk_aligned+0x3c>)
 8008f3c:	460c      	mov	r4, r1
 8008f3e:	6831      	ldr	r1, [r6, #0]
 8008f40:	4605      	mov	r5, r0
 8008f42:	b911      	cbnz	r1, 8008f4a <sbrk_aligned+0x12>
 8008f44:	f000 f88c 	bl	8009060 <_sbrk_r>
 8008f48:	6030      	str	r0, [r6, #0]
 8008f4a:	4621      	mov	r1, r4
 8008f4c:	4628      	mov	r0, r5
 8008f4e:	f000 f887 	bl	8009060 <_sbrk_r>
 8008f52:	1c43      	adds	r3, r0, #1
 8008f54:	d00a      	beq.n	8008f6c <sbrk_aligned+0x34>
 8008f56:	1cc4      	adds	r4, r0, #3
 8008f58:	f024 0403 	bic.w	r4, r4, #3
 8008f5c:	42a0      	cmp	r0, r4
 8008f5e:	d007      	beq.n	8008f70 <sbrk_aligned+0x38>
 8008f60:	1a21      	subs	r1, r4, r0
 8008f62:	4628      	mov	r0, r5
 8008f64:	f000 f87c 	bl	8009060 <_sbrk_r>
 8008f68:	3001      	adds	r0, #1
 8008f6a:	d101      	bne.n	8008f70 <sbrk_aligned+0x38>
 8008f6c:	f04f 34ff 	mov.w	r4, #4294967295
 8008f70:	4620      	mov	r0, r4
 8008f72:	bd70      	pop	{r4, r5, r6, pc}
 8008f74:	2000090c 	.word	0x2000090c

08008f78 <_malloc_r>:
 8008f78:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008f7c:	1ccd      	adds	r5, r1, #3
 8008f7e:	f025 0503 	bic.w	r5, r5, #3
 8008f82:	3508      	adds	r5, #8
 8008f84:	2d0c      	cmp	r5, #12
 8008f86:	bf38      	it	cc
 8008f88:	250c      	movcc	r5, #12
 8008f8a:	2d00      	cmp	r5, #0
 8008f8c:	4607      	mov	r7, r0
 8008f8e:	db01      	blt.n	8008f94 <_malloc_r+0x1c>
 8008f90:	42a9      	cmp	r1, r5
 8008f92:	d905      	bls.n	8008fa0 <_malloc_r+0x28>
 8008f94:	230c      	movs	r3, #12
 8008f96:	603b      	str	r3, [r7, #0]
 8008f98:	2600      	movs	r6, #0
 8008f9a:	4630      	mov	r0, r6
 8008f9c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008fa0:	4e2e      	ldr	r6, [pc, #184]	; (800905c <_malloc_r+0xe4>)
 8008fa2:	f000 f88d 	bl	80090c0 <__malloc_lock>
 8008fa6:	6833      	ldr	r3, [r6, #0]
 8008fa8:	461c      	mov	r4, r3
 8008faa:	bb34      	cbnz	r4, 8008ffa <_malloc_r+0x82>
 8008fac:	4629      	mov	r1, r5
 8008fae:	4638      	mov	r0, r7
 8008fb0:	f7ff ffc2 	bl	8008f38 <sbrk_aligned>
 8008fb4:	1c43      	adds	r3, r0, #1
 8008fb6:	4604      	mov	r4, r0
 8008fb8:	d14d      	bne.n	8009056 <_malloc_r+0xde>
 8008fba:	6834      	ldr	r4, [r6, #0]
 8008fbc:	4626      	mov	r6, r4
 8008fbe:	2e00      	cmp	r6, #0
 8008fc0:	d140      	bne.n	8009044 <_malloc_r+0xcc>
 8008fc2:	6823      	ldr	r3, [r4, #0]
 8008fc4:	4631      	mov	r1, r6
 8008fc6:	4638      	mov	r0, r7
 8008fc8:	eb04 0803 	add.w	r8, r4, r3
 8008fcc:	f000 f848 	bl	8009060 <_sbrk_r>
 8008fd0:	4580      	cmp	r8, r0
 8008fd2:	d13a      	bne.n	800904a <_malloc_r+0xd2>
 8008fd4:	6821      	ldr	r1, [r4, #0]
 8008fd6:	3503      	adds	r5, #3
 8008fd8:	1a6d      	subs	r5, r5, r1
 8008fda:	f025 0503 	bic.w	r5, r5, #3
 8008fde:	3508      	adds	r5, #8
 8008fe0:	2d0c      	cmp	r5, #12
 8008fe2:	bf38      	it	cc
 8008fe4:	250c      	movcc	r5, #12
 8008fe6:	4629      	mov	r1, r5
 8008fe8:	4638      	mov	r0, r7
 8008fea:	f7ff ffa5 	bl	8008f38 <sbrk_aligned>
 8008fee:	3001      	adds	r0, #1
 8008ff0:	d02b      	beq.n	800904a <_malloc_r+0xd2>
 8008ff2:	6823      	ldr	r3, [r4, #0]
 8008ff4:	442b      	add	r3, r5
 8008ff6:	6023      	str	r3, [r4, #0]
 8008ff8:	e00e      	b.n	8009018 <_malloc_r+0xa0>
 8008ffa:	6822      	ldr	r2, [r4, #0]
 8008ffc:	1b52      	subs	r2, r2, r5
 8008ffe:	d41e      	bmi.n	800903e <_malloc_r+0xc6>
 8009000:	2a0b      	cmp	r2, #11
 8009002:	d916      	bls.n	8009032 <_malloc_r+0xba>
 8009004:	1961      	adds	r1, r4, r5
 8009006:	42a3      	cmp	r3, r4
 8009008:	6025      	str	r5, [r4, #0]
 800900a:	bf18      	it	ne
 800900c:	6059      	strne	r1, [r3, #4]
 800900e:	6863      	ldr	r3, [r4, #4]
 8009010:	bf08      	it	eq
 8009012:	6031      	streq	r1, [r6, #0]
 8009014:	5162      	str	r2, [r4, r5]
 8009016:	604b      	str	r3, [r1, #4]
 8009018:	4638      	mov	r0, r7
 800901a:	f104 060b 	add.w	r6, r4, #11
 800901e:	f000 f855 	bl	80090cc <__malloc_unlock>
 8009022:	f026 0607 	bic.w	r6, r6, #7
 8009026:	1d23      	adds	r3, r4, #4
 8009028:	1af2      	subs	r2, r6, r3
 800902a:	d0b6      	beq.n	8008f9a <_malloc_r+0x22>
 800902c:	1b9b      	subs	r3, r3, r6
 800902e:	50a3      	str	r3, [r4, r2]
 8009030:	e7b3      	b.n	8008f9a <_malloc_r+0x22>
 8009032:	6862      	ldr	r2, [r4, #4]
 8009034:	42a3      	cmp	r3, r4
 8009036:	bf0c      	ite	eq
 8009038:	6032      	streq	r2, [r6, #0]
 800903a:	605a      	strne	r2, [r3, #4]
 800903c:	e7ec      	b.n	8009018 <_malloc_r+0xa0>
 800903e:	4623      	mov	r3, r4
 8009040:	6864      	ldr	r4, [r4, #4]
 8009042:	e7b2      	b.n	8008faa <_malloc_r+0x32>
 8009044:	4634      	mov	r4, r6
 8009046:	6876      	ldr	r6, [r6, #4]
 8009048:	e7b9      	b.n	8008fbe <_malloc_r+0x46>
 800904a:	230c      	movs	r3, #12
 800904c:	603b      	str	r3, [r7, #0]
 800904e:	4638      	mov	r0, r7
 8009050:	f000 f83c 	bl	80090cc <__malloc_unlock>
 8009054:	e7a1      	b.n	8008f9a <_malloc_r+0x22>
 8009056:	6025      	str	r5, [r4, #0]
 8009058:	e7de      	b.n	8009018 <_malloc_r+0xa0>
 800905a:	bf00      	nop
 800905c:	20000908 	.word	0x20000908

08009060 <_sbrk_r>:
 8009060:	b538      	push	{r3, r4, r5, lr}
 8009062:	4d06      	ldr	r5, [pc, #24]	; (800907c <_sbrk_r+0x1c>)
 8009064:	2300      	movs	r3, #0
 8009066:	4604      	mov	r4, r0
 8009068:	4608      	mov	r0, r1
 800906a:	602b      	str	r3, [r5, #0]
 800906c:	f7f7 ff06 	bl	8000e7c <_sbrk>
 8009070:	1c43      	adds	r3, r0, #1
 8009072:	d102      	bne.n	800907a <_sbrk_r+0x1a>
 8009074:	682b      	ldr	r3, [r5, #0]
 8009076:	b103      	cbz	r3, 800907a <_sbrk_r+0x1a>
 8009078:	6023      	str	r3, [r4, #0]
 800907a:	bd38      	pop	{r3, r4, r5, pc}
 800907c:	20000910 	.word	0x20000910

08009080 <siprintf>:
 8009080:	b40e      	push	{r1, r2, r3}
 8009082:	b500      	push	{lr}
 8009084:	b09c      	sub	sp, #112	; 0x70
 8009086:	ab1d      	add	r3, sp, #116	; 0x74
 8009088:	9002      	str	r0, [sp, #8]
 800908a:	9006      	str	r0, [sp, #24]
 800908c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8009090:	4809      	ldr	r0, [pc, #36]	; (80090b8 <siprintf+0x38>)
 8009092:	9107      	str	r1, [sp, #28]
 8009094:	9104      	str	r1, [sp, #16]
 8009096:	4909      	ldr	r1, [pc, #36]	; (80090bc <siprintf+0x3c>)
 8009098:	f853 2b04 	ldr.w	r2, [r3], #4
 800909c:	9105      	str	r1, [sp, #20]
 800909e:	6800      	ldr	r0, [r0, #0]
 80090a0:	9301      	str	r3, [sp, #4]
 80090a2:	a902      	add	r1, sp, #8
 80090a4:	f000 f874 	bl	8009190 <_svfiprintf_r>
 80090a8:	9b02      	ldr	r3, [sp, #8]
 80090aa:	2200      	movs	r2, #0
 80090ac:	701a      	strb	r2, [r3, #0]
 80090ae:	b01c      	add	sp, #112	; 0x70
 80090b0:	f85d eb04 	ldr.w	lr, [sp], #4
 80090b4:	b003      	add	sp, #12
 80090b6:	4770      	bx	lr
 80090b8:	2000002c 	.word	0x2000002c
 80090bc:	ffff0208 	.word	0xffff0208

080090c0 <__malloc_lock>:
 80090c0:	4801      	ldr	r0, [pc, #4]	; (80090c8 <__malloc_lock+0x8>)
 80090c2:	f000 baf9 	b.w	80096b8 <__retarget_lock_acquire_recursive>
 80090c6:	bf00      	nop
 80090c8:	20000914 	.word	0x20000914

080090cc <__malloc_unlock>:
 80090cc:	4801      	ldr	r0, [pc, #4]	; (80090d4 <__malloc_unlock+0x8>)
 80090ce:	f000 baf4 	b.w	80096ba <__retarget_lock_release_recursive>
 80090d2:	bf00      	nop
 80090d4:	20000914 	.word	0x20000914

080090d8 <__ssputs_r>:
 80090d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80090dc:	688e      	ldr	r6, [r1, #8]
 80090de:	429e      	cmp	r6, r3
 80090e0:	4682      	mov	sl, r0
 80090e2:	460c      	mov	r4, r1
 80090e4:	4690      	mov	r8, r2
 80090e6:	461f      	mov	r7, r3
 80090e8:	d838      	bhi.n	800915c <__ssputs_r+0x84>
 80090ea:	898a      	ldrh	r2, [r1, #12]
 80090ec:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80090f0:	d032      	beq.n	8009158 <__ssputs_r+0x80>
 80090f2:	6825      	ldr	r5, [r4, #0]
 80090f4:	6909      	ldr	r1, [r1, #16]
 80090f6:	eba5 0901 	sub.w	r9, r5, r1
 80090fa:	6965      	ldr	r5, [r4, #20]
 80090fc:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8009100:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8009104:	3301      	adds	r3, #1
 8009106:	444b      	add	r3, r9
 8009108:	106d      	asrs	r5, r5, #1
 800910a:	429d      	cmp	r5, r3
 800910c:	bf38      	it	cc
 800910e:	461d      	movcc	r5, r3
 8009110:	0553      	lsls	r3, r2, #21
 8009112:	d531      	bpl.n	8009178 <__ssputs_r+0xa0>
 8009114:	4629      	mov	r1, r5
 8009116:	f7ff ff2f 	bl	8008f78 <_malloc_r>
 800911a:	4606      	mov	r6, r0
 800911c:	b950      	cbnz	r0, 8009134 <__ssputs_r+0x5c>
 800911e:	230c      	movs	r3, #12
 8009120:	f8ca 3000 	str.w	r3, [sl]
 8009124:	89a3      	ldrh	r3, [r4, #12]
 8009126:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800912a:	81a3      	strh	r3, [r4, #12]
 800912c:	f04f 30ff 	mov.w	r0, #4294967295
 8009130:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009134:	6921      	ldr	r1, [r4, #16]
 8009136:	464a      	mov	r2, r9
 8009138:	f000 fac0 	bl	80096bc <memcpy>
 800913c:	89a3      	ldrh	r3, [r4, #12]
 800913e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8009142:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009146:	81a3      	strh	r3, [r4, #12]
 8009148:	6126      	str	r6, [r4, #16]
 800914a:	6165      	str	r5, [r4, #20]
 800914c:	444e      	add	r6, r9
 800914e:	eba5 0509 	sub.w	r5, r5, r9
 8009152:	6026      	str	r6, [r4, #0]
 8009154:	60a5      	str	r5, [r4, #8]
 8009156:	463e      	mov	r6, r7
 8009158:	42be      	cmp	r6, r7
 800915a:	d900      	bls.n	800915e <__ssputs_r+0x86>
 800915c:	463e      	mov	r6, r7
 800915e:	6820      	ldr	r0, [r4, #0]
 8009160:	4632      	mov	r2, r6
 8009162:	4641      	mov	r1, r8
 8009164:	f000 fab8 	bl	80096d8 <memmove>
 8009168:	68a3      	ldr	r3, [r4, #8]
 800916a:	1b9b      	subs	r3, r3, r6
 800916c:	60a3      	str	r3, [r4, #8]
 800916e:	6823      	ldr	r3, [r4, #0]
 8009170:	4433      	add	r3, r6
 8009172:	6023      	str	r3, [r4, #0]
 8009174:	2000      	movs	r0, #0
 8009176:	e7db      	b.n	8009130 <__ssputs_r+0x58>
 8009178:	462a      	mov	r2, r5
 800917a:	f000 fac7 	bl	800970c <_realloc_r>
 800917e:	4606      	mov	r6, r0
 8009180:	2800      	cmp	r0, #0
 8009182:	d1e1      	bne.n	8009148 <__ssputs_r+0x70>
 8009184:	6921      	ldr	r1, [r4, #16]
 8009186:	4650      	mov	r0, sl
 8009188:	f7ff fe8a 	bl	8008ea0 <_free_r>
 800918c:	e7c7      	b.n	800911e <__ssputs_r+0x46>
	...

08009190 <_svfiprintf_r>:
 8009190:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009194:	4698      	mov	r8, r3
 8009196:	898b      	ldrh	r3, [r1, #12]
 8009198:	061b      	lsls	r3, r3, #24
 800919a:	b09d      	sub	sp, #116	; 0x74
 800919c:	4607      	mov	r7, r0
 800919e:	460d      	mov	r5, r1
 80091a0:	4614      	mov	r4, r2
 80091a2:	d50e      	bpl.n	80091c2 <_svfiprintf_r+0x32>
 80091a4:	690b      	ldr	r3, [r1, #16]
 80091a6:	b963      	cbnz	r3, 80091c2 <_svfiprintf_r+0x32>
 80091a8:	2140      	movs	r1, #64	; 0x40
 80091aa:	f7ff fee5 	bl	8008f78 <_malloc_r>
 80091ae:	6028      	str	r0, [r5, #0]
 80091b0:	6128      	str	r0, [r5, #16]
 80091b2:	b920      	cbnz	r0, 80091be <_svfiprintf_r+0x2e>
 80091b4:	230c      	movs	r3, #12
 80091b6:	603b      	str	r3, [r7, #0]
 80091b8:	f04f 30ff 	mov.w	r0, #4294967295
 80091bc:	e0d1      	b.n	8009362 <_svfiprintf_r+0x1d2>
 80091be:	2340      	movs	r3, #64	; 0x40
 80091c0:	616b      	str	r3, [r5, #20]
 80091c2:	2300      	movs	r3, #0
 80091c4:	9309      	str	r3, [sp, #36]	; 0x24
 80091c6:	2320      	movs	r3, #32
 80091c8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80091cc:	f8cd 800c 	str.w	r8, [sp, #12]
 80091d0:	2330      	movs	r3, #48	; 0x30
 80091d2:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800937c <_svfiprintf_r+0x1ec>
 80091d6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80091da:	f04f 0901 	mov.w	r9, #1
 80091de:	4623      	mov	r3, r4
 80091e0:	469a      	mov	sl, r3
 80091e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80091e6:	b10a      	cbz	r2, 80091ec <_svfiprintf_r+0x5c>
 80091e8:	2a25      	cmp	r2, #37	; 0x25
 80091ea:	d1f9      	bne.n	80091e0 <_svfiprintf_r+0x50>
 80091ec:	ebba 0b04 	subs.w	fp, sl, r4
 80091f0:	d00b      	beq.n	800920a <_svfiprintf_r+0x7a>
 80091f2:	465b      	mov	r3, fp
 80091f4:	4622      	mov	r2, r4
 80091f6:	4629      	mov	r1, r5
 80091f8:	4638      	mov	r0, r7
 80091fa:	f7ff ff6d 	bl	80090d8 <__ssputs_r>
 80091fe:	3001      	adds	r0, #1
 8009200:	f000 80aa 	beq.w	8009358 <_svfiprintf_r+0x1c8>
 8009204:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009206:	445a      	add	r2, fp
 8009208:	9209      	str	r2, [sp, #36]	; 0x24
 800920a:	f89a 3000 	ldrb.w	r3, [sl]
 800920e:	2b00      	cmp	r3, #0
 8009210:	f000 80a2 	beq.w	8009358 <_svfiprintf_r+0x1c8>
 8009214:	2300      	movs	r3, #0
 8009216:	f04f 32ff 	mov.w	r2, #4294967295
 800921a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800921e:	f10a 0a01 	add.w	sl, sl, #1
 8009222:	9304      	str	r3, [sp, #16]
 8009224:	9307      	str	r3, [sp, #28]
 8009226:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800922a:	931a      	str	r3, [sp, #104]	; 0x68
 800922c:	4654      	mov	r4, sl
 800922e:	2205      	movs	r2, #5
 8009230:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009234:	4851      	ldr	r0, [pc, #324]	; (800937c <_svfiprintf_r+0x1ec>)
 8009236:	f7f6 ffcb 	bl	80001d0 <memchr>
 800923a:	9a04      	ldr	r2, [sp, #16]
 800923c:	b9d8      	cbnz	r0, 8009276 <_svfiprintf_r+0xe6>
 800923e:	06d0      	lsls	r0, r2, #27
 8009240:	bf44      	itt	mi
 8009242:	2320      	movmi	r3, #32
 8009244:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009248:	0711      	lsls	r1, r2, #28
 800924a:	bf44      	itt	mi
 800924c:	232b      	movmi	r3, #43	; 0x2b
 800924e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009252:	f89a 3000 	ldrb.w	r3, [sl]
 8009256:	2b2a      	cmp	r3, #42	; 0x2a
 8009258:	d015      	beq.n	8009286 <_svfiprintf_r+0xf6>
 800925a:	9a07      	ldr	r2, [sp, #28]
 800925c:	4654      	mov	r4, sl
 800925e:	2000      	movs	r0, #0
 8009260:	f04f 0c0a 	mov.w	ip, #10
 8009264:	4621      	mov	r1, r4
 8009266:	f811 3b01 	ldrb.w	r3, [r1], #1
 800926a:	3b30      	subs	r3, #48	; 0x30
 800926c:	2b09      	cmp	r3, #9
 800926e:	d94e      	bls.n	800930e <_svfiprintf_r+0x17e>
 8009270:	b1b0      	cbz	r0, 80092a0 <_svfiprintf_r+0x110>
 8009272:	9207      	str	r2, [sp, #28]
 8009274:	e014      	b.n	80092a0 <_svfiprintf_r+0x110>
 8009276:	eba0 0308 	sub.w	r3, r0, r8
 800927a:	fa09 f303 	lsl.w	r3, r9, r3
 800927e:	4313      	orrs	r3, r2
 8009280:	9304      	str	r3, [sp, #16]
 8009282:	46a2      	mov	sl, r4
 8009284:	e7d2      	b.n	800922c <_svfiprintf_r+0x9c>
 8009286:	9b03      	ldr	r3, [sp, #12]
 8009288:	1d19      	adds	r1, r3, #4
 800928a:	681b      	ldr	r3, [r3, #0]
 800928c:	9103      	str	r1, [sp, #12]
 800928e:	2b00      	cmp	r3, #0
 8009290:	bfbb      	ittet	lt
 8009292:	425b      	neglt	r3, r3
 8009294:	f042 0202 	orrlt.w	r2, r2, #2
 8009298:	9307      	strge	r3, [sp, #28]
 800929a:	9307      	strlt	r3, [sp, #28]
 800929c:	bfb8      	it	lt
 800929e:	9204      	strlt	r2, [sp, #16]
 80092a0:	7823      	ldrb	r3, [r4, #0]
 80092a2:	2b2e      	cmp	r3, #46	; 0x2e
 80092a4:	d10c      	bne.n	80092c0 <_svfiprintf_r+0x130>
 80092a6:	7863      	ldrb	r3, [r4, #1]
 80092a8:	2b2a      	cmp	r3, #42	; 0x2a
 80092aa:	d135      	bne.n	8009318 <_svfiprintf_r+0x188>
 80092ac:	9b03      	ldr	r3, [sp, #12]
 80092ae:	1d1a      	adds	r2, r3, #4
 80092b0:	681b      	ldr	r3, [r3, #0]
 80092b2:	9203      	str	r2, [sp, #12]
 80092b4:	2b00      	cmp	r3, #0
 80092b6:	bfb8      	it	lt
 80092b8:	f04f 33ff 	movlt.w	r3, #4294967295
 80092bc:	3402      	adds	r4, #2
 80092be:	9305      	str	r3, [sp, #20]
 80092c0:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800938c <_svfiprintf_r+0x1fc>
 80092c4:	7821      	ldrb	r1, [r4, #0]
 80092c6:	2203      	movs	r2, #3
 80092c8:	4650      	mov	r0, sl
 80092ca:	f7f6 ff81 	bl	80001d0 <memchr>
 80092ce:	b140      	cbz	r0, 80092e2 <_svfiprintf_r+0x152>
 80092d0:	2340      	movs	r3, #64	; 0x40
 80092d2:	eba0 000a 	sub.w	r0, r0, sl
 80092d6:	fa03 f000 	lsl.w	r0, r3, r0
 80092da:	9b04      	ldr	r3, [sp, #16]
 80092dc:	4303      	orrs	r3, r0
 80092de:	3401      	adds	r4, #1
 80092e0:	9304      	str	r3, [sp, #16]
 80092e2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80092e6:	4826      	ldr	r0, [pc, #152]	; (8009380 <_svfiprintf_r+0x1f0>)
 80092e8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80092ec:	2206      	movs	r2, #6
 80092ee:	f7f6 ff6f 	bl	80001d0 <memchr>
 80092f2:	2800      	cmp	r0, #0
 80092f4:	d038      	beq.n	8009368 <_svfiprintf_r+0x1d8>
 80092f6:	4b23      	ldr	r3, [pc, #140]	; (8009384 <_svfiprintf_r+0x1f4>)
 80092f8:	bb1b      	cbnz	r3, 8009342 <_svfiprintf_r+0x1b2>
 80092fa:	9b03      	ldr	r3, [sp, #12]
 80092fc:	3307      	adds	r3, #7
 80092fe:	f023 0307 	bic.w	r3, r3, #7
 8009302:	3308      	adds	r3, #8
 8009304:	9303      	str	r3, [sp, #12]
 8009306:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009308:	4433      	add	r3, r6
 800930a:	9309      	str	r3, [sp, #36]	; 0x24
 800930c:	e767      	b.n	80091de <_svfiprintf_r+0x4e>
 800930e:	fb0c 3202 	mla	r2, ip, r2, r3
 8009312:	460c      	mov	r4, r1
 8009314:	2001      	movs	r0, #1
 8009316:	e7a5      	b.n	8009264 <_svfiprintf_r+0xd4>
 8009318:	2300      	movs	r3, #0
 800931a:	3401      	adds	r4, #1
 800931c:	9305      	str	r3, [sp, #20]
 800931e:	4619      	mov	r1, r3
 8009320:	f04f 0c0a 	mov.w	ip, #10
 8009324:	4620      	mov	r0, r4
 8009326:	f810 2b01 	ldrb.w	r2, [r0], #1
 800932a:	3a30      	subs	r2, #48	; 0x30
 800932c:	2a09      	cmp	r2, #9
 800932e:	d903      	bls.n	8009338 <_svfiprintf_r+0x1a8>
 8009330:	2b00      	cmp	r3, #0
 8009332:	d0c5      	beq.n	80092c0 <_svfiprintf_r+0x130>
 8009334:	9105      	str	r1, [sp, #20]
 8009336:	e7c3      	b.n	80092c0 <_svfiprintf_r+0x130>
 8009338:	fb0c 2101 	mla	r1, ip, r1, r2
 800933c:	4604      	mov	r4, r0
 800933e:	2301      	movs	r3, #1
 8009340:	e7f0      	b.n	8009324 <_svfiprintf_r+0x194>
 8009342:	ab03      	add	r3, sp, #12
 8009344:	9300      	str	r3, [sp, #0]
 8009346:	462a      	mov	r2, r5
 8009348:	4b0f      	ldr	r3, [pc, #60]	; (8009388 <_svfiprintf_r+0x1f8>)
 800934a:	a904      	add	r1, sp, #16
 800934c:	4638      	mov	r0, r7
 800934e:	f3af 8000 	nop.w
 8009352:	1c42      	adds	r2, r0, #1
 8009354:	4606      	mov	r6, r0
 8009356:	d1d6      	bne.n	8009306 <_svfiprintf_r+0x176>
 8009358:	89ab      	ldrh	r3, [r5, #12]
 800935a:	065b      	lsls	r3, r3, #25
 800935c:	f53f af2c 	bmi.w	80091b8 <_svfiprintf_r+0x28>
 8009360:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009362:	b01d      	add	sp, #116	; 0x74
 8009364:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009368:	ab03      	add	r3, sp, #12
 800936a:	9300      	str	r3, [sp, #0]
 800936c:	462a      	mov	r2, r5
 800936e:	4b06      	ldr	r3, [pc, #24]	; (8009388 <_svfiprintf_r+0x1f8>)
 8009370:	a904      	add	r1, sp, #16
 8009372:	4638      	mov	r0, r7
 8009374:	f000 f87a 	bl	800946c <_printf_i>
 8009378:	e7eb      	b.n	8009352 <_svfiprintf_r+0x1c2>
 800937a:	bf00      	nop
 800937c:	080097c8 	.word	0x080097c8
 8009380:	080097d2 	.word	0x080097d2
 8009384:	00000000 	.word	0x00000000
 8009388:	080090d9 	.word	0x080090d9
 800938c:	080097ce 	.word	0x080097ce

08009390 <_printf_common>:
 8009390:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009394:	4616      	mov	r6, r2
 8009396:	4699      	mov	r9, r3
 8009398:	688a      	ldr	r2, [r1, #8]
 800939a:	690b      	ldr	r3, [r1, #16]
 800939c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80093a0:	4293      	cmp	r3, r2
 80093a2:	bfb8      	it	lt
 80093a4:	4613      	movlt	r3, r2
 80093a6:	6033      	str	r3, [r6, #0]
 80093a8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80093ac:	4607      	mov	r7, r0
 80093ae:	460c      	mov	r4, r1
 80093b0:	b10a      	cbz	r2, 80093b6 <_printf_common+0x26>
 80093b2:	3301      	adds	r3, #1
 80093b4:	6033      	str	r3, [r6, #0]
 80093b6:	6823      	ldr	r3, [r4, #0]
 80093b8:	0699      	lsls	r1, r3, #26
 80093ba:	bf42      	ittt	mi
 80093bc:	6833      	ldrmi	r3, [r6, #0]
 80093be:	3302      	addmi	r3, #2
 80093c0:	6033      	strmi	r3, [r6, #0]
 80093c2:	6825      	ldr	r5, [r4, #0]
 80093c4:	f015 0506 	ands.w	r5, r5, #6
 80093c8:	d106      	bne.n	80093d8 <_printf_common+0x48>
 80093ca:	f104 0a19 	add.w	sl, r4, #25
 80093ce:	68e3      	ldr	r3, [r4, #12]
 80093d0:	6832      	ldr	r2, [r6, #0]
 80093d2:	1a9b      	subs	r3, r3, r2
 80093d4:	42ab      	cmp	r3, r5
 80093d6:	dc26      	bgt.n	8009426 <_printf_common+0x96>
 80093d8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80093dc:	1e13      	subs	r3, r2, #0
 80093de:	6822      	ldr	r2, [r4, #0]
 80093e0:	bf18      	it	ne
 80093e2:	2301      	movne	r3, #1
 80093e4:	0692      	lsls	r2, r2, #26
 80093e6:	d42b      	bmi.n	8009440 <_printf_common+0xb0>
 80093e8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80093ec:	4649      	mov	r1, r9
 80093ee:	4638      	mov	r0, r7
 80093f0:	47c0      	blx	r8
 80093f2:	3001      	adds	r0, #1
 80093f4:	d01e      	beq.n	8009434 <_printf_common+0xa4>
 80093f6:	6823      	ldr	r3, [r4, #0]
 80093f8:	68e5      	ldr	r5, [r4, #12]
 80093fa:	6832      	ldr	r2, [r6, #0]
 80093fc:	f003 0306 	and.w	r3, r3, #6
 8009400:	2b04      	cmp	r3, #4
 8009402:	bf08      	it	eq
 8009404:	1aad      	subeq	r5, r5, r2
 8009406:	68a3      	ldr	r3, [r4, #8]
 8009408:	6922      	ldr	r2, [r4, #16]
 800940a:	bf0c      	ite	eq
 800940c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009410:	2500      	movne	r5, #0
 8009412:	4293      	cmp	r3, r2
 8009414:	bfc4      	itt	gt
 8009416:	1a9b      	subgt	r3, r3, r2
 8009418:	18ed      	addgt	r5, r5, r3
 800941a:	2600      	movs	r6, #0
 800941c:	341a      	adds	r4, #26
 800941e:	42b5      	cmp	r5, r6
 8009420:	d11a      	bne.n	8009458 <_printf_common+0xc8>
 8009422:	2000      	movs	r0, #0
 8009424:	e008      	b.n	8009438 <_printf_common+0xa8>
 8009426:	2301      	movs	r3, #1
 8009428:	4652      	mov	r2, sl
 800942a:	4649      	mov	r1, r9
 800942c:	4638      	mov	r0, r7
 800942e:	47c0      	blx	r8
 8009430:	3001      	adds	r0, #1
 8009432:	d103      	bne.n	800943c <_printf_common+0xac>
 8009434:	f04f 30ff 	mov.w	r0, #4294967295
 8009438:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800943c:	3501      	adds	r5, #1
 800943e:	e7c6      	b.n	80093ce <_printf_common+0x3e>
 8009440:	18e1      	adds	r1, r4, r3
 8009442:	1c5a      	adds	r2, r3, #1
 8009444:	2030      	movs	r0, #48	; 0x30
 8009446:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800944a:	4422      	add	r2, r4
 800944c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8009450:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8009454:	3302      	adds	r3, #2
 8009456:	e7c7      	b.n	80093e8 <_printf_common+0x58>
 8009458:	2301      	movs	r3, #1
 800945a:	4622      	mov	r2, r4
 800945c:	4649      	mov	r1, r9
 800945e:	4638      	mov	r0, r7
 8009460:	47c0      	blx	r8
 8009462:	3001      	adds	r0, #1
 8009464:	d0e6      	beq.n	8009434 <_printf_common+0xa4>
 8009466:	3601      	adds	r6, #1
 8009468:	e7d9      	b.n	800941e <_printf_common+0x8e>
	...

0800946c <_printf_i>:
 800946c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009470:	7e0f      	ldrb	r7, [r1, #24]
 8009472:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8009474:	2f78      	cmp	r7, #120	; 0x78
 8009476:	4691      	mov	r9, r2
 8009478:	4680      	mov	r8, r0
 800947a:	460c      	mov	r4, r1
 800947c:	469a      	mov	sl, r3
 800947e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8009482:	d807      	bhi.n	8009494 <_printf_i+0x28>
 8009484:	2f62      	cmp	r7, #98	; 0x62
 8009486:	d80a      	bhi.n	800949e <_printf_i+0x32>
 8009488:	2f00      	cmp	r7, #0
 800948a:	f000 80d8 	beq.w	800963e <_printf_i+0x1d2>
 800948e:	2f58      	cmp	r7, #88	; 0x58
 8009490:	f000 80a3 	beq.w	80095da <_printf_i+0x16e>
 8009494:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009498:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800949c:	e03a      	b.n	8009514 <_printf_i+0xa8>
 800949e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80094a2:	2b15      	cmp	r3, #21
 80094a4:	d8f6      	bhi.n	8009494 <_printf_i+0x28>
 80094a6:	a101      	add	r1, pc, #4	; (adr r1, 80094ac <_printf_i+0x40>)
 80094a8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80094ac:	08009505 	.word	0x08009505
 80094b0:	08009519 	.word	0x08009519
 80094b4:	08009495 	.word	0x08009495
 80094b8:	08009495 	.word	0x08009495
 80094bc:	08009495 	.word	0x08009495
 80094c0:	08009495 	.word	0x08009495
 80094c4:	08009519 	.word	0x08009519
 80094c8:	08009495 	.word	0x08009495
 80094cc:	08009495 	.word	0x08009495
 80094d0:	08009495 	.word	0x08009495
 80094d4:	08009495 	.word	0x08009495
 80094d8:	08009625 	.word	0x08009625
 80094dc:	08009549 	.word	0x08009549
 80094e0:	08009607 	.word	0x08009607
 80094e4:	08009495 	.word	0x08009495
 80094e8:	08009495 	.word	0x08009495
 80094ec:	08009647 	.word	0x08009647
 80094f0:	08009495 	.word	0x08009495
 80094f4:	08009549 	.word	0x08009549
 80094f8:	08009495 	.word	0x08009495
 80094fc:	08009495 	.word	0x08009495
 8009500:	0800960f 	.word	0x0800960f
 8009504:	682b      	ldr	r3, [r5, #0]
 8009506:	1d1a      	adds	r2, r3, #4
 8009508:	681b      	ldr	r3, [r3, #0]
 800950a:	602a      	str	r2, [r5, #0]
 800950c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009510:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8009514:	2301      	movs	r3, #1
 8009516:	e0a3      	b.n	8009660 <_printf_i+0x1f4>
 8009518:	6820      	ldr	r0, [r4, #0]
 800951a:	6829      	ldr	r1, [r5, #0]
 800951c:	0606      	lsls	r6, r0, #24
 800951e:	f101 0304 	add.w	r3, r1, #4
 8009522:	d50a      	bpl.n	800953a <_printf_i+0xce>
 8009524:	680e      	ldr	r6, [r1, #0]
 8009526:	602b      	str	r3, [r5, #0]
 8009528:	2e00      	cmp	r6, #0
 800952a:	da03      	bge.n	8009534 <_printf_i+0xc8>
 800952c:	232d      	movs	r3, #45	; 0x2d
 800952e:	4276      	negs	r6, r6
 8009530:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009534:	485e      	ldr	r0, [pc, #376]	; (80096b0 <_printf_i+0x244>)
 8009536:	230a      	movs	r3, #10
 8009538:	e019      	b.n	800956e <_printf_i+0x102>
 800953a:	680e      	ldr	r6, [r1, #0]
 800953c:	602b      	str	r3, [r5, #0]
 800953e:	f010 0f40 	tst.w	r0, #64	; 0x40
 8009542:	bf18      	it	ne
 8009544:	b236      	sxthne	r6, r6
 8009546:	e7ef      	b.n	8009528 <_printf_i+0xbc>
 8009548:	682b      	ldr	r3, [r5, #0]
 800954a:	6820      	ldr	r0, [r4, #0]
 800954c:	1d19      	adds	r1, r3, #4
 800954e:	6029      	str	r1, [r5, #0]
 8009550:	0601      	lsls	r1, r0, #24
 8009552:	d501      	bpl.n	8009558 <_printf_i+0xec>
 8009554:	681e      	ldr	r6, [r3, #0]
 8009556:	e002      	b.n	800955e <_printf_i+0xf2>
 8009558:	0646      	lsls	r6, r0, #25
 800955a:	d5fb      	bpl.n	8009554 <_printf_i+0xe8>
 800955c:	881e      	ldrh	r6, [r3, #0]
 800955e:	4854      	ldr	r0, [pc, #336]	; (80096b0 <_printf_i+0x244>)
 8009560:	2f6f      	cmp	r7, #111	; 0x6f
 8009562:	bf0c      	ite	eq
 8009564:	2308      	moveq	r3, #8
 8009566:	230a      	movne	r3, #10
 8009568:	2100      	movs	r1, #0
 800956a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800956e:	6865      	ldr	r5, [r4, #4]
 8009570:	60a5      	str	r5, [r4, #8]
 8009572:	2d00      	cmp	r5, #0
 8009574:	bfa2      	ittt	ge
 8009576:	6821      	ldrge	r1, [r4, #0]
 8009578:	f021 0104 	bicge.w	r1, r1, #4
 800957c:	6021      	strge	r1, [r4, #0]
 800957e:	b90e      	cbnz	r6, 8009584 <_printf_i+0x118>
 8009580:	2d00      	cmp	r5, #0
 8009582:	d04d      	beq.n	8009620 <_printf_i+0x1b4>
 8009584:	4615      	mov	r5, r2
 8009586:	fbb6 f1f3 	udiv	r1, r6, r3
 800958a:	fb03 6711 	mls	r7, r3, r1, r6
 800958e:	5dc7      	ldrb	r7, [r0, r7]
 8009590:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8009594:	4637      	mov	r7, r6
 8009596:	42bb      	cmp	r3, r7
 8009598:	460e      	mov	r6, r1
 800959a:	d9f4      	bls.n	8009586 <_printf_i+0x11a>
 800959c:	2b08      	cmp	r3, #8
 800959e:	d10b      	bne.n	80095b8 <_printf_i+0x14c>
 80095a0:	6823      	ldr	r3, [r4, #0]
 80095a2:	07de      	lsls	r6, r3, #31
 80095a4:	d508      	bpl.n	80095b8 <_printf_i+0x14c>
 80095a6:	6923      	ldr	r3, [r4, #16]
 80095a8:	6861      	ldr	r1, [r4, #4]
 80095aa:	4299      	cmp	r1, r3
 80095ac:	bfde      	ittt	le
 80095ae:	2330      	movle	r3, #48	; 0x30
 80095b0:	f805 3c01 	strble.w	r3, [r5, #-1]
 80095b4:	f105 35ff 	addle.w	r5, r5, #4294967295
 80095b8:	1b52      	subs	r2, r2, r5
 80095ba:	6122      	str	r2, [r4, #16]
 80095bc:	f8cd a000 	str.w	sl, [sp]
 80095c0:	464b      	mov	r3, r9
 80095c2:	aa03      	add	r2, sp, #12
 80095c4:	4621      	mov	r1, r4
 80095c6:	4640      	mov	r0, r8
 80095c8:	f7ff fee2 	bl	8009390 <_printf_common>
 80095cc:	3001      	adds	r0, #1
 80095ce:	d14c      	bne.n	800966a <_printf_i+0x1fe>
 80095d0:	f04f 30ff 	mov.w	r0, #4294967295
 80095d4:	b004      	add	sp, #16
 80095d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80095da:	4835      	ldr	r0, [pc, #212]	; (80096b0 <_printf_i+0x244>)
 80095dc:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80095e0:	6829      	ldr	r1, [r5, #0]
 80095e2:	6823      	ldr	r3, [r4, #0]
 80095e4:	f851 6b04 	ldr.w	r6, [r1], #4
 80095e8:	6029      	str	r1, [r5, #0]
 80095ea:	061d      	lsls	r5, r3, #24
 80095ec:	d514      	bpl.n	8009618 <_printf_i+0x1ac>
 80095ee:	07df      	lsls	r7, r3, #31
 80095f0:	bf44      	itt	mi
 80095f2:	f043 0320 	orrmi.w	r3, r3, #32
 80095f6:	6023      	strmi	r3, [r4, #0]
 80095f8:	b91e      	cbnz	r6, 8009602 <_printf_i+0x196>
 80095fa:	6823      	ldr	r3, [r4, #0]
 80095fc:	f023 0320 	bic.w	r3, r3, #32
 8009600:	6023      	str	r3, [r4, #0]
 8009602:	2310      	movs	r3, #16
 8009604:	e7b0      	b.n	8009568 <_printf_i+0xfc>
 8009606:	6823      	ldr	r3, [r4, #0]
 8009608:	f043 0320 	orr.w	r3, r3, #32
 800960c:	6023      	str	r3, [r4, #0]
 800960e:	2378      	movs	r3, #120	; 0x78
 8009610:	4828      	ldr	r0, [pc, #160]	; (80096b4 <_printf_i+0x248>)
 8009612:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8009616:	e7e3      	b.n	80095e0 <_printf_i+0x174>
 8009618:	0659      	lsls	r1, r3, #25
 800961a:	bf48      	it	mi
 800961c:	b2b6      	uxthmi	r6, r6
 800961e:	e7e6      	b.n	80095ee <_printf_i+0x182>
 8009620:	4615      	mov	r5, r2
 8009622:	e7bb      	b.n	800959c <_printf_i+0x130>
 8009624:	682b      	ldr	r3, [r5, #0]
 8009626:	6826      	ldr	r6, [r4, #0]
 8009628:	6961      	ldr	r1, [r4, #20]
 800962a:	1d18      	adds	r0, r3, #4
 800962c:	6028      	str	r0, [r5, #0]
 800962e:	0635      	lsls	r5, r6, #24
 8009630:	681b      	ldr	r3, [r3, #0]
 8009632:	d501      	bpl.n	8009638 <_printf_i+0x1cc>
 8009634:	6019      	str	r1, [r3, #0]
 8009636:	e002      	b.n	800963e <_printf_i+0x1d2>
 8009638:	0670      	lsls	r0, r6, #25
 800963a:	d5fb      	bpl.n	8009634 <_printf_i+0x1c8>
 800963c:	8019      	strh	r1, [r3, #0]
 800963e:	2300      	movs	r3, #0
 8009640:	6123      	str	r3, [r4, #16]
 8009642:	4615      	mov	r5, r2
 8009644:	e7ba      	b.n	80095bc <_printf_i+0x150>
 8009646:	682b      	ldr	r3, [r5, #0]
 8009648:	1d1a      	adds	r2, r3, #4
 800964a:	602a      	str	r2, [r5, #0]
 800964c:	681d      	ldr	r5, [r3, #0]
 800964e:	6862      	ldr	r2, [r4, #4]
 8009650:	2100      	movs	r1, #0
 8009652:	4628      	mov	r0, r5
 8009654:	f7f6 fdbc 	bl	80001d0 <memchr>
 8009658:	b108      	cbz	r0, 800965e <_printf_i+0x1f2>
 800965a:	1b40      	subs	r0, r0, r5
 800965c:	6060      	str	r0, [r4, #4]
 800965e:	6863      	ldr	r3, [r4, #4]
 8009660:	6123      	str	r3, [r4, #16]
 8009662:	2300      	movs	r3, #0
 8009664:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009668:	e7a8      	b.n	80095bc <_printf_i+0x150>
 800966a:	6923      	ldr	r3, [r4, #16]
 800966c:	462a      	mov	r2, r5
 800966e:	4649      	mov	r1, r9
 8009670:	4640      	mov	r0, r8
 8009672:	47d0      	blx	sl
 8009674:	3001      	adds	r0, #1
 8009676:	d0ab      	beq.n	80095d0 <_printf_i+0x164>
 8009678:	6823      	ldr	r3, [r4, #0]
 800967a:	079b      	lsls	r3, r3, #30
 800967c:	d413      	bmi.n	80096a6 <_printf_i+0x23a>
 800967e:	68e0      	ldr	r0, [r4, #12]
 8009680:	9b03      	ldr	r3, [sp, #12]
 8009682:	4298      	cmp	r0, r3
 8009684:	bfb8      	it	lt
 8009686:	4618      	movlt	r0, r3
 8009688:	e7a4      	b.n	80095d4 <_printf_i+0x168>
 800968a:	2301      	movs	r3, #1
 800968c:	4632      	mov	r2, r6
 800968e:	4649      	mov	r1, r9
 8009690:	4640      	mov	r0, r8
 8009692:	47d0      	blx	sl
 8009694:	3001      	adds	r0, #1
 8009696:	d09b      	beq.n	80095d0 <_printf_i+0x164>
 8009698:	3501      	adds	r5, #1
 800969a:	68e3      	ldr	r3, [r4, #12]
 800969c:	9903      	ldr	r1, [sp, #12]
 800969e:	1a5b      	subs	r3, r3, r1
 80096a0:	42ab      	cmp	r3, r5
 80096a2:	dcf2      	bgt.n	800968a <_printf_i+0x21e>
 80096a4:	e7eb      	b.n	800967e <_printf_i+0x212>
 80096a6:	2500      	movs	r5, #0
 80096a8:	f104 0619 	add.w	r6, r4, #25
 80096ac:	e7f5      	b.n	800969a <_printf_i+0x22e>
 80096ae:	bf00      	nop
 80096b0:	080097d9 	.word	0x080097d9
 80096b4:	080097ea 	.word	0x080097ea

080096b8 <__retarget_lock_acquire_recursive>:
 80096b8:	4770      	bx	lr

080096ba <__retarget_lock_release_recursive>:
 80096ba:	4770      	bx	lr

080096bc <memcpy>:
 80096bc:	440a      	add	r2, r1
 80096be:	4291      	cmp	r1, r2
 80096c0:	f100 33ff 	add.w	r3, r0, #4294967295
 80096c4:	d100      	bne.n	80096c8 <memcpy+0xc>
 80096c6:	4770      	bx	lr
 80096c8:	b510      	push	{r4, lr}
 80096ca:	f811 4b01 	ldrb.w	r4, [r1], #1
 80096ce:	f803 4f01 	strb.w	r4, [r3, #1]!
 80096d2:	4291      	cmp	r1, r2
 80096d4:	d1f9      	bne.n	80096ca <memcpy+0xe>
 80096d6:	bd10      	pop	{r4, pc}

080096d8 <memmove>:
 80096d8:	4288      	cmp	r0, r1
 80096da:	b510      	push	{r4, lr}
 80096dc:	eb01 0402 	add.w	r4, r1, r2
 80096e0:	d902      	bls.n	80096e8 <memmove+0x10>
 80096e2:	4284      	cmp	r4, r0
 80096e4:	4623      	mov	r3, r4
 80096e6:	d807      	bhi.n	80096f8 <memmove+0x20>
 80096e8:	1e43      	subs	r3, r0, #1
 80096ea:	42a1      	cmp	r1, r4
 80096ec:	d008      	beq.n	8009700 <memmove+0x28>
 80096ee:	f811 2b01 	ldrb.w	r2, [r1], #1
 80096f2:	f803 2f01 	strb.w	r2, [r3, #1]!
 80096f6:	e7f8      	b.n	80096ea <memmove+0x12>
 80096f8:	4402      	add	r2, r0
 80096fa:	4601      	mov	r1, r0
 80096fc:	428a      	cmp	r2, r1
 80096fe:	d100      	bne.n	8009702 <memmove+0x2a>
 8009700:	bd10      	pop	{r4, pc}
 8009702:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8009706:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800970a:	e7f7      	b.n	80096fc <memmove+0x24>

0800970c <_realloc_r>:
 800970c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009710:	4680      	mov	r8, r0
 8009712:	4614      	mov	r4, r2
 8009714:	460e      	mov	r6, r1
 8009716:	b921      	cbnz	r1, 8009722 <_realloc_r+0x16>
 8009718:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800971c:	4611      	mov	r1, r2
 800971e:	f7ff bc2b 	b.w	8008f78 <_malloc_r>
 8009722:	b92a      	cbnz	r2, 8009730 <_realloc_r+0x24>
 8009724:	f7ff fbbc 	bl	8008ea0 <_free_r>
 8009728:	4625      	mov	r5, r4
 800972a:	4628      	mov	r0, r5
 800972c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009730:	f000 f81b 	bl	800976a <_malloc_usable_size_r>
 8009734:	4284      	cmp	r4, r0
 8009736:	4607      	mov	r7, r0
 8009738:	d802      	bhi.n	8009740 <_realloc_r+0x34>
 800973a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800973e:	d812      	bhi.n	8009766 <_realloc_r+0x5a>
 8009740:	4621      	mov	r1, r4
 8009742:	4640      	mov	r0, r8
 8009744:	f7ff fc18 	bl	8008f78 <_malloc_r>
 8009748:	4605      	mov	r5, r0
 800974a:	2800      	cmp	r0, #0
 800974c:	d0ed      	beq.n	800972a <_realloc_r+0x1e>
 800974e:	42bc      	cmp	r4, r7
 8009750:	4622      	mov	r2, r4
 8009752:	4631      	mov	r1, r6
 8009754:	bf28      	it	cs
 8009756:	463a      	movcs	r2, r7
 8009758:	f7ff ffb0 	bl	80096bc <memcpy>
 800975c:	4631      	mov	r1, r6
 800975e:	4640      	mov	r0, r8
 8009760:	f7ff fb9e 	bl	8008ea0 <_free_r>
 8009764:	e7e1      	b.n	800972a <_realloc_r+0x1e>
 8009766:	4635      	mov	r5, r6
 8009768:	e7df      	b.n	800972a <_realloc_r+0x1e>

0800976a <_malloc_usable_size_r>:
 800976a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800976e:	1f18      	subs	r0, r3, #4
 8009770:	2b00      	cmp	r3, #0
 8009772:	bfbc      	itt	lt
 8009774:	580b      	ldrlt	r3, [r1, r0]
 8009776:	18c0      	addlt	r0, r0, r3
 8009778:	4770      	bx	lr
	...

0800977c <_init>:
 800977c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800977e:	bf00      	nop
 8009780:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009782:	bc08      	pop	{r3}
 8009784:	469e      	mov	lr, r3
 8009786:	4770      	bx	lr

08009788 <_fini>:
 8009788:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800978a:	bf00      	nop
 800978c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800978e:	bc08      	pop	{r3}
 8009790:	469e      	mov	lr, r3
 8009792:	4770      	bx	lr
